{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Sp\u00e9cialit\u00e9 NSI en Premi\u00e8re \u2693\ufe0e T\u00e9l\u00e9charger le starter code Introduction \u2693\ufe0e Le but de ce site web est de vous proposer un cours interactif \u00e0 travailler \u00e0 la maison : vous pourrez programmer en Python en ligne sans avoir besoin d'installer un \u00e9diteur. Je vous conseille d'utiliser le navigateur Firefox , Chrome ou Chromium afin de b\u00e9n\u00e9ficier de la meilleure exp\u00e9rience utilisateur. Comme toute langue, la programmation s'apprend avant tout en lisant, en \u00e9crivant, en r\u00e9p\u00e9tant et en s'entrainant. Ainsi, le copier/coller des commandes Python de ce cours a \u00e9t\u00e9 d\u00e9sactiv\u00e9. Pour les tester, vous allez devoir les \u00e9crire ! De nombreux exercices corrig\u00e9s vous sont \u00e9galement propos\u00e9s : faites-les tous, pr\u00e9parez les questions que nous traiterons en cours et vous r\u00e9ussirez les interrogations de d\u00e9but de cours. Ce site respecte votre vie priv\u00e9e : aucun cookie n'est demand\u00e9 ; aucune inscription n'est requise. Fonctionnement des exercices \u2693\ufe0e Trois grands types d'exercices sont propos\u00e9s. Papier/Crayon Pas de probl\u00e8me. Prenez une feuille et un crayon. Ne trichez pas en regardant la correction trop vite. Pr\u00e9dire/comprendre Comme ci-dessous, vous disposez d'un programme dans un \u00e9diteur. Vous devez comprendre le programme et pr\u00e9dire ce qui va se passer. Vous pouvez tester en appuyant sur la fl\u00e8che pointant \u00e0 droite. Status: Disconnected. Please connect your Numworks. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder n = 5bksl-nlp = 2bksl-nlbksl-nlfor i in range(1,n):bksl-nl p py-str= ibksl-nlbksl-nlprint(p)bksl-nl Programmer Vous devez compl\u00e9ter ou \u00e9crire un programme dans un \u00e9diteur. Vous pouvez tester en appuyant sur la fl\u00e8che pointant \u00e0 droite \u25b6\ufe0f. Vous pouvez tenter de valider votre programme pour savoir si celui-ci est correct en cliquant sur le gendarme \ud83d\udec2. Votre programme est alors soumis \u00e0 de nombreux tests. Au bout de 5 validations rat\u00e9es, la solution apparait. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def sommation(T: list) -> int:bksl-nl a = 0bksl-nl for nombre in T:bksl-nl a = a+nombrebksl-nl return abksl-nlbksl-nldef somme(L: list) -> None or int:bksl-nl return sum(L)bksl-nl FAQ \u2693\ufe0e Voici quelques questions que ous pourriez vous poser : Rien ne s'enregistre et lorsque je recharge la page internet, tout s'efface ! C'est normal. Il n'y a pas de cookie ou de sessions. Vos donn\u00e9es ne sont donc pas enregistr\u00e9es. Vous pouvez toutefois t\u00e9l\u00e9charger vos programmes lorsque ceux-ci sont importants. C'est normal que je n'arrive pas \u00e0 faire un copier/coller de certains codes du cours ? Oui. J'ai bloqu\u00e9 cette fonctionnalit\u00e9. La programmation s'apprend en programmant. Il faut vraiment TOUT savoir ce qu'il y a sur votre site ? Non. Avec le contr\u00f4le de cours, je m'assure que vous avez travaill\u00e9 le cours avant de venir. Sinon, vous perdez votre temps et celui de vos camarades. Un contr\u00f4le de cours par semaine, \u00e7a sert \u00e0 rien et \u00e7a fait perdre du temps. Non. Avec un contr\u00f4le de cours, je m'assure que vous avez travaill\u00e9 le cours avant de venir. Sinon, vous perdez votre temps et celui de vos camarades. C'est sympa de pouvoir coder directement sur une page web. Qui est responsable de cela ? C'est moi qui ait d\u00e9velopp\u00e9 tout le moteur. Cela fonctionne gr\u00e2ce \u00e0 une technologie de 2017 appel\u00e9 WebAssembly. Celle-ci permet de coupler Javascript et Python. Et d'autres d\u00e9veloppements arrivent... var editor = ace.edit(\"editor_1\"); var code = editor.getValue(); var calculator = new Numworks(); var status = document.getElementById(\"status\"); var connect = document.getElementById(\"connect\"); var content = document.getElementById(\"content\"); navigator.usb.addEventListener(\"disconnect\", function(e) { calculator.onUnexpectedDisconnect(e, function() { status.innerHTML = \"Disconnected.\"; content.innerHTML = \"Please connect your Numworks.\"; calculator.autoConnect(autoConnectHandler); }); }); function handleScriptSend(type) { var editor = ace.edit(type); var code = editor.getValue(); connected(code, \"mkdocs\", 1); } calculator.autoConnect(autoConnectHandler); function autoConnectHandler(e) { calculator.stopAutoConnect(); code = editor.getValue(); connected(\"\", \"\", 0); } connect.onclick = function(e) { calculator.detect(function() { calculator.stopAutoConnect(); connected(\"\",\"\",0); }, function(error) { status.innerHTML = \"Error: \" + error; }); }; async function connected(script, name, send) { connect.disabled = true; status.innerHTML = \"Connected.\"; var model = calculator.getModel(false); var html_content = \"Model: \" + calculator.getModel(false) + \"<br/>\"; // Get the platform information var platformInfo = await calculator.getPlatformInfo(); console.log(platformInfo); if(send) { var storage = await calculator.backupStorage(); storage.records.push({\"name\": name, \"type\": \"py\", \"autoImport\": true, position: 0, \"code\": script}); await calculator.installStorage(storage, function() { console.log(\"don\") }); } content.innerHTML = html_content; }","title":"Bienvenue"},{"location":"#specialite-nsi-en-premiere","text":"T\u00e9l\u00e9charger le starter code","title":"Sp\u00e9cialit\u00e9 NSI en Premi\u00e8re"},{"location":"#introduction","text":"Le but de ce site web est de vous proposer un cours interactif \u00e0 travailler \u00e0 la maison : vous pourrez programmer en Python en ligne sans avoir besoin d'installer un \u00e9diteur. Je vous conseille d'utiliser le navigateur Firefox , Chrome ou Chromium afin de b\u00e9n\u00e9ficier de la meilleure exp\u00e9rience utilisateur. Comme toute langue, la programmation s'apprend avant tout en lisant, en \u00e9crivant, en r\u00e9p\u00e9tant et en s'entrainant. Ainsi, le copier/coller des commandes Python de ce cours a \u00e9t\u00e9 d\u00e9sactiv\u00e9. Pour les tester, vous allez devoir les \u00e9crire ! De nombreux exercices corrig\u00e9s vous sont \u00e9galement propos\u00e9s : faites-les tous, pr\u00e9parez les questions que nous traiterons en cours et vous r\u00e9ussirez les interrogations de d\u00e9but de cours. Ce site respecte votre vie priv\u00e9e : aucun cookie n'est demand\u00e9 ; aucune inscription n'est requise.","title":"Introduction"},{"location":"#fonctionnement-des-exercices","text":"Trois grands types d'exercices sont propos\u00e9s. Papier/Crayon Pas de probl\u00e8me. Prenez une feuille et un crayon. Ne trichez pas en regardant la correction trop vite. Pr\u00e9dire/comprendre Comme ci-dessous, vous disposez d'un programme dans un \u00e9diteur. Vous devez comprendre le programme et pr\u00e9dire ce qui va se passer. Vous pouvez tester en appuyant sur la fl\u00e8che pointant \u00e0 droite. Status: Disconnected. Please connect your Numworks. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder n = 5bksl-nlp = 2bksl-nlbksl-nlfor i in range(1,n):bksl-nl p py-str= ibksl-nlbksl-nlprint(p)bksl-nl Programmer Vous devez compl\u00e9ter ou \u00e9crire un programme dans un \u00e9diteur. Vous pouvez tester en appuyant sur la fl\u00e8che pointant \u00e0 droite \u25b6\ufe0f. Vous pouvez tenter de valider votre programme pour savoir si celui-ci est correct en cliquant sur le gendarme \ud83d\udec2. Votre programme est alors soumis \u00e0 de nombreux tests. Au bout de 5 validations rat\u00e9es, la solution apparait. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def sommation(T: list) -> int:bksl-nl a = 0bksl-nl for nombre in T:bksl-nl a = a+nombrebksl-nl return abksl-nlbksl-nldef somme(L: list) -> None or int:bksl-nl return sum(L)bksl-nl","title":"Fonctionnement des exercices"},{"location":"#faq","text":"Voici quelques questions que ous pourriez vous poser : Rien ne s'enregistre et lorsque je recharge la page internet, tout s'efface ! C'est normal. Il n'y a pas de cookie ou de sessions. Vos donn\u00e9es ne sont donc pas enregistr\u00e9es. Vous pouvez toutefois t\u00e9l\u00e9charger vos programmes lorsque ceux-ci sont importants. C'est normal que je n'arrive pas \u00e0 faire un copier/coller de certains codes du cours ? Oui. J'ai bloqu\u00e9 cette fonctionnalit\u00e9. La programmation s'apprend en programmant. Il faut vraiment TOUT savoir ce qu'il y a sur votre site ? Non. Avec le contr\u00f4le de cours, je m'assure que vous avez travaill\u00e9 le cours avant de venir. Sinon, vous perdez votre temps et celui de vos camarades. Un contr\u00f4le de cours par semaine, \u00e7a sert \u00e0 rien et \u00e7a fait perdre du temps. Non. Avec un contr\u00f4le de cours, je m'assure que vous avez travaill\u00e9 le cours avant de venir. Sinon, vous perdez votre temps et celui de vos camarades. C'est sympa de pouvoir coder directement sur une page web. Qui est responsable de cela ? C'est moi qui ait d\u00e9velopp\u00e9 tout le moteur. Cela fonctionne gr\u00e2ce \u00e0 une technologie de 2017 appel\u00e9 WebAssembly. Celle-ci permet de coupler Javascript et Python. Et d'autres d\u00e9veloppements arrivent... var editor = ace.edit(\"editor_1\"); var code = editor.getValue(); var calculator = new Numworks(); var status = document.getElementById(\"status\"); var connect = document.getElementById(\"connect\"); var content = document.getElementById(\"content\"); navigator.usb.addEventListener(\"disconnect\", function(e) { calculator.onUnexpectedDisconnect(e, function() { status.innerHTML = \"Disconnected.\"; content.innerHTML = \"Please connect your Numworks.\"; calculator.autoConnect(autoConnectHandler); }); }); function handleScriptSend(type) { var editor = ace.edit(type); var code = editor.getValue(); connected(code, \"mkdocs\", 1); } calculator.autoConnect(autoConnectHandler); function autoConnectHandler(e) { calculator.stopAutoConnect(); code = editor.getValue(); connected(\"\", \"\", 0); } connect.onclick = function(e) { calculator.detect(function() { calculator.stopAutoConnect(); connected(\"\",\"\",0); }, function(error) { status.innerHTML = \"Error: \" + error; }); }; async function connected(script, name, send) { connect.disabled = true; status.innerHTML = \"Connected.\"; var model = calculator.getModel(false); var html_content = \"Model: \" + calculator.getModel(false) + \"<br/>\"; // Get the platform information var platformInfo = await calculator.getPlatformInfo(); console.log(platformInfo); if(send) { var storage = await calculator.backupStorage(); storage.records.push({\"name\": name, \"type\": \"py\", \"autoImport\": true, position: 0, \"code\": script}); await calculator.installStorage(storage, function() { console.log(\"don\") }); } content.innerHTML = html_content; }","title":"FAQ"},{"location":"algorithme5/","text":"Algorithmes gloutons \u2693\ufe0e Principe \u2693\ufe0e En progammation, un principe important est le principe DRY . Cet acronyme signifie D on't R epeat Y ourself. Terminal, console et \u00e9diteur de code \u2693\ufe0e pointsDeMana = 6.5 et persoVivant = True Affichez les types de ces variables dans le terminal \u00e0 l'aide de l'instruction print (......). [Remarque :]{.ul} On utilise la notation anglo-saxonne avec . pour la virgule, et e pour \\\"10 puissance\\\". Par exemple : 1.5e4 = 15000 --- \u00c0 faire vous-m\u00eame 10 --- Dans votre programme, \u00e0 partir de la variable ageJoueur et des op\u00e9rations de transtypage, cr\u00e9ez les variables suivantes : Il y a 3 minuttes ageJoueurEntier, ageJoueurReel, ageJoueurBool, ageJoueurList, ageJoueurTuple qui seront de type entier, flottant, bool\u00e9en, liste et tuple. Affichez ces variables dans le terminal et \u00e9tudiez les diff\u00e9rences entre ces \u00e9critures. Un peu de math\u00e9matiques ! 1) Op\u00e9rations natives en Python Python poss\u00e8de des symboles permettant de faire des op\u00e9rations arithm\u00e9tiques. Il est possible d'effectuer des op\u00e9rations avec des nombres , mais aussi avec des variables . Les signes utilis\u00e9s sont classiques : +, - . --- \u00c0 faire vous-m\u00eame 11 --- Dans le terminal Python, en faisant de nombreux tests, d\u00e9couvrez la signification des symboles *, / , // , % et **. --- \u00c0 faire vous-m\u00eame 12 --- Cr\u00e9er un nouveau fichier appel\u00e9 addition.py. \u00c9crire un programme qui additionnera le contenu de 2 variables nomm\u00e9es a et b . Le r\u00e9sultat de cette op\u00e9ration devra \u00eatre r\u00e9f\u00e9renc\u00e9 par une troisi\u00e8me variable nomm\u00e9e resultat (attention, pas d'accent dans les noms de variable). Testez votre programme en utilisant la console pour v\u00e9rifier la valeur r\u00e9f\u00e9renc\u00e9e par la variable resultat . --- \u00c0 faire vous-m\u00eame 13 --- Cr\u00e9er un nouveau fichier appel\u00e9 conversionAge.py. Ecrire un programme qui demande votre \u00e2ge en ann\u00e9e et le convertit en nombre de jours. 5) Biblioth\u00e8que math Il est possible d'effectuer des calculs complexes en utilisant des racines carr\u00e9es, des fonctions trigonom\u00e9trique des logarithmes,... Pour utiliser ces instructions \\\"\u00e9l\u00e9mentaires\\\", il est n\u00e9cessaire d'ajouter une ligne au d\u00e9but de votre programme : import math Cette ligne permet d'importer (et donc d'utiliser) la biblioth\u00e8que \\\"math\\\" qui contient toutes les fonctions math\u00e9matiques \\\"classiques\\\". Voici quelques exemples : math.pow(x,a) permet de calculer x \u00e0 la puissance a ; math.cos(x) permet de calculer le cosinus de l'angle x (l'angle x doit \u00eatre en radian) ; math.sqrt(x) permet de calculer la racine carr\u00e9e de x. Si vous avez besoin d'autres fonctions math\u00e9matiques, je vous invite \u00e0 consulter la documentation de Python : <https://docs.python.org/3/library/math.html --- \u00c0 faire vous-m\u00eame 14 --- En calculant \u00e0 la main, d\u00e9terminez les valeurs r\u00e9f\u00e9renc\u00e9es par les variables d, e, f, g, h et i apr\u00e8s l'ex\u00e9cution du programme suivant : import math a = 5 b = 16 c = 3.14 / 2 d = b / a e = b // a f = b % a g = math.pow(a,2) h = math.sqrt(b) i = math.sin(c) V\u00e9rifiez vos r\u00e9ponses \u00e0 l'aide du terminal. --- \u00c0 faire vous-m\u00eame 15 --- \u00c9crire un programme permettant de r\u00e9pondre \u00e0 la question suivante : \\\"Quel est le type du r\u00e9sultat d'une addition d'un integer et d'un float ?\\\" [Remarque :]{.ul} Il est donc tout \u00e0 fait possible de \\\"m\u00e9langer\\\" des nombres entiers et des nombres \u00e0 virgules (\\\"3.14 / 2\\\") dans une op\u00e9ration. Attention aux float : dans le terminal essayez de faire 0.1+0.1 puis 0.1+0.1+0.1\\ Qu'en pensez-vous ? Chaine de caract\u00e8res : vive les strings. 1) Chaines de caract\u00e8res Les chaines de caract\u00e8res sont des listes de caract\u00e8res : \\\"le chat\\\" est constitu\u00e9 des caract\u00e8res 'l', 'e', ' ', 'c', 'h', 'a', 't' . On peut connaitre la longueur d'une chaine de caract\u00e8res gr\u00e2ce \u00e0 : len(string) --- \u00c0 faire vous-m\u00eame 16 --- Cr\u00e9er un nouveau fichier strings.py : maChaine = \\\"Bonjour le monde !\\\" V\u00e9rifiez que la variable maChaine est une chaine de caract\u00e8res contenant la phrase \\\"Bonjour le monde !\\\" 6) Concat\u00e9nation : le signe + L'utilisation du signe + ne se limite pas \u00e0 l'addition. Il est aussi utilis\u00e9 pour la concat\u00e9nation . Cherchez sur Wikip\u00e9dia l'\u00e9tymologie du mot. --- \u00c0 faire vous-m\u00eame 17 --- Quelle est la cha\u00eene de caract\u00e8re r\u00e9f\u00e9renc\u00e9e par la variable monExpression apr\u00e8s l'ex\u00e9cution du programme ci-dessous ? Validez votre r\u00e9ponse en testant ce programme dans strings.py. a = \\\"Hello\\\" b = \\\"World\\\" monExpression = a + b 7) Cha\u00eenes de caract\u00e8res et variables Il est aussi possible de concat\u00e9ner une cha\u00eene de caract\u00e8res et une ou plusieurs variables : --- \u00c0 faire vous-m\u00eame 18 --- Quelle est la valeur de res dans le programme ci-dessous ? Validez votre r\u00e9ponse en testant ce programme dans strings.py. myString1 = \\\"Bonjour \\\" myString2 = \\\"le \\\" res = myString1 + myString2 + \\\"monde!\\\" Les 2 variables myString1 et myString2 r\u00e9f\u00e9rencent 2 cha\u00eenes de caract\u00e8res, nous avons donc bien ici une concat\u00e9nation. Mais que se passe-t-il si la variable r\u00e9f\u00e9rence un nombre (entier ou flottant) ? --- \u00c0 faire vous-m\u00eame 19 --- Testez le code suivant dans strings.py: monNombre = 5 res = \\\"Nombre de personnes : \\\" + monNombre Que constatez-vous ? Pourquoi ? ________________________________________________________________ ________________________________________________________________ Python nous offre 2 solutions : l'utilisation de la m\u00e9thode \\\"str\\\" l'utilisation des \\\"fstring\\\" La m\u00e9thode \\\"str\\\" permet de transformer un nombre en cha\u00eene de caract\u00e8res. On appelle cela du transtypage . --- \u00c0 faire vous-m\u00eame 20 --- En utilisant la m\u00e9thode \\\"str\\\", corrigez le programme fait au #19. Les \\\"fstring\\\" (nouveaut\u00e9 de Python 3.6), permettent de r\u00e9soudre ce probl\u00e8me de combinaison variable-cha\u00eene de caract\u00e8res. --- \u00c0 faire vous-m\u00eame 21 --- Testez le code suivant dans strings.py : monAutreNombre = 10 res = f\\\"Nombre de personnes : {monAutreNombre}\\\" [Remarque :]{.ul} Notez la pr\u00e9sence du \\\"f\\\" juste avant le guillemet et des accolades qui encadrent le nom de la variable. Checkpoint 1) On dispose de la formule suivante pour convertir les degr\u00e9s Fahrenheit en degr\u00e9s Celsius : \\(C = \\frac{F - 32}{1,8}\\) , o\u00f9 F est une temp\u00e9rature en degr\u00e9s Fahrenheit et C la temp\u00e9rature correspondante en degr\u00e9s Celsius. a. Ecrire un programme qui convertit en degr\u00e9s Celsius une temp\u00e9rature rentr\u00e9e au clavier en degr\u00e9s Fahrenheit. b. M\u00eame question pour la conversion inverse. 2) \u00c9crire un programme qui permute et affiche les valeurs de trois variables a , b , c qui sont entr\u00e9es au clavier : a ==*b , b ==*c , c ==*a*. 3) Ecrire un programme qui teste si une chaine de caract\u00e8re est un palindrome.\\ Exemple de palindrome :\\ 'kayak' ou 'Engage le jeu que je le gagne' Structures de contr\u00f4le <!-- -- 1) Bool\u00e9ens Si quelqu'un vous dit que \\\"4 est \u00e9gal \u00e0 4\\\", vous lui r\u00e9pondez : \\\"ben c'est vrai\\\". Si maintenant la m\u00eame personne vous dit que \\\"7 est \u00e9gal \u00e0 12\\\", vous lui r\u00e9pondrez bien \u00e9videmment que \\\"c'est faux !\\\". Comme en langage naturel, en Python, ces deux affirmations se noterons avec un double signe \u00e9gal : par exemple, 7 == 12. --- \u00c0 faire vous-m\u00eame 22 --- Dans le terminal, tapez : 7 == 12 5 = 4 5 \\<= 5 5 != 5 5 \\12 En Python, \\\" 5 = 5 \\\" est appel\u00e9 une expression. Une expression est soit vraie (True), soit fausse (False). Dans le dernier TP, nous avons surtout travaill\u00e9 sur les entiers, les nombres flottants et les cha\u00eenes de caract\u00e8res. Ici, nous abordons les bool\u00e9ens . [Rappel :]{.ul} Un bool\u00e9en est un type de donn\u00e9es qui ne peut prendre que deux valeurs : vrai (True) ou faux (False). --- \u00c0 faire vous-m\u00eame 23 --- Dans l'\u00e9diteur de texte, entrez les valeurs a = 4 et b = 7. Quel est le r\u00e9sultat attendu apr\u00e8s l'ex\u00e9cution de ce programme si vous saisissez dans la console \\\"a == b\\\" ? si vous saisissez \\\"a != b\\\" Ajoutez la signification de ces op\u00e9rateurs sur le formulaire. On peut connecter des expressions bool\u00e9ennes les unes aux autres \u00e0 l'aide des op\u00e9rateurs logiques and (et), or (ou) ou not (non). Nous verrons leur fonctionnement exact dans un prochain chapitre. Pour l'instant, nous allons remplir les tables de v\u00e9rit\u00e9s page suivante \u00e0 l'aide de tests Python : --- \u00c0 faire vous-m\u00eame 24 --- Dans l'\u00e9diteur de texte, entrez les expressions : expr1 = (4 \\< 10) et expr2 = (12 != 10) Puis, sur une m\u00eame ligne, afficher ensuite les valeurs de : expr1 , expr2 , expr1 or expr2 . Refaites d'autres tests afin de remplir les trois tables de v\u00e9rit\u00e9 ci-dessous. [Table de v\u00e9rit\u00e9 pour le \\\"ou\\\"]{.ul} [Table de v\u00e9rit\u00e9 pour le \\\"et\\\"]{.ul} [Table de v\u00e9rit\u00e9 pour le \\\"non\\\"]{.ul} [Rem :]{.ul} il est facile de faire n'importe quoi avec des enchainements d'expressions bool\u00e9ennes. Conservez des expressions simples. --- \u00c0 faire vous-m\u00eame 25 --- En testant le programme suivant, trouvez la valeur de c en fonction des valeurs de a et de b. Bonne chance ! a = int( input(\\\"Donnez un nombre\\\") ) b = (a \\50) print( \\\"b vaut\\\", b, \\\", et est de type \\\", type(b) ) c = ( a == 3 or not(b) or not(a != 25) ) [Remarque importante :]{.ul} Flottants et bool\u00e9ens ne font pas bon m\u00e9nage ! Les flottants ne sont qu'une repr\u00e9sentation d\u00e9cimale des r\u00e9els. --- \u00c0 faire vous-m\u00eame 26 --- Dans le terminal, trouvez les valeurs des expressions bool\u00e9ennes suivantes : A = (3 * 0.1 == 0.3) A est _________________ B = (abs(3 * 0.1 - 0.3) \\< 1e-5) B est _________________ n = 1e15 C1 = (1 + 1 / n == 1) C1 est _________________ n = 1e16 C2 = (1 + 1 / n == 1) C2 est _________________ D = (1 / n == 0) D est _________________ [Conclusion :]{.ul} Pour comparer deux flottants, on v\u00e9rifie s'ils sont assez proches comme dans l'expression B. 8) Conditionnelle \\\"Si ... Alors ...\\\" Dans le chapitre 2, nous avons abord\u00e9 la structure de controle \\\"Si ... Alors ... Sinon\\\". En Python, cette structure appel\u00e9e conditionnelle s'\u00e9crit : if expressionBool\u00e9enne : blocInstructionA else : blocInstructionB Si l'expression est vraie, alors on fait le bloc d'instructions A. Sinon, on fait le bloc d'instructions B. --- \u00c0 faire vous-m\u00eame 27 --- Dans l'\u00e9diteur de texte, entrez le programme suivant : v = float(input('Vitesse du vent (en noeuds)?')) if v = 20 : meteo = 'Sortie en mer annul\u00e9e' else: meteo = 'Sortie en mer maintenue' print( meteo ) --- \u00c0 faire vous-m\u00eame 28 --- \u00c9crire un programme qui prend en entr\u00e9e un age. Si age est sup\u00e9rieur ou \u00e9gal \u00e0 18 ans, la fonction devra renvoyer la cha\u00eene de caract\u00e8res \\\"Bonjour, vous \u00eates majeur.\\\". Si age est inf\u00e9rieur \u00e0 18 ans, la fonction devra renvoyer \\\"Bonjour, tu es mineur.\\\" --- \u00c0 faire vous-m\u00eame 29 --- Dans l'\u00e9diteur de texte, modifiez le programme #27 pour obtenir : v = float(input('Vitesse du vent (en noeuds)?')) h = float(input('Houle (en m)?')) varBooleen = (v = 20 or h = 5) if varBooleen == True : meteo = 'Sortie en mer annul\u00e9e' else: meteo = 'Sortie en mer maintenue' print( meteo ) [Remarque :]{.ul} Dans le programme pr\u00e9c\u00e9dent, a-t-on besoin de sp\u00e9cifier == True ? Pourquoi ? Pour r\u00e9pondre, essayez de l'enlever dans le programme #29. --- \u00c0 faire vous-m\u00eame 30 --- Quel est le r\u00e9sultat attendu apr\u00e8s l'ex\u00e9cution de ce programme ? Est-il possible d'obtenir tous les messages? V\u00e9rifiez votre r\u00e9ponse en testant ce programme (faire varier a et b) a = 5 b = 10 if a \\5 and b == 10: varAffiche = \\\"Toto\\\" else: varAffiche = \\\"Titi\\\" if a \\5 or b == 10: varAffiche = \\\"Tata\\\" else: varAffiche = \\\"Tutu\\\" print( varAffiche ) [Rem]{.ul} : Attention aux bool\u00e9ens et aux variables opaques... 9) Conditionnelle \\\"Si ... SinonSi ... Alors ...\\\" Dans le chapitre 2, nous avons \u00e9galement discut\u00e9 de la structure de controle \\\"Si ... SinonSi ... Sinon\\\". En Python , elle s'\u00e9crit : if expressionBool\u00e9enne1 : blocInstructionA1 elif expressionBool\u00e9enne2 : blocInstructionA2 else : blocInstructionB {width=\"3.371745406824147in\" height=\"3.2762379702537183in\"} --- \u00c0 faire vous-m\u00eame 31 --- Les tarif re\u0301duits pour l'entre\u0301e a\u0300 un muse\u0301e sont : gratuit pour les moins de 5 ans mi-tarif pour les moins de 16 ans mi-tarif pour les plus de 65 ans mi-tarif pour les e\u0301tudiants. \u00c0 l'aide des instructions elif, programmez\\ l'algorithme ci-contre afin d'afficher quel\\ est le prix que doit payer un visiteur. Les deux\\ variables que l'utilisateur devra entrer au\\ clavier sont : age et statut. Tarif sera \u00e9gal \u00e0 10. --- \u00c0 faire vous-m\u00eame 32 --- On prend a = 10 : testez les trois codes ci-dessous. if a \\< 5: print(a, \\\"\\< 5\\\") if a \\2: print(a, \\\"\\2\\\") if a \\4: print(a, \\\"\\4\\\") if a \\< 5 : print(a, \\\"\\< 5\\\") elif a \\2: print(a, \\\"\\2\\\") elif a \\4: print(a, \\\"\\4\\\") if a \\< 5 : print(a, \\\"\\< 5\\\") elif a \\4: print(a, \\\"\\4\\\") elif a \\2: print(a, \\\"\\2\\\") Que pouvez-vous d\u00e9duire du test #32 ? 10) Boucle non born\u00e9e Comme nous l'avons vu dans le Chapitre 2, la boucle est fondamentale en informatique. On r\u00e9alise une boucle [non born\u00e9e]{.ul} gr\u00e2ce \u00e0 l'instruction : while expressionBool\u00e9enne : blocInstructions Le bloc d'instructions continuera tant que l'expression bool\u00e9enne est vraie. --- \u00c0 faire vous-m\u00eame 33 --- Dans l'\u00e9diteur de texte, \u00e9crire le programme suivant : i = 0 while i \\< 10: print(\\\"i vaut : \\\", i ) i = i + 1 print(\\\"C'est enfin termin\u00e9.\\\") Quel est le r\u00e9sultat attendu apr\u00e8s l'ex\u00e9cution de ce programme ? V\u00e9rifiez votre r\u00e9ponse en testant le programme [Rem]{.ul} : Dans ce programme, i s'appelle le compteur. --- \u00c0 faire vous-m\u00eame 34 --- \u00c9crire un programme permettant de cr\u00e9er \\\"un g\u00e9n\u00e9rateur automatique de punition\\\" . Il y aura deux valeurs d'entr\u00e9e : une cha\u00eene de caract\u00e8re et un nombre entier Exemple : Si l'utilisateur entre : \\\" Je ne dois pas discuter en classe \\\" et 3 Le programme devra permettre d'afficher : Je ne dois pas discuter en classe Je ne dois pas discuter en classe Je ne dois pas discuter en classe --- \u00c0 faire vous-m\u00eame 35 --- \u00c9crire un programme de jeu dont le but est de trouver le nombre 42 par essais successifs. Tant que le nombre 42 n'a pas \u00e9t\u00e9 trouv\u00e9, l'utilisateur doit entrer de nouveaux nombres. Exemple : Le programme dit : \\\"Donne un nombre\\\" --- l'utilisateur entre : 12 Le programme dit : \\\"Donne un nombre\\\" --- l'utilisateur entre : 25 Le programme dit : \\\"Donne un nombre\\\" --- l'utilisateur entre : 42 Le programme dit : \\\"Bravo! C'est gagn\u00e9 !\\\" 11) Boucle born\u00e9e On r\u00e9alise une boucle [born\u00e9e]{.ul} gr\u00e2ce \u00e0 l'instruction : for element in sequence : blocInstructions Contrairement aux boucles non born\u00e9es, la borne born\u00e9e permet de parcourir les \u00e9l\u00e9ments d'une s\u00e9quence de [longueur connue]{.ul} . --- \u00c0 faire vous-m\u00eame 36 --- Tester le programme suivant. Que fait-il ?\\ En changeant les valeurs de 0 et 8, \u00e9tudier le fonctionnement de l'instruction range. for element in range(0, 8, 1): print(element, element**2, element**3) [Remarque :]{.ul} L'instruction range(0, 8, 1) permet de g\u00e9n\u00e9rer tous les nombres successivement entre ____________________________________ . M\u00eame si ce n'est pas compl\u00e8tement exact, on peut dire que range(0, n) est \u00e9quivalent \u00e0 un tableau T avec T = [0, 1, 2, ......... , n-1] . [D\u00e9finition :]{.ul} Une s\u00e9quence peut \u00eatre un tableau ou une chaine de caract\u00e8res. [Exemple :]{.ul} tableau = [3, 1, 4, 15, 9, 2] sequence = \\\"aujourd'hui, maman est morte\\\" [Rappel :]{.ul} On acc\u00e8de \u00e0 la taille d'un tableau ou d'une chaine de caract\u00e8res avec l'instruction len( ......... ) . --- \u00c0 faire vous-m\u00eame 37 --- Tester le programme suivant. varString = \\\"un chaton\\\" for element in varString : print(element) [Question :]{.ul} Qu'affiche le programme ci-dessus ? Un compteur peut \u00e9galement \u00eatre utilis\u00e9 pour acc\u00e9der aux \u00e9l\u00e9ments de notre chaine de caract\u00e8res : --- \u00c0 faire vous-m\u00eame 38 --- Testez le programme suivant et r\u00e9pondez aux questions ci-dessous. varString = \\\"un chaton\\\" longueurString = len(varString) for i in range( longueurString ) : element = varString[i] print('Le ', i, '\u00e8me element est: ', element) Que fait la 2\u00e8me ligne ? __________________________________________ Que signifie range( longueurString ) ? _______________________________ Sur la 4\u00e8me ligne, identifiez la syntaxe permettant d'obtenir le i-\u00e8me \u00e9l\u00e9ment : ________________________________ [Remarques importantes :]{.ul} le nom de la variable de boucle est compl\u00e8tement arbitraire ! Dans un cas, elle s'appelle element , dans l'autre i , mais on aurait aussi pu l'appeler totoDansLaCuisine (mais c'est plus long \u00e0 \u00e9crire...). on peut mettre des boucles dans des boucles. Toutefois les variables de boucles doivent \u00eatre diff\u00e9rentes les unes des autres. --- \u00c0 faire vous-m\u00eame 39 --- Testez le programme suivant et comprenez son fonctionnement. for i in range(5,0,-1) : for j in range(0,5,1) : print(i, j) Checkpoint 1) [Table de multiplication]{.ul} \u00c9crire un programme permettant d'afficher une table de multiplication. Ce programme devra prendre comme variable d'entr\u00e9e la table d\u00e9sir\u00e9e. Par exemple si l'on donne le nombre 3 au programme, la fonction devra permettre d'afficher : 1 x 3 = 3 2 x 3 = 6 ... ... 10 x 3 = 30 2) [Constante de Champernowne]{.ul} On appelle constante de Champernowne le nombre 0.123456789101112131415161718192021... c'est \u00e0 dire le nombre o\u00f9 on \u00e9crit tous les nombres \u00e0 la suite les uns des autres. a) \u00c9crire un programme qui prend n en entr\u00e9e et affiche la constante de Champernowne jusqu'au nombre n inclus.\\ \\ Par exemple si n=3, il faut afficher 0.123. b) Allez sur Wikip\u00e9dia et apprenez-en un peu sur les nombres normaux. Vous pouvez aussi regarder sur Youtube : All the Numbers - Numberphile <!-- -- 4) [Division enfantine]{.ul} \\ \u00c9crire un programme permettant de faire des divisions euclidiennes comme un enfant de 7 ans.\\ L'utilisateur entre un dividende et un diviseur, puis le programme soustrait n fois le diviseur du dividende. On trouve alors le quotient et le reste que l'on affiche \u00e0 l'\u00e9cran. [Exemple]{.ul} : dividende 13 et diviseur 6. 13 - 6 = 7 7 - 6 = 1 On a soustrait 6 deux fois donc, quotient = 2 et il reste 1 donc reste = 1. 5) [Recherche d'un maximum]{.ul} \\ Dans le Chapitre 1, nous avons travaill\u00e9 sur l'algorithme de recherche d'un maximum dans une liste de nombres.\\ \\ Traduisez cet algorithme en un programme Python donnant le maximum d'une liste de nombres. Vous \u00e9crirez directement cette liste dans le programme. 6) [Nombre premier]{.ul} \\ Un nombre premier est un nombre qui a exactement 2 diviseurs qui sont 1 et lui m\u00eame. Le but de cet exercice est de cr\u00e9er un algorithme qui dit \u00e0 un utilisateur si un nombre est premier ou pas.\\ \\ Etant donn\u00e9e la d\u00e9finition, pour savoir si un nombre n est premier ou pas, on va tout simplement tester s'il est divisible par un des nombres compris entre 2 et n-1. D\u00e8s qu'on trouve un diviseur, on affiche \\\"PAS PREMIER\\\" sinon on affiche \\\"PREMIER\\\".\\ L'utilisateur doit rentrer au clavier le nombre \u00e0 tester. 7) [Mastermind]{.ul} \\ On reprend le programme #35. \u00c0 pr\u00e9sent, l'utilisateur doit trouver un nombre entier al\u00e9atoire entre 0 et 100 avec utilisant le moins de coup possible.\\ \\ Pour g\u00e9n\u00e9rer un nombre al\u00e9atoire en Python, on met sur la premi\u00e8re ligne de notre code : from random import * . Cela importe la biblioth\u00e8que random .\\ Puis, on g\u00e9n\u00e8re un nombre al\u00e9atoire avec : nbrAlea = randint(0,100) .\\ \\ [Exemple]{.ul} :\\ Le programme dit : \\\"Donne un nombre\\\" --- L'utilisateur entre : 12\\ Le programme r\u00e9pond : \\\"Non, c'est plus petit\\\".\\ Le programme dit : \\\"Donne un nombre\\\" --- L'utilisateur entre : 8\\ Le programme r\u00e9pond : \\\"Non, c'est plus grand\\\".\\ Le programme dit : \\\"Donne un nombre\\\" --- L'utilisateur entre : 9\\ Le programme r\u00e9pond : \\\"Bravo, 9 est le nombre recherch\u00e9 ! Tu as gagn\u00e9 en 3 essais !\\\" 8) [D\u00e9fi]{.ul} \\ R\u00e9\u00e9crire le code #31 en moins de 10 lignes (je l'ai fait avec 98 caract\u00e8res espaces compris et 7 lignes...) Fonctions <!-- -- 1) Le principe DRY Tous les langages informatiques sont fond\u00e9s sur une comme une oeuvre d'art ou un po\u00e8me. Comme je descendais des Fleuves impassibles, Je ne me sentis plus guid\u00e9 par les haleurs : Des Peaux-Rouges criards les avaient pris pour cibles, Les ayant clou\u00e9s nus aux poteaux de couleurs. J'\u00e9tais insoucieux de tous les \u00e9quipages, Porteur de bl\u00e9s flamands ou de cotons anglais. Quand avec mes haleurs ont fini ces tapages, Les Fleuves m'ont laiss\u00e9 descendre o\u00f9 je voulais. Id\u00e9e de beaut\u00e9 du code. Tous les langages se fondent sur la m\u00eame philosophie : DRY (Don't Repeat Yourself). 12) Introduction aux fonctions Jusqu'\u00e0 maintenant, un programme se composait de lignes que l'on lisait les unes \u00e0 la suite des autres. Cette approche (ou paradigme) peut poser des probl\u00e8mes techniques. --- \u00c0 faire vous-m\u00eame 40 --- Le jour du Black Friday, une personne ach\u00e8te : - 25 livres \u00e0 12\u20ac hors taxe (TVA est de 5,5%) ; - 2 \u00e9crans LCD \u00e0 540\u20ac hors taxe (TVA est de 20%) ; - 1 smartphone \u00e0 700\u20ac hors taxe (TVA est de 10%). \u00c9crire un programme permettant de savoir combien cette personne a d\u00e9pens\u00e9 TTC. On rappelle que le \\\"Prix TTC = Prix HT + Part TVA\\\". [Que se passerait-il si vous deviez rajouter une autre donn\u00e9e \u00e0 un taux de TVA de 15% ? puis une autre de 20% ?]{.ul} [Conclusion :]{.ul} Pour \u00e9viter la r\u00e9p\u00e9tition d'une instruction et structurer votre code informatique, on peut utiliser un objet appel\u00e9 fonction. Les fonctions permettent de d\u00e9composer un programme complexe en une s\u00e9rie de sous-programmes plus simples. En ce sens, les fonctions sont r\u00e9utilisables : si nous disposons d'une fonction capable de calculer un prix TTC \u00e0 partir d'un prix hors taxe et d'un taux de TVA , nous pouvons l'utiliser partout dans notre programme sans avoir \u00e0 faire des copier/coller. Les fonctions informatiques sont donc comparables \u00e0 la notion de fonctions math\u00e9matiques. 13) Fonctions [D\u00e9finition]{.ul} : Le prototype (d\u00e9finition) d'une fonction est constitu\u00e9 : d'un nom ; d'une liste de param\u00e8tres ; de l'ensemble des instructions \u00e0 r\u00e9aliser. Le prototype d'une fonction s'\u00e9crit : def nom(param1: type1, param2: type2 ... ) -\\typeSortie : instructions return y def permet de d\u00e9finir une fonction ; return y permet de renvoyer la valeur de la variable y ; param1, param2 ... sont les param\u00e8tres d'entr\u00e9es ; type1, type2 ... sont les types des param\u00e8tres d'entr\u00e9es ; typeSortie est le type de la variable de sortie. --- \u00c0 faire vous-m\u00eame 41 --- Dans l'\u00e9diteur de texte, entrez : def maFonction(x: int) -\\int: y = 3 * x + 2 return y On r\u00e9cup\u00e8re le r\u00e9sultat de cette fonction pour x=4 en ajoutant : solution = maFonction(4) Affichez les r\u00e9sultats de cette fonction pour x=1, x=10, x=100. [Rem :]{.ul} Quelle fonction math\u00e9matique est cod\u00e9e ci-dessus ? --- \u00c0 faire vous-m\u00eame 42 --- On d\u00e9finit la fonction \\(f(x) = 2x - 5\\) . En modifiant la fonction pr\u00e9c\u00e9dente et gr\u00e2ce \u00e0 une boucle, faites la somme des f(x) pour x allant de 0 \u00e0 121. --- \u00c0 faire vous-m\u00eame 43 --- Codez en Python la fonction maFonction2 de formule y = ( \\(x^{2}\\) + x) % 10. x et y seront des entiers. Affichez les valeurs de cette fonction pour x = 1, 3, 40 et 145. Une fonction peut prendre plusieurs param\u00e8tres en entr\u00e9e. --- \u00c0 faire vous-m\u00eame 44 --- \u00c9crivez dans l'\u00e9diteur de texte : def nouvelleFonction(x: float, a: int, b: int) -\\float : y = a * x + b return y Quel r\u00e9sultat renvoie cette fonction si x=4, a=-2 et b=8 ? ______________ Quel r\u00e9sultat renvoie cette fonction si x=-4, a=2 et b=-8 ? ______________ --- \u00c0 faire vous-m\u00eame 45 --- \u00c9crivez une fonction qui permette de r\u00e9pondre plus facilement \u00e0 l'encadr\u00e9 #40. Les deux param\u00e8tres d'entr\u00e9e seront le prix HT et le taux de TVA. 14) Jeux de tests : pr\u00e9-condition, post-condition --- \u00c0 faire vous-m\u00eame 46 --- Codez en Python la fonction maFonction2 de formule y = \\(\\sqrt{x}\\) + x % 10. x et y seront des entiers. Affichez les valeurs de cette fonction pour x = 1, 4,121 et 145. [Rem :]{.ul} Que remarquez-vous pour 145 ? Les types sont-ils respect\u00e9s ? Pour respecter les types demand\u00e9s et/ou effectuer des tests sur des fonctions, Python fournit une instruction appel\u00e9e : assert . assert permet de v\u00e9rifier si une condition est v\u00e9rifi\u00e9e : --- \u00c0 faire vous-m\u00eame 47 --- Dans la console, entrez x=2 . Que se passe-t-il si vous entrez assert(x \\1) ? _________________________ Que se passe-t-il si vous entrez assert(x \\3) ? _________________________ --- \u00c0 faire vous-m\u00eame 47 --- Dans le programme 46, apr\u00e8s la d\u00e9finition de la fonction, ajoutez la ligne suivante : assert ( int(sqrt(x)) == sqrt(x) ). Affichez \u00e0 nouveau les valeurs de cette fonction pour x = 1, 4,121 et 145. [Rem :]{.ul} Que remarquez-vous pour 145 ? Les types d'entr\u00e9e sont-ils respect\u00e9s ? [D\u00e9finition]{.ul} : le test que nous venons d'effectuer s'appelle une pr\u00e9-condition. 15) Proc\u00e9dures, fonctions particuli\u00e8res [Rem 1 :]{.ul} Les param\u00e8tres ne sont pas obligatoires. --- \u00c0 faire vous-m\u00eame 48 --- Testez la fonction suivante : def ma_fon() -\\str: return \\\"voici une fonction qui ne sert \u00e0 rien\\\" [Rem 2 :]{.ul} Une fonction ne renvoie pas forc\u00e9ment de valeur (le mot cl\u00e9 return n'est pas obligatoire). Elle peut par exemple afficher une cha\u00eene de caract\u00e8res \u00e0 l'aide d'un \\\"print\\\". Dans certains langages, on utilise les termes m\u00e9thode ou proc\u00e9dure pour qualifier une fonction \\\"qui ne renvoie rien\\\". --- \u00c0 faire vous-m\u00eame 49 --- Testez la fonction suivante : def ditBonjour(nom : str, age: str): phrase = \\\"Bonjour\\\", nom, \\\"vous avez\\\", age, \\\"ans.\\\" print(phrase) Checkpoint 1) [Autour des chaines de caract\u00e8res]{.ul} <!-- -- a. \u00c9crire une fonction \u00ab singleton \u00bb qui prend un string en param\u00e8tre et renvoie \u00ab vrai \u00bb si la liste est \u00e9gale \u00e0 [0]. b. \u00c9crire une fonction \u00ab m\u00eame longueur \u00bb qui prend deux strings en param\u00e8tres (= arguments ) et renvoie vrai si les listes sont de m\u00eame longueur. c. \u00c9crire une fonction \u00ab appartient \u00bb qui prend en entr\u00e9e un string et une lettre et renvoie \u00ab vrai \u00bb si l'\u00e9l\u00e9ment appartient \u00e0 la liste. d. Cr\u00e9er une fonction \u00ab pluriel \u00bb qui rajoute un s au string donn\u00e9 en entr\u00e9e s'il ne se termine pas d\u00e9j\u00e0 par s. <!-- -- 2) [Calcul de pi !]{.ul} <!-- -- a. \u00c9crire une fonction \u00ab factorielle \u00bb qui prend un nombre n en param\u00e8tre et renvoie la valeur de n! . On rappelle que \\(n! = n \\times (n - 1) \\times ... \\times 3 \\times 2 \\times 1\\) . <!-- -- e. \u00c9crire une fonction \u00ab piApprox \u00bb qui prend un nombre n en param\u00e8tre et renvoie la valeur approch\u00e9e de \\(\\pi\\) selon la formule :\\ \\(\\pi \\approx \\left( 2 + 2^{2} \\times \\frac{(1!)^{2}}{3!} + 2^{3} \\times \\frac{(2!)^{2}}{5!} + ... + 2^{n + 1} \\times \\frac{(n!)^{2}}{(2n + 1)!} \\right)\\) \\ On fera varier la valeur de n pour augmenter la pr\u00e9cision. f. Cr\u00e9er une fonction \u00ab checkPi \u00bb qui prend pour argument un nombre flottant eps et qui renvoie la valeur de n telle que la valeur absolue de piApprox moins pi sous inf\u00e9rieure \u00e0 eps .\\ [Aide :]{.ul} check(1e-2) doit vous renvoyer 7. <!-- -- 3) [D\u00e9cryptage]{.ul} <!-- -- a. \u00c9crire une fonction \u00ab uneLettre \u00bb qui prend en param\u00e8tres un message (type string) et une lettre (type string) et qui renvoie le nombre d'apparitions de cette lettre dans ce message.\\ Par exemple : uneLettre('ah lala','a') renvoie 3. <!-- -- g. \u00c9crire une fonction \u00ab histogramme \u00bb qui prend en param\u00e8tre un message (type string) et qui affiche \u00e0 l'\u00e9cran le nombre d'apparitions de toutes les lettres de l'alphabet.\\ Pour g\u00e9n\u00e9rer l'alphabet, on pourra utiliser :\\ from string import *\\ alphabet = ascii_lowercase \\ \\ Par exemple : \\\"ababcdaa\\\" affiche :\\ a : 4\\ b : 2\\ c : 1\\ d : 1 <!-- -- 4) [Probl\u00e8me]{.ul} Une soci\u00e9t\u00e9 de location de voitures propose \u00e0 ses clients deux contrats : Contrat 1 : un forfait de 50\u20ac puis 0,40\u20ac par km parcouru. Contrat 2 : 0,80\u20ac par km parcouru. a. \u00c9crire deux fonctions prix1(x) et prix2(x) qui renvoient le prix pay\u00e9 avec chaque contrat pour x kilom\u00e8tres parcourus. b. En utilisant les fonctions pr\u00e9c\u00e9dentes, \u00e9crire une fonction plusAvantageux(x) qui renvoie le num\u00e9ro du contrat le plus avantageux. <!-- -- 3) [Nombres de Kaprekar]{.ul} Un nombre de Kaprekar est un nombre dont l'\u00e9criture d\u00e9cimale du carr\u00e9 de ce nombre peut \u00eatre s\u00e9par\u00e9e en deux nombres (pas forc\u00e9ment de m\u00eame taille) dont la somme vaut le nombre initial. [Exemples :]{.ul} 9 est un nombre de Kaprekar car 9\u00b2=81 et on peut s\u00e9parer 81 en 8 et 1 dont la somme 8+1 = 9. 45 est un nombre de Kaprekar car 45\u00b2=2025 et on peut s\u00e9parer 2025 en 20+25=45. 12 n'est pas un nombre de Kaprekar car 12\u00b2=144 et on ne peut pas couper ce nombre pour trouver 12 (1+44=45, 14+4=18). 4 879 est un nombre de Kaprekar car 4879\u00b2 = 23804641 et 238 + 04 641 = 4 879. Cr\u00e9er un programme qui renvoie si un nombre entier n est de Kaprekar ou pas.","title":"Algorithmes gloutons"},{"location":"algorithme5/#algorithmes-gloutons","text":"","title":"Algorithmes gloutons"},{"location":"algorithme5/#principe","text":"En progammation, un principe important est le principe DRY . Cet acronyme signifie D on't R epeat Y ourself.","title":"Principe"},{"location":"algorithme5/#terminal-console-et-editeur-de-code","text":"pointsDeMana = 6.5 et persoVivant = True Affichez les types de ces variables dans le terminal \u00e0 l'aide de l'instruction print (......). [Remarque :]{.ul} On utilise la notation anglo-saxonne avec . pour la virgule, et e pour \\\"10 puissance\\\". Par exemple : 1.5e4 = 15000 --- \u00c0 faire vous-m\u00eame 10 --- Dans votre programme, \u00e0 partir de la variable ageJoueur et des op\u00e9rations de transtypage, cr\u00e9ez les variables suivantes : Il y a 3 minuttes ageJoueurEntier, ageJoueurReel, ageJoueurBool, ageJoueurList, ageJoueurTuple qui seront de type entier, flottant, bool\u00e9en, liste et tuple. Affichez ces variables dans le terminal et \u00e9tudiez les diff\u00e9rences entre ces \u00e9critures. Un peu de math\u00e9matiques ! 1) Op\u00e9rations natives en Python Python poss\u00e8de des symboles permettant de faire des op\u00e9rations arithm\u00e9tiques. Il est possible d'effectuer des op\u00e9rations avec des nombres , mais aussi avec des variables . Les signes utilis\u00e9s sont classiques : +, - . --- \u00c0 faire vous-m\u00eame 11 --- Dans le terminal Python, en faisant de nombreux tests, d\u00e9couvrez la signification des symboles *, / , // , % et **. --- \u00c0 faire vous-m\u00eame 12 --- Cr\u00e9er un nouveau fichier appel\u00e9 addition.py. \u00c9crire un programme qui additionnera le contenu de 2 variables nomm\u00e9es a et b . Le r\u00e9sultat de cette op\u00e9ration devra \u00eatre r\u00e9f\u00e9renc\u00e9 par une troisi\u00e8me variable nomm\u00e9e resultat (attention, pas d'accent dans les noms de variable). Testez votre programme en utilisant la console pour v\u00e9rifier la valeur r\u00e9f\u00e9renc\u00e9e par la variable resultat . --- \u00c0 faire vous-m\u00eame 13 --- Cr\u00e9er un nouveau fichier appel\u00e9 conversionAge.py. Ecrire un programme qui demande votre \u00e2ge en ann\u00e9e et le convertit en nombre de jours. 5) Biblioth\u00e8que math Il est possible d'effectuer des calculs complexes en utilisant des racines carr\u00e9es, des fonctions trigonom\u00e9trique des logarithmes,... Pour utiliser ces instructions \\\"\u00e9l\u00e9mentaires\\\", il est n\u00e9cessaire d'ajouter une ligne au d\u00e9but de votre programme : import math Cette ligne permet d'importer (et donc d'utiliser) la biblioth\u00e8que \\\"math\\\" qui contient toutes les fonctions math\u00e9matiques \\\"classiques\\\". Voici quelques exemples : math.pow(x,a) permet de calculer x \u00e0 la puissance a ; math.cos(x) permet de calculer le cosinus de l'angle x (l'angle x doit \u00eatre en radian) ; math.sqrt(x) permet de calculer la racine carr\u00e9e de x. Si vous avez besoin d'autres fonctions math\u00e9matiques, je vous invite \u00e0 consulter la documentation de Python : <https://docs.python.org/3/library/math.html --- \u00c0 faire vous-m\u00eame 14 --- En calculant \u00e0 la main, d\u00e9terminez les valeurs r\u00e9f\u00e9renc\u00e9es par les variables d, e, f, g, h et i apr\u00e8s l'ex\u00e9cution du programme suivant : import math a = 5 b = 16 c = 3.14 / 2 d = b / a e = b // a f = b % a g = math.pow(a,2) h = math.sqrt(b) i = math.sin(c) V\u00e9rifiez vos r\u00e9ponses \u00e0 l'aide du terminal. --- \u00c0 faire vous-m\u00eame 15 --- \u00c9crire un programme permettant de r\u00e9pondre \u00e0 la question suivante : \\\"Quel est le type du r\u00e9sultat d'une addition d'un integer et d'un float ?\\\" [Remarque :]{.ul} Il est donc tout \u00e0 fait possible de \\\"m\u00e9langer\\\" des nombres entiers et des nombres \u00e0 virgules (\\\"3.14 / 2\\\") dans une op\u00e9ration. Attention aux float : dans le terminal essayez de faire 0.1+0.1 puis 0.1+0.1+0.1\\ Qu'en pensez-vous ? Chaine de caract\u00e8res : vive les strings. 1) Chaines de caract\u00e8res Les chaines de caract\u00e8res sont des listes de caract\u00e8res : \\\"le chat\\\" est constitu\u00e9 des caract\u00e8res 'l', 'e', ' ', 'c', 'h', 'a', 't' . On peut connaitre la longueur d'une chaine de caract\u00e8res gr\u00e2ce \u00e0 : len(string) --- \u00c0 faire vous-m\u00eame 16 --- Cr\u00e9er un nouveau fichier strings.py : maChaine = \\\"Bonjour le monde !\\\" V\u00e9rifiez que la variable maChaine est une chaine de caract\u00e8res contenant la phrase \\\"Bonjour le monde !\\\" 6) Concat\u00e9nation : le signe + L'utilisation du signe + ne se limite pas \u00e0 l'addition. Il est aussi utilis\u00e9 pour la concat\u00e9nation . Cherchez sur Wikip\u00e9dia l'\u00e9tymologie du mot. --- \u00c0 faire vous-m\u00eame 17 --- Quelle est la cha\u00eene de caract\u00e8re r\u00e9f\u00e9renc\u00e9e par la variable monExpression apr\u00e8s l'ex\u00e9cution du programme ci-dessous ? Validez votre r\u00e9ponse en testant ce programme dans strings.py. a = \\\"Hello\\\" b = \\\"World\\\" monExpression = a + b 7) Cha\u00eenes de caract\u00e8res et variables Il est aussi possible de concat\u00e9ner une cha\u00eene de caract\u00e8res et une ou plusieurs variables : --- \u00c0 faire vous-m\u00eame 18 --- Quelle est la valeur de res dans le programme ci-dessous ? Validez votre r\u00e9ponse en testant ce programme dans strings.py. myString1 = \\\"Bonjour \\\" myString2 = \\\"le \\\" res = myString1 + myString2 + \\\"monde!\\\" Les 2 variables myString1 et myString2 r\u00e9f\u00e9rencent 2 cha\u00eenes de caract\u00e8res, nous avons donc bien ici une concat\u00e9nation. Mais que se passe-t-il si la variable r\u00e9f\u00e9rence un nombre (entier ou flottant) ? --- \u00c0 faire vous-m\u00eame 19 --- Testez le code suivant dans strings.py: monNombre = 5 res = \\\"Nombre de personnes : \\\" + monNombre Que constatez-vous ? Pourquoi ? ________________________________________________________________ ________________________________________________________________ Python nous offre 2 solutions : l'utilisation de la m\u00e9thode \\\"str\\\" l'utilisation des \\\"fstring\\\" La m\u00e9thode \\\"str\\\" permet de transformer un nombre en cha\u00eene de caract\u00e8res. On appelle cela du transtypage . --- \u00c0 faire vous-m\u00eame 20 --- En utilisant la m\u00e9thode \\\"str\\\", corrigez le programme fait au #19. Les \\\"fstring\\\" (nouveaut\u00e9 de Python 3.6), permettent de r\u00e9soudre ce probl\u00e8me de combinaison variable-cha\u00eene de caract\u00e8res. --- \u00c0 faire vous-m\u00eame 21 --- Testez le code suivant dans strings.py : monAutreNombre = 10 res = f\\\"Nombre de personnes : {monAutreNombre}\\\" [Remarque :]{.ul} Notez la pr\u00e9sence du \\\"f\\\" juste avant le guillemet et des accolades qui encadrent le nom de la variable. Checkpoint 1) On dispose de la formule suivante pour convertir les degr\u00e9s Fahrenheit en degr\u00e9s Celsius : \\(C = \\frac{F - 32}{1,8}\\) , o\u00f9 F est une temp\u00e9rature en degr\u00e9s Fahrenheit et C la temp\u00e9rature correspondante en degr\u00e9s Celsius. a. Ecrire un programme qui convertit en degr\u00e9s Celsius une temp\u00e9rature rentr\u00e9e au clavier en degr\u00e9s Fahrenheit. b. M\u00eame question pour la conversion inverse. 2) \u00c9crire un programme qui permute et affiche les valeurs de trois variables a , b , c qui sont entr\u00e9es au clavier : a ==*b , b ==*c , c ==*a*. 3) Ecrire un programme qui teste si une chaine de caract\u00e8re est un palindrome.\\ Exemple de palindrome :\\ 'kayak' ou 'Engage le jeu que je le gagne' Structures de contr\u00f4le <!-- -- 1) Bool\u00e9ens Si quelqu'un vous dit que \\\"4 est \u00e9gal \u00e0 4\\\", vous lui r\u00e9pondez : \\\"ben c'est vrai\\\". Si maintenant la m\u00eame personne vous dit que \\\"7 est \u00e9gal \u00e0 12\\\", vous lui r\u00e9pondrez bien \u00e9videmment que \\\"c'est faux !\\\". Comme en langage naturel, en Python, ces deux affirmations se noterons avec un double signe \u00e9gal : par exemple, 7 == 12. --- \u00c0 faire vous-m\u00eame 22 --- Dans le terminal, tapez : 7 == 12 5 = 4 5 \\<= 5 5 != 5 5 \\12 En Python, \\\" 5 = 5 \\\" est appel\u00e9 une expression. Une expression est soit vraie (True), soit fausse (False). Dans le dernier TP, nous avons surtout travaill\u00e9 sur les entiers, les nombres flottants et les cha\u00eenes de caract\u00e8res. Ici, nous abordons les bool\u00e9ens . [Rappel :]{.ul} Un bool\u00e9en est un type de donn\u00e9es qui ne peut prendre que deux valeurs : vrai (True) ou faux (False). --- \u00c0 faire vous-m\u00eame 23 --- Dans l'\u00e9diteur de texte, entrez les valeurs a = 4 et b = 7. Quel est le r\u00e9sultat attendu apr\u00e8s l'ex\u00e9cution de ce programme si vous saisissez dans la console \\\"a == b\\\" ? si vous saisissez \\\"a != b\\\" Ajoutez la signification de ces op\u00e9rateurs sur le formulaire. On peut connecter des expressions bool\u00e9ennes les unes aux autres \u00e0 l'aide des op\u00e9rateurs logiques and (et), or (ou) ou not (non). Nous verrons leur fonctionnement exact dans un prochain chapitre. Pour l'instant, nous allons remplir les tables de v\u00e9rit\u00e9s page suivante \u00e0 l'aide de tests Python : --- \u00c0 faire vous-m\u00eame 24 --- Dans l'\u00e9diteur de texte, entrez les expressions : expr1 = (4 \\< 10) et expr2 = (12 != 10) Puis, sur une m\u00eame ligne, afficher ensuite les valeurs de : expr1 , expr2 , expr1 or expr2 . Refaites d'autres tests afin de remplir les trois tables de v\u00e9rit\u00e9 ci-dessous. [Table de v\u00e9rit\u00e9 pour le \\\"ou\\\"]{.ul} [Table de v\u00e9rit\u00e9 pour le \\\"et\\\"]{.ul} [Table de v\u00e9rit\u00e9 pour le \\\"non\\\"]{.ul} [Rem :]{.ul} il est facile de faire n'importe quoi avec des enchainements d'expressions bool\u00e9ennes. Conservez des expressions simples. --- \u00c0 faire vous-m\u00eame 25 --- En testant le programme suivant, trouvez la valeur de c en fonction des valeurs de a et de b. Bonne chance ! a = int( input(\\\"Donnez un nombre\\\") ) b = (a \\50) print( \\\"b vaut\\\", b, \\\", et est de type \\\", type(b) ) c = ( a == 3 or not(b) or not(a != 25) ) [Remarque importante :]{.ul} Flottants et bool\u00e9ens ne font pas bon m\u00e9nage ! Les flottants ne sont qu'une repr\u00e9sentation d\u00e9cimale des r\u00e9els. --- \u00c0 faire vous-m\u00eame 26 --- Dans le terminal, trouvez les valeurs des expressions bool\u00e9ennes suivantes : A = (3 * 0.1 == 0.3) A est _________________ B = (abs(3 * 0.1 - 0.3) \\< 1e-5) B est _________________ n = 1e15 C1 = (1 + 1 / n == 1) C1 est _________________ n = 1e16 C2 = (1 + 1 / n == 1) C2 est _________________ D = (1 / n == 0) D est _________________ [Conclusion :]{.ul} Pour comparer deux flottants, on v\u00e9rifie s'ils sont assez proches comme dans l'expression B. 8) Conditionnelle \\\"Si ... Alors ...\\\" Dans le chapitre 2, nous avons abord\u00e9 la structure de controle \\\"Si ... Alors ... Sinon\\\". En Python, cette structure appel\u00e9e conditionnelle s'\u00e9crit : if expressionBool\u00e9enne : blocInstructionA else : blocInstructionB Si l'expression est vraie, alors on fait le bloc d'instructions A. Sinon, on fait le bloc d'instructions B. --- \u00c0 faire vous-m\u00eame 27 --- Dans l'\u00e9diteur de texte, entrez le programme suivant : v = float(input('Vitesse du vent (en noeuds)?')) if v = 20 : meteo = 'Sortie en mer annul\u00e9e' else: meteo = 'Sortie en mer maintenue' print( meteo ) --- \u00c0 faire vous-m\u00eame 28 --- \u00c9crire un programme qui prend en entr\u00e9e un age. Si age est sup\u00e9rieur ou \u00e9gal \u00e0 18 ans, la fonction devra renvoyer la cha\u00eene de caract\u00e8res \\\"Bonjour, vous \u00eates majeur.\\\". Si age est inf\u00e9rieur \u00e0 18 ans, la fonction devra renvoyer \\\"Bonjour, tu es mineur.\\\" --- \u00c0 faire vous-m\u00eame 29 --- Dans l'\u00e9diteur de texte, modifiez le programme #27 pour obtenir : v = float(input('Vitesse du vent (en noeuds)?')) h = float(input('Houle (en m)?')) varBooleen = (v = 20 or h = 5) if varBooleen == True : meteo = 'Sortie en mer annul\u00e9e' else: meteo = 'Sortie en mer maintenue' print( meteo ) [Remarque :]{.ul} Dans le programme pr\u00e9c\u00e9dent, a-t-on besoin de sp\u00e9cifier == True ? Pourquoi ? Pour r\u00e9pondre, essayez de l'enlever dans le programme #29. --- \u00c0 faire vous-m\u00eame 30 --- Quel est le r\u00e9sultat attendu apr\u00e8s l'ex\u00e9cution de ce programme ? Est-il possible d'obtenir tous les messages? V\u00e9rifiez votre r\u00e9ponse en testant ce programme (faire varier a et b) a = 5 b = 10 if a \\5 and b == 10: varAffiche = \\\"Toto\\\" else: varAffiche = \\\"Titi\\\" if a \\5 or b == 10: varAffiche = \\\"Tata\\\" else: varAffiche = \\\"Tutu\\\" print( varAffiche ) [Rem]{.ul} : Attention aux bool\u00e9ens et aux variables opaques... 9) Conditionnelle \\\"Si ... SinonSi ... Alors ...\\\" Dans le chapitre 2, nous avons \u00e9galement discut\u00e9 de la structure de controle \\\"Si ... SinonSi ... Sinon\\\". En Python , elle s'\u00e9crit : if expressionBool\u00e9enne1 : blocInstructionA1 elif expressionBool\u00e9enne2 : blocInstructionA2 else : blocInstructionB {width=\"3.371745406824147in\" height=\"3.2762379702537183in\"} --- \u00c0 faire vous-m\u00eame 31 --- Les tarif re\u0301duits pour l'entre\u0301e a\u0300 un muse\u0301e sont : gratuit pour les moins de 5 ans mi-tarif pour les moins de 16 ans mi-tarif pour les plus de 65 ans mi-tarif pour les e\u0301tudiants. \u00c0 l'aide des instructions elif, programmez\\ l'algorithme ci-contre afin d'afficher quel\\ est le prix que doit payer un visiteur. Les deux\\ variables que l'utilisateur devra entrer au\\ clavier sont : age et statut. Tarif sera \u00e9gal \u00e0 10. --- \u00c0 faire vous-m\u00eame 32 --- On prend a = 10 : testez les trois codes ci-dessous. if a \\< 5: print(a, \\\"\\< 5\\\") if a \\2: print(a, \\\"\\2\\\") if a \\4: print(a, \\\"\\4\\\") if a \\< 5 : print(a, \\\"\\< 5\\\") elif a \\2: print(a, \\\"\\2\\\") elif a \\4: print(a, \\\"\\4\\\") if a \\< 5 : print(a, \\\"\\< 5\\\") elif a \\4: print(a, \\\"\\4\\\") elif a \\2: print(a, \\\"\\2\\\") Que pouvez-vous d\u00e9duire du test #32 ? 10) Boucle non born\u00e9e Comme nous l'avons vu dans le Chapitre 2, la boucle est fondamentale en informatique. On r\u00e9alise une boucle [non born\u00e9e]{.ul} gr\u00e2ce \u00e0 l'instruction : while expressionBool\u00e9enne : blocInstructions Le bloc d'instructions continuera tant que l'expression bool\u00e9enne est vraie. --- \u00c0 faire vous-m\u00eame 33 --- Dans l'\u00e9diteur de texte, \u00e9crire le programme suivant : i = 0 while i \\< 10: print(\\\"i vaut : \\\", i ) i = i + 1 print(\\\"C'est enfin termin\u00e9.\\\") Quel est le r\u00e9sultat attendu apr\u00e8s l'ex\u00e9cution de ce programme ? V\u00e9rifiez votre r\u00e9ponse en testant le programme [Rem]{.ul} : Dans ce programme, i s'appelle le compteur. --- \u00c0 faire vous-m\u00eame 34 --- \u00c9crire un programme permettant de cr\u00e9er \\\"un g\u00e9n\u00e9rateur automatique de punition\\\" . Il y aura deux valeurs d'entr\u00e9e : une cha\u00eene de caract\u00e8re et un nombre entier Exemple : Si l'utilisateur entre : \\\" Je ne dois pas discuter en classe \\\" et 3 Le programme devra permettre d'afficher : Je ne dois pas discuter en classe Je ne dois pas discuter en classe Je ne dois pas discuter en classe --- \u00c0 faire vous-m\u00eame 35 --- \u00c9crire un programme de jeu dont le but est de trouver le nombre 42 par essais successifs. Tant que le nombre 42 n'a pas \u00e9t\u00e9 trouv\u00e9, l'utilisateur doit entrer de nouveaux nombres. Exemple : Le programme dit : \\\"Donne un nombre\\\" --- l'utilisateur entre : 12 Le programme dit : \\\"Donne un nombre\\\" --- l'utilisateur entre : 25 Le programme dit : \\\"Donne un nombre\\\" --- l'utilisateur entre : 42 Le programme dit : \\\"Bravo! C'est gagn\u00e9 !\\\" 11) Boucle born\u00e9e On r\u00e9alise une boucle [born\u00e9e]{.ul} gr\u00e2ce \u00e0 l'instruction : for element in sequence : blocInstructions Contrairement aux boucles non born\u00e9es, la borne born\u00e9e permet de parcourir les \u00e9l\u00e9ments d'une s\u00e9quence de [longueur connue]{.ul} . --- \u00c0 faire vous-m\u00eame 36 --- Tester le programme suivant. Que fait-il ?\\ En changeant les valeurs de 0 et 8, \u00e9tudier le fonctionnement de l'instruction range. for element in range(0, 8, 1): print(element, element**2, element**3) [Remarque :]{.ul} L'instruction range(0, 8, 1) permet de g\u00e9n\u00e9rer tous les nombres successivement entre ____________________________________ . M\u00eame si ce n'est pas compl\u00e8tement exact, on peut dire que range(0, n) est \u00e9quivalent \u00e0 un tableau T avec T = [0, 1, 2, ......... , n-1] . [D\u00e9finition :]{.ul} Une s\u00e9quence peut \u00eatre un tableau ou une chaine de caract\u00e8res. [Exemple :]{.ul} tableau = [3, 1, 4, 15, 9, 2] sequence = \\\"aujourd'hui, maman est morte\\\" [Rappel :]{.ul} On acc\u00e8de \u00e0 la taille d'un tableau ou d'une chaine de caract\u00e8res avec l'instruction len( ......... ) . --- \u00c0 faire vous-m\u00eame 37 --- Tester le programme suivant. varString = \\\"un chaton\\\" for element in varString : print(element) [Question :]{.ul} Qu'affiche le programme ci-dessus ? Un compteur peut \u00e9galement \u00eatre utilis\u00e9 pour acc\u00e9der aux \u00e9l\u00e9ments de notre chaine de caract\u00e8res : --- \u00c0 faire vous-m\u00eame 38 --- Testez le programme suivant et r\u00e9pondez aux questions ci-dessous. varString = \\\"un chaton\\\" longueurString = len(varString) for i in range( longueurString ) : element = varString[i] print('Le ', i, '\u00e8me element est: ', element) Que fait la 2\u00e8me ligne ? __________________________________________ Que signifie range( longueurString ) ? _______________________________ Sur la 4\u00e8me ligne, identifiez la syntaxe permettant d'obtenir le i-\u00e8me \u00e9l\u00e9ment : ________________________________ [Remarques importantes :]{.ul} le nom de la variable de boucle est compl\u00e8tement arbitraire ! Dans un cas, elle s'appelle element , dans l'autre i , mais on aurait aussi pu l'appeler totoDansLaCuisine (mais c'est plus long \u00e0 \u00e9crire...). on peut mettre des boucles dans des boucles. Toutefois les variables de boucles doivent \u00eatre diff\u00e9rentes les unes des autres. --- \u00c0 faire vous-m\u00eame 39 --- Testez le programme suivant et comprenez son fonctionnement. for i in range(5,0,-1) : for j in range(0,5,1) : print(i, j) Checkpoint 1) [Table de multiplication]{.ul} \u00c9crire un programme permettant d'afficher une table de multiplication. Ce programme devra prendre comme variable d'entr\u00e9e la table d\u00e9sir\u00e9e. Par exemple si l'on donne le nombre 3 au programme, la fonction devra permettre d'afficher : 1 x 3 = 3 2 x 3 = 6 ... ... 10 x 3 = 30 2) [Constante de Champernowne]{.ul} On appelle constante de Champernowne le nombre 0.123456789101112131415161718192021... c'est \u00e0 dire le nombre o\u00f9 on \u00e9crit tous les nombres \u00e0 la suite les uns des autres. a) \u00c9crire un programme qui prend n en entr\u00e9e et affiche la constante de Champernowne jusqu'au nombre n inclus.\\ \\ Par exemple si n=3, il faut afficher 0.123. b) Allez sur Wikip\u00e9dia et apprenez-en un peu sur les nombres normaux. Vous pouvez aussi regarder sur Youtube : All the Numbers - Numberphile <!-- -- 4) [Division enfantine]{.ul} \\ \u00c9crire un programme permettant de faire des divisions euclidiennes comme un enfant de 7 ans.\\ L'utilisateur entre un dividende et un diviseur, puis le programme soustrait n fois le diviseur du dividende. On trouve alors le quotient et le reste que l'on affiche \u00e0 l'\u00e9cran. [Exemple]{.ul} : dividende 13 et diviseur 6. 13 - 6 = 7 7 - 6 = 1 On a soustrait 6 deux fois donc, quotient = 2 et il reste 1 donc reste = 1. 5) [Recherche d'un maximum]{.ul} \\ Dans le Chapitre 1, nous avons travaill\u00e9 sur l'algorithme de recherche d'un maximum dans une liste de nombres.\\ \\ Traduisez cet algorithme en un programme Python donnant le maximum d'une liste de nombres. Vous \u00e9crirez directement cette liste dans le programme. 6) [Nombre premier]{.ul} \\ Un nombre premier est un nombre qui a exactement 2 diviseurs qui sont 1 et lui m\u00eame. Le but de cet exercice est de cr\u00e9er un algorithme qui dit \u00e0 un utilisateur si un nombre est premier ou pas.\\ \\ Etant donn\u00e9e la d\u00e9finition, pour savoir si un nombre n est premier ou pas, on va tout simplement tester s'il est divisible par un des nombres compris entre 2 et n-1. D\u00e8s qu'on trouve un diviseur, on affiche \\\"PAS PREMIER\\\" sinon on affiche \\\"PREMIER\\\".\\ L'utilisateur doit rentrer au clavier le nombre \u00e0 tester. 7) [Mastermind]{.ul} \\ On reprend le programme #35. \u00c0 pr\u00e9sent, l'utilisateur doit trouver un nombre entier al\u00e9atoire entre 0 et 100 avec utilisant le moins de coup possible.\\ \\ Pour g\u00e9n\u00e9rer un nombre al\u00e9atoire en Python, on met sur la premi\u00e8re ligne de notre code : from random import * . Cela importe la biblioth\u00e8que random .\\ Puis, on g\u00e9n\u00e8re un nombre al\u00e9atoire avec : nbrAlea = randint(0,100) .\\ \\ [Exemple]{.ul} :\\ Le programme dit : \\\"Donne un nombre\\\" --- L'utilisateur entre : 12\\ Le programme r\u00e9pond : \\\"Non, c'est plus petit\\\".\\ Le programme dit : \\\"Donne un nombre\\\" --- L'utilisateur entre : 8\\ Le programme r\u00e9pond : \\\"Non, c'est plus grand\\\".\\ Le programme dit : \\\"Donne un nombre\\\" --- L'utilisateur entre : 9\\ Le programme r\u00e9pond : \\\"Bravo, 9 est le nombre recherch\u00e9 ! Tu as gagn\u00e9 en 3 essais !\\\" 8) [D\u00e9fi]{.ul} \\ R\u00e9\u00e9crire le code #31 en moins de 10 lignes (je l'ai fait avec 98 caract\u00e8res espaces compris et 7 lignes...) Fonctions <!-- -- 1) Le principe DRY Tous les langages informatiques sont fond\u00e9s sur une comme une oeuvre d'art ou un po\u00e8me. Comme je descendais des Fleuves impassibles, Je ne me sentis plus guid\u00e9 par les haleurs : Des Peaux-Rouges criards les avaient pris pour cibles, Les ayant clou\u00e9s nus aux poteaux de couleurs. J'\u00e9tais insoucieux de tous les \u00e9quipages, Porteur de bl\u00e9s flamands ou de cotons anglais. Quand avec mes haleurs ont fini ces tapages, Les Fleuves m'ont laiss\u00e9 descendre o\u00f9 je voulais. Id\u00e9e de beaut\u00e9 du code. Tous les langages se fondent sur la m\u00eame philosophie : DRY (Don't Repeat Yourself). 12) Introduction aux fonctions Jusqu'\u00e0 maintenant, un programme se composait de lignes que l'on lisait les unes \u00e0 la suite des autres. Cette approche (ou paradigme) peut poser des probl\u00e8mes techniques. --- \u00c0 faire vous-m\u00eame 40 --- Le jour du Black Friday, une personne ach\u00e8te : - 25 livres \u00e0 12\u20ac hors taxe (TVA est de 5,5%) ; - 2 \u00e9crans LCD \u00e0 540\u20ac hors taxe (TVA est de 20%) ; - 1 smartphone \u00e0 700\u20ac hors taxe (TVA est de 10%). \u00c9crire un programme permettant de savoir combien cette personne a d\u00e9pens\u00e9 TTC. On rappelle que le \\\"Prix TTC = Prix HT + Part TVA\\\". [Que se passerait-il si vous deviez rajouter une autre donn\u00e9e \u00e0 un taux de TVA de 15% ? puis une autre de 20% ?]{.ul} [Conclusion :]{.ul} Pour \u00e9viter la r\u00e9p\u00e9tition d'une instruction et structurer votre code informatique, on peut utiliser un objet appel\u00e9 fonction. Les fonctions permettent de d\u00e9composer un programme complexe en une s\u00e9rie de sous-programmes plus simples. En ce sens, les fonctions sont r\u00e9utilisables : si nous disposons d'une fonction capable de calculer un prix TTC \u00e0 partir d'un prix hors taxe et d'un taux de TVA , nous pouvons l'utiliser partout dans notre programme sans avoir \u00e0 faire des copier/coller. Les fonctions informatiques sont donc comparables \u00e0 la notion de fonctions math\u00e9matiques. 13) Fonctions [D\u00e9finition]{.ul} : Le prototype (d\u00e9finition) d'une fonction est constitu\u00e9 : d'un nom ; d'une liste de param\u00e8tres ; de l'ensemble des instructions \u00e0 r\u00e9aliser. Le prototype d'une fonction s'\u00e9crit : def nom(param1: type1, param2: type2 ... ) -\\typeSortie : instructions return y def permet de d\u00e9finir une fonction ; return y permet de renvoyer la valeur de la variable y ; param1, param2 ... sont les param\u00e8tres d'entr\u00e9es ; type1, type2 ... sont les types des param\u00e8tres d'entr\u00e9es ; typeSortie est le type de la variable de sortie. --- \u00c0 faire vous-m\u00eame 41 --- Dans l'\u00e9diteur de texte, entrez : def maFonction(x: int) -\\int: y = 3 * x + 2 return y On r\u00e9cup\u00e8re le r\u00e9sultat de cette fonction pour x=4 en ajoutant : solution = maFonction(4) Affichez les r\u00e9sultats de cette fonction pour x=1, x=10, x=100. [Rem :]{.ul} Quelle fonction math\u00e9matique est cod\u00e9e ci-dessus ? --- \u00c0 faire vous-m\u00eame 42 --- On d\u00e9finit la fonction \\(f(x) = 2x - 5\\) . En modifiant la fonction pr\u00e9c\u00e9dente et gr\u00e2ce \u00e0 une boucle, faites la somme des f(x) pour x allant de 0 \u00e0 121. --- \u00c0 faire vous-m\u00eame 43 --- Codez en Python la fonction maFonction2 de formule y = ( \\(x^{2}\\) + x) % 10. x et y seront des entiers. Affichez les valeurs de cette fonction pour x = 1, 3, 40 et 145. Une fonction peut prendre plusieurs param\u00e8tres en entr\u00e9e. --- \u00c0 faire vous-m\u00eame 44 --- \u00c9crivez dans l'\u00e9diteur de texte : def nouvelleFonction(x: float, a: int, b: int) -\\float : y = a * x + b return y Quel r\u00e9sultat renvoie cette fonction si x=4, a=-2 et b=8 ? ______________ Quel r\u00e9sultat renvoie cette fonction si x=-4, a=2 et b=-8 ? ______________ --- \u00c0 faire vous-m\u00eame 45 --- \u00c9crivez une fonction qui permette de r\u00e9pondre plus facilement \u00e0 l'encadr\u00e9 #40. Les deux param\u00e8tres d'entr\u00e9e seront le prix HT et le taux de TVA. 14) Jeux de tests : pr\u00e9-condition, post-condition --- \u00c0 faire vous-m\u00eame 46 --- Codez en Python la fonction maFonction2 de formule y = \\(\\sqrt{x}\\) + x % 10. x et y seront des entiers. Affichez les valeurs de cette fonction pour x = 1, 4,121 et 145. [Rem :]{.ul} Que remarquez-vous pour 145 ? Les types sont-ils respect\u00e9s ? Pour respecter les types demand\u00e9s et/ou effectuer des tests sur des fonctions, Python fournit une instruction appel\u00e9e : assert . assert permet de v\u00e9rifier si une condition est v\u00e9rifi\u00e9e : --- \u00c0 faire vous-m\u00eame 47 --- Dans la console, entrez x=2 . Que se passe-t-il si vous entrez assert(x \\1) ? _________________________ Que se passe-t-il si vous entrez assert(x \\3) ? _________________________ --- \u00c0 faire vous-m\u00eame 47 --- Dans le programme 46, apr\u00e8s la d\u00e9finition de la fonction, ajoutez la ligne suivante : assert ( int(sqrt(x)) == sqrt(x) ). Affichez \u00e0 nouveau les valeurs de cette fonction pour x = 1, 4,121 et 145. [Rem :]{.ul} Que remarquez-vous pour 145 ? Les types d'entr\u00e9e sont-ils respect\u00e9s ? [D\u00e9finition]{.ul} : le test que nous venons d'effectuer s'appelle une pr\u00e9-condition. 15) Proc\u00e9dures, fonctions particuli\u00e8res [Rem 1 :]{.ul} Les param\u00e8tres ne sont pas obligatoires. --- \u00c0 faire vous-m\u00eame 48 --- Testez la fonction suivante : def ma_fon() -\\str: return \\\"voici une fonction qui ne sert \u00e0 rien\\\" [Rem 2 :]{.ul} Une fonction ne renvoie pas forc\u00e9ment de valeur (le mot cl\u00e9 return n'est pas obligatoire). Elle peut par exemple afficher une cha\u00eene de caract\u00e8res \u00e0 l'aide d'un \\\"print\\\". Dans certains langages, on utilise les termes m\u00e9thode ou proc\u00e9dure pour qualifier une fonction \\\"qui ne renvoie rien\\\". --- \u00c0 faire vous-m\u00eame 49 --- Testez la fonction suivante : def ditBonjour(nom : str, age: str): phrase = \\\"Bonjour\\\", nom, \\\"vous avez\\\", age, \\\"ans.\\\" print(phrase) Checkpoint 1) [Autour des chaines de caract\u00e8res]{.ul} <!-- -- a. \u00c9crire une fonction \u00ab singleton \u00bb qui prend un string en param\u00e8tre et renvoie \u00ab vrai \u00bb si la liste est \u00e9gale \u00e0 [0]. b. \u00c9crire une fonction \u00ab m\u00eame longueur \u00bb qui prend deux strings en param\u00e8tres (= arguments ) et renvoie vrai si les listes sont de m\u00eame longueur. c. \u00c9crire une fonction \u00ab appartient \u00bb qui prend en entr\u00e9e un string et une lettre et renvoie \u00ab vrai \u00bb si l'\u00e9l\u00e9ment appartient \u00e0 la liste. d. Cr\u00e9er une fonction \u00ab pluriel \u00bb qui rajoute un s au string donn\u00e9 en entr\u00e9e s'il ne se termine pas d\u00e9j\u00e0 par s. <!-- -- 2) [Calcul de pi !]{.ul} <!-- -- a. \u00c9crire une fonction \u00ab factorielle \u00bb qui prend un nombre n en param\u00e8tre et renvoie la valeur de n! . On rappelle que \\(n! = n \\times (n - 1) \\times ... \\times 3 \\times 2 \\times 1\\) . <!-- -- e. \u00c9crire une fonction \u00ab piApprox \u00bb qui prend un nombre n en param\u00e8tre et renvoie la valeur approch\u00e9e de \\(\\pi\\) selon la formule :\\ \\(\\pi \\approx \\left( 2 + 2^{2} \\times \\frac{(1!)^{2}}{3!} + 2^{3} \\times \\frac{(2!)^{2}}{5!} + ... + 2^{n + 1} \\times \\frac{(n!)^{2}}{(2n + 1)!} \\right)\\) \\ On fera varier la valeur de n pour augmenter la pr\u00e9cision. f. Cr\u00e9er une fonction \u00ab checkPi \u00bb qui prend pour argument un nombre flottant eps et qui renvoie la valeur de n telle que la valeur absolue de piApprox moins pi sous inf\u00e9rieure \u00e0 eps .\\ [Aide :]{.ul} check(1e-2) doit vous renvoyer 7. <!-- -- 3) [D\u00e9cryptage]{.ul} <!-- -- a. \u00c9crire une fonction \u00ab uneLettre \u00bb qui prend en param\u00e8tres un message (type string) et une lettre (type string) et qui renvoie le nombre d'apparitions de cette lettre dans ce message.\\ Par exemple : uneLettre('ah lala','a') renvoie 3. <!-- -- g. \u00c9crire une fonction \u00ab histogramme \u00bb qui prend en param\u00e8tre un message (type string) et qui affiche \u00e0 l'\u00e9cran le nombre d'apparitions de toutes les lettres de l'alphabet.\\ Pour g\u00e9n\u00e9rer l'alphabet, on pourra utiliser :\\ from string import *\\ alphabet = ascii_lowercase \\ \\ Par exemple : \\\"ababcdaa\\\" affiche :\\ a : 4\\ b : 2\\ c : 1\\ d : 1 <!-- -- 4) [Probl\u00e8me]{.ul} Une soci\u00e9t\u00e9 de location de voitures propose \u00e0 ses clients deux contrats : Contrat 1 : un forfait de 50\u20ac puis 0,40\u20ac par km parcouru. Contrat 2 : 0,80\u20ac par km parcouru. a. \u00c9crire deux fonctions prix1(x) et prix2(x) qui renvoient le prix pay\u00e9 avec chaque contrat pour x kilom\u00e8tres parcourus. b. En utilisant les fonctions pr\u00e9c\u00e9dentes, \u00e9crire une fonction plusAvantageux(x) qui renvoie le num\u00e9ro du contrat le plus avantageux. <!-- -- 3) [Nombres de Kaprekar]{.ul} Un nombre de Kaprekar est un nombre dont l'\u00e9criture d\u00e9cimale du carr\u00e9 de ce nombre peut \u00eatre s\u00e9par\u00e9e en deux nombres (pas forc\u00e9ment de m\u00eame taille) dont la somme vaut le nombre initial. [Exemples :]{.ul} 9 est un nombre de Kaprekar car 9\u00b2=81 et on peut s\u00e9parer 81 en 8 et 1 dont la somme 8+1 = 9. 45 est un nombre de Kaprekar car 45\u00b2=2025 et on peut s\u00e9parer 2025 en 20+25=45. 12 n'est pas un nombre de Kaprekar car 12\u00b2=144 et on ne peut pas couper ce nombre pour trouver 12 (1+44=45, 14+4=18). 4 879 est un nombre de Kaprekar car 4879\u00b2 = 23804641 et 238 + 04 641 = 4 879. Cr\u00e9er un programme qui renvoie si un nombre entier n est de Kaprekar ou pas.","title":"Terminal, console et \u00e9diteur de code"},{"location":"algorithmes1/","text":"Algorithmes de recherche \u2693\ufe0e Peut-on trouver en moins de 20 coups un mot dans un dictionnaire contenant un million de mots ? Nous allons voir que la r\u00e9ponse est oui ! La recherche d'un \u00e9l\u00e9ment dans un tableau est une op\u00e9ration en apparence simple et rapide. Toutefois, au prix d'un petit effort d'abstraction, on peut acc\u00e9l\u00e9rer la recherche d'un \u00e9l\u00e9ment et atteindre des niveaux d'efficacit\u00e9 sup\u00e9rieurs. Cet algorithme est fondamental en informatique. Algorithme na\u00eff \u2693\ufe0e \u00c9crire une fonction recherche_naive qui recherche si un entier nomm\u00e9 \u00e9l\u00e9ment_recherch\u00e9 est contenu dans un tableau d'entiers tableau . Cette fonction prend deux param\u00e8tres : le tableau tableau ; l'entier recherch\u00e9 \u00e9l\u00e9ment_recherch\u00e9 . Cette fonction renvoie : -1 si \u00e9l\u00e9ment_recherch\u00e9 n'est pas contenu dans tableau ; le nombre d'\u00e9tapes pour trouver l' \u00e9l\u00e9ment_recherch\u00e9 sinon. Remarque : On s'interdit l'usage de la fonciton in . Lancer assert recherchepy-undnaive([1,2,3], 1) == 1bksl-nlassert recherchepy-undnaive([1,2,3], 0) == -1bksl-nlassert recherchepy-undnaive([1,2,3], 3) == 3bksl-nlassert recherchepy-undnaive([], 0) == -1bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def recherchepy-undnaive(...):bksl-nl ...bksl-nl def recherchepy-undnaive(tableau : list[int], \u00c3\u00a9l\u00c3\u00a9mentpy-undrecherch\u00c3\u00a9 : int):bksl-nl # Attention au nommage de vos variables.bksl-nl nombrepy-unddpy-undetapes = 0bksl-nl for \u00c3\u00a9l\u00c3\u00a9ment in tableau:bksl-nl nombrepy-unddpy-undetapes += 1bksl-nl if \u00c3\u00a9l\u00c3\u00a9ment == \u00c3\u00a9l\u00c3\u00a9mentpy-undrecherch\u00c3\u00a9:bksl-nl return nombrepy-unddpy-undetapesbksl-nl return -1bksl-nl A Z Complexit\u00e9... Combien d'op\u00e9rations seront effectu\u00e9es dans le pire des cas ? Ce nombre d'op\u00e9rations est-il valid\u00e9 par le nombre d'\u00e9tapes indiqu\u00e9 par votre programme ? Algorithme de recherche dichotomique \u2693\ufe0e On donne l'algorithme de recherche dichotomique dans une liste tri\u00e9e : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 DONN\u00c9ES t : tableau d ' entiers tri\u00e9 x : nombre entier, entier recherch\u00e9 DEBUT trouve \u2190 FAUX i_deb \u2190 0 i_fin \u2190 longueur ( t ) -1 tant que trouve == FAUX et que i_deb \u2a7d i_fin : mil \u2190 partie_enti\u00e8re (( i_deb+i_fin ) /2 ) si t [ mil ] == x : trouve = vrai sinon : si x > t [ mil ] : i_deb \u2190 mil+1 sinon : i_fin \u2190 mil-1 fin si fin si fin tant que renvoyer la valeur de trouve Comprendre l'algorithme \u00c0 l'aide du papier, d'un crayon et de la m\u00e9thode du cours, appliquez cet algorithme en recherchant l'entier 5 sur le tableau [ 1 , 2 , 5 , 9 , 10 , 14 , 17 , 24 , 41 ] ; Refaire le travail avec l'\u00e9l\u00e9ment 5 sur la liste [ 4 , 8 , 13 , 23 , 24 , 26 , 30 , 32 , 37 , 43 , 44 , 48 , 64 , 70 , 83 , 89 , 90 ] . Gr\u00e2ce \u00e0 cet exemple et au sch\u00e9ma ci-dessous, sur votre cours, d\u00e9crire le principe g\u00e9n\u00e9ral de fonctionnement de cet algorithme. \u00c9crire l'algorithme Dans l'IDE ci-dessous, traduire cet algorithme en langage Python en compl\u00e9tant la fonction recherche_dichotomique. Aide : N'oubliez pas de valider votre fonction avec le bouton de validation... Lancer assert recherchepy-unddichotomique([1,2,3], 1) == Truebksl-nlassert recherchepy-unddichotomique([8,12,13,22,67,69], 22) == Truebksl-nlassert recherchepy-unddichotomique([8,12,13,22,67,69,125,127], 23) == Falsebksl-nlassert recherchepy-unddichotomique([1,2,3], 0) == Falsebksl-nlassert recherchepy-unddichotomique([], 0) == Falsebksl-nl Valider \u221e/\u221e T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def recherchepy-unddichotomique(tableau : list[int], \u00c3\u00a9l\u00c3\u00a9mentpy-undrecherch\u00c3\u00a9 : int):bksl-nl ...bksl-nl def recherchepy-unddichotomique(tableau : list[int], \u00c3\u00a9l\u00c3\u00a9mentpy-undrecherch\u00c3\u00a9 : int):bksl-nl # Attention au nommage de vos variables.bksl-nl entierpy-undtrouv\u00c3\u00a9 = Falsebksl-nl debut = 0bksl-nl fin = len(tableau)-1bksl-nlbksl-nl while entierpy-undtrouv\u00c3\u00a9 == False and debut <= fin:bksl-nl milieu = (debut + fin) // 2bksl-nl if tableau[milieu] == \u00c3\u00a9l\u00c3\u00a9mentpy-undrecherch\u00c3\u00a9:bksl-nl entierpy-undtrouv\u00c3\u00a9 = Truebksl-nl elif \u00c3\u00a9l\u00c3\u00a9mentpy-undrecherch\u00c3\u00a9 > L[milieu] :bksl-nl debut = milieu+1bksl-nl else :bksl-nl fin = milieu-1bksl-nlbksl-nl return entierpy-undtrouv\u00c3\u00a9bksl-nlbksl-nl Modifier votre fonction afin de : renvoyer -1 si l'entier recherch\u00e9 n'appartient pas au tableau ; renvoyer le nombre d'\u00e9tapes pour trouver l'entier sinon. Complexit\u00e9... Quel est le pire des cas pour cet algorithme ? \u00c0 l'aide de tests sur des tableaux de plus en plus grands, essayer de trouver la complexit\u00e9 de cet algorithme dans le pire des cas. Rappel : on pourra cr\u00e9er des tableaux en utilisant la notation en compr\u00e9hension : T = [ i for i in range ( taille ) ] . Ce deuxi\u00e8me algorithme est-il plus efficace que le premier ? Avec vos propres mots et en utilisant le sch\u00e9ma ci-contre, expliquez pourquoi. Comparaison d'algorithmes \u2693\ufe0e Cette partie est \u00e0 r\u00e9aliser en local sur Thonny. La librairie timeit permet de faire des mesures de vitesse d'ex\u00e9cution. Pour cela, il faut d'abord l'importer \u00e0 l'aide de l'instruction import timeit . timeit s'utilise comme suit : Cr\u00e9er des tableaux de taille 100, 1000, 10000. R\u00e9aliser et afficher quelques mesures de temps d'ex\u00e9cution de votre algorithme na\u00eff ainsi que de votre algorithme de recherche par dichotomie sur ces tableaux. Modifier votre programme de mani\u00e8re \u00e0 enregistrer les r\u00e9sultats des mesures de temps dans deux variables : temps_naif et temps_dichotomique . Exemple de r\u00e9sultat taille_tableau = [ 10 , 100 , 1000 , 10000 ] temps_naif = [] temps_dichotomique = [] # Mesure de temps de calcul # Obtention des r\u00e9sultats. temps_naif = [ 0.0001 , 0.01 , 0.1 , 1.2 ] temps_dichotomique = [ 0.0001 , 0.001 , 0.01 , 0.2 ] On peut r\u00e9aliser des graphiques gr\u00e2ce \u00e0 une librairie appel\u00e9e matplotlib. \u00c0 l'aide d'une recherche, trouver comment fonctionne matplotlib. Nous aurons besoin de l'importation : from matplotlib.pyplot import * . R\u00e9aliser un graphique repr\u00e9sentant vos mesures de temps pour les deux algorithmes en fonction de la taille du tableau. On pourra utiliser une \u00e9chelle logarithmique en abscisse et en ordonn\u00e9es.","title":"Algorithme de recherche"},{"location":"algorithmes1/#algorithmes-de-recherche","text":"Peut-on trouver en moins de 20 coups un mot dans un dictionnaire contenant un million de mots ? Nous allons voir que la r\u00e9ponse est oui ! La recherche d'un \u00e9l\u00e9ment dans un tableau est une op\u00e9ration en apparence simple et rapide. Toutefois, au prix d'un petit effort d'abstraction, on peut acc\u00e9l\u00e9rer la recherche d'un \u00e9l\u00e9ment et atteindre des niveaux d'efficacit\u00e9 sup\u00e9rieurs. Cet algorithme est fondamental en informatique.","title":"Algorithmes de recherche"},{"location":"algorithmes1/#algorithme-naif","text":"\u00c9crire une fonction recherche_naive qui recherche si un entier nomm\u00e9 \u00e9l\u00e9ment_recherch\u00e9 est contenu dans un tableau d'entiers tableau . Cette fonction prend deux param\u00e8tres : le tableau tableau ; l'entier recherch\u00e9 \u00e9l\u00e9ment_recherch\u00e9 . Cette fonction renvoie : -1 si \u00e9l\u00e9ment_recherch\u00e9 n'est pas contenu dans tableau ; le nombre d'\u00e9tapes pour trouver l' \u00e9l\u00e9ment_recherch\u00e9 sinon. Remarque : On s'interdit l'usage de la fonciton in . Lancer assert recherchepy-undnaive([1,2,3], 1) == 1bksl-nlassert recherchepy-undnaive([1,2,3], 0) == -1bksl-nlassert recherchepy-undnaive([1,2,3], 3) == 3bksl-nlassert recherchepy-undnaive([], 0) == -1bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def recherchepy-undnaive(...):bksl-nl ...bksl-nl def recherchepy-undnaive(tableau : list[int], \u00c3\u00a9l\u00c3\u00a9mentpy-undrecherch\u00c3\u00a9 : int):bksl-nl # Attention au nommage de vos variables.bksl-nl nombrepy-unddpy-undetapes = 0bksl-nl for \u00c3\u00a9l\u00c3\u00a9ment in tableau:bksl-nl nombrepy-unddpy-undetapes += 1bksl-nl if \u00c3\u00a9l\u00c3\u00a9ment == \u00c3\u00a9l\u00c3\u00a9mentpy-undrecherch\u00c3\u00a9:bksl-nl return nombrepy-unddpy-undetapesbksl-nl return -1bksl-nl A Z Complexit\u00e9... Combien d'op\u00e9rations seront effectu\u00e9es dans le pire des cas ? Ce nombre d'op\u00e9rations est-il valid\u00e9 par le nombre d'\u00e9tapes indiqu\u00e9 par votre programme ?","title":"Algorithme na\u00eff"},{"location":"algorithmes1/#algorithme-de-recherche-dichotomique","text":"On donne l'algorithme de recherche dichotomique dans une liste tri\u00e9e : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 DONN\u00c9ES t : tableau d ' entiers tri\u00e9 x : nombre entier, entier recherch\u00e9 DEBUT trouve \u2190 FAUX i_deb \u2190 0 i_fin \u2190 longueur ( t ) -1 tant que trouve == FAUX et que i_deb \u2a7d i_fin : mil \u2190 partie_enti\u00e8re (( i_deb+i_fin ) /2 ) si t [ mil ] == x : trouve = vrai sinon : si x > t [ mil ] : i_deb \u2190 mil+1 sinon : i_fin \u2190 mil-1 fin si fin si fin tant que renvoyer la valeur de trouve Comprendre l'algorithme \u00c0 l'aide du papier, d'un crayon et de la m\u00e9thode du cours, appliquez cet algorithme en recherchant l'entier 5 sur le tableau [ 1 , 2 , 5 , 9 , 10 , 14 , 17 , 24 , 41 ] ; Refaire le travail avec l'\u00e9l\u00e9ment 5 sur la liste [ 4 , 8 , 13 , 23 , 24 , 26 , 30 , 32 , 37 , 43 , 44 , 48 , 64 , 70 , 83 , 89 , 90 ] . Gr\u00e2ce \u00e0 cet exemple et au sch\u00e9ma ci-dessous, sur votre cours, d\u00e9crire le principe g\u00e9n\u00e9ral de fonctionnement de cet algorithme. \u00c9crire l'algorithme Dans l'IDE ci-dessous, traduire cet algorithme en langage Python en compl\u00e9tant la fonction recherche_dichotomique. Aide : N'oubliez pas de valider votre fonction avec le bouton de validation... Lancer assert recherchepy-unddichotomique([1,2,3], 1) == Truebksl-nlassert recherchepy-unddichotomique([8,12,13,22,67,69], 22) == Truebksl-nlassert recherchepy-unddichotomique([8,12,13,22,67,69,125,127], 23) == Falsebksl-nlassert recherchepy-unddichotomique([1,2,3], 0) == Falsebksl-nlassert recherchepy-unddichotomique([], 0) == Falsebksl-nl Valider \u221e/\u221e T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def recherchepy-unddichotomique(tableau : list[int], \u00c3\u00a9l\u00c3\u00a9mentpy-undrecherch\u00c3\u00a9 : int):bksl-nl ...bksl-nl def recherchepy-unddichotomique(tableau : list[int], \u00c3\u00a9l\u00c3\u00a9mentpy-undrecherch\u00c3\u00a9 : int):bksl-nl # Attention au nommage de vos variables.bksl-nl entierpy-undtrouv\u00c3\u00a9 = Falsebksl-nl debut = 0bksl-nl fin = len(tableau)-1bksl-nlbksl-nl while entierpy-undtrouv\u00c3\u00a9 == False and debut <= fin:bksl-nl milieu = (debut + fin) // 2bksl-nl if tableau[milieu] == \u00c3\u00a9l\u00c3\u00a9mentpy-undrecherch\u00c3\u00a9:bksl-nl entierpy-undtrouv\u00c3\u00a9 = Truebksl-nl elif \u00c3\u00a9l\u00c3\u00a9mentpy-undrecherch\u00c3\u00a9 > L[milieu] :bksl-nl debut = milieu+1bksl-nl else :bksl-nl fin = milieu-1bksl-nlbksl-nl return entierpy-undtrouv\u00c3\u00a9bksl-nlbksl-nl Modifier votre fonction afin de : renvoyer -1 si l'entier recherch\u00e9 n'appartient pas au tableau ; renvoyer le nombre d'\u00e9tapes pour trouver l'entier sinon. Complexit\u00e9... Quel est le pire des cas pour cet algorithme ? \u00c0 l'aide de tests sur des tableaux de plus en plus grands, essayer de trouver la complexit\u00e9 de cet algorithme dans le pire des cas. Rappel : on pourra cr\u00e9er des tableaux en utilisant la notation en compr\u00e9hension : T = [ i for i in range ( taille ) ] . Ce deuxi\u00e8me algorithme est-il plus efficace que le premier ? Avec vos propres mots et en utilisant le sch\u00e9ma ci-contre, expliquez pourquoi.","title":"Algorithme de recherche dichotomique"},{"location":"algorithmes1/#comparaison-dalgorithmes","text":"Cette partie est \u00e0 r\u00e9aliser en local sur Thonny. La librairie timeit permet de faire des mesures de vitesse d'ex\u00e9cution. Pour cela, il faut d'abord l'importer \u00e0 l'aide de l'instruction import timeit . timeit s'utilise comme suit : Cr\u00e9er des tableaux de taille 100, 1000, 10000. R\u00e9aliser et afficher quelques mesures de temps d'ex\u00e9cution de votre algorithme na\u00eff ainsi que de votre algorithme de recherche par dichotomie sur ces tableaux. Modifier votre programme de mani\u00e8re \u00e0 enregistrer les r\u00e9sultats des mesures de temps dans deux variables : temps_naif et temps_dichotomique . Exemple de r\u00e9sultat taille_tableau = [ 10 , 100 , 1000 , 10000 ] temps_naif = [] temps_dichotomique = [] # Mesure de temps de calcul # Obtention des r\u00e9sultats. temps_naif = [ 0.0001 , 0.01 , 0.1 , 1.2 ] temps_dichotomique = [ 0.0001 , 0.001 , 0.01 , 0.2 ] On peut r\u00e9aliser des graphiques gr\u00e2ce \u00e0 une librairie appel\u00e9e matplotlib. \u00c0 l'aide d'une recherche, trouver comment fonctionne matplotlib. Nous aurons besoin de l'importation : from matplotlib.pyplot import * . R\u00e9aliser un graphique repr\u00e9sentant vos mesures de temps pour les deux algorithmes en fonction de la taille du tableau. On pourra utiliser une \u00e9chelle logarithmique en abscisse et en ordonn\u00e9es.","title":"Comparaison d'algorithmes"},{"location":"algorithmes2/","text":"Algorithmes de tri : tri par s\u00e9lection \u2693\ufe0e Nous avons vu que la recherche dichotomique permettait de rechercher de mani\u00e8re tr\u00e8s efficace un \u00e9l\u00e9ment dans une liste tri\u00e9e . Cet algorithme va donc \u00eatre utile si nous disposons d'un algorithme de tri capable de faire son travail rapidement (si possible en complexit\u00e9 logarithmique). Mais un tel algorithme n'est vu qu'en Terminale... Pour vous donner une id\u00e9e, allez voir le nombre d'algorithmes de tri existant. La probl\u00e9matique du tri est encore aujourd'hui largement \u00e9tudi\u00e9e en recherche informatique. Toute personne travaillant dans le domaine de l'informatique est amen\u00e9e \u00e0 \u00e9tudier sur ce type d'algorithme. Nous verrons cette ann\u00e9e deux algorithmes de tri : le tri par s\u00e9lection ; le tri par insertion. Algorithme na\u00eff \u2693\ufe0e Question 1 Regardez la vid\u00e9o li\u00e9e afin de comprendre son fonctionnement dans le cas o\u00f9 on recherche l'objet le plus lourd. Question Nous allons repr\u00e9senter les boites de la vid\u00e9o par un tableau de nombres dont les valeurs correspondent aux poids des pi\u00e8ces. Sur une feuille, compl\u00e9ter l'algorithme en pseudo-code suivant : Param\u00e8tres d 'entr\u00e9e : tas_des_poids = ensemble des poids non tri\u00e9s tas_des_poids_tri\u00e9s = ensemble des poids tri\u00e9s D\u00e9but : On parcourt \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 : on trouve \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 on l' enregistre dans tas_des_poids_tri\u00e9s. On renvoie \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 Pour des raisons de simplicit\u00e9 d'\u00e9criture, nous allons chercher l'\u00e9l\u00e9ment le plus l\u00e9ger . Question 3 Commenter chaque ligne de la fonction tri_s\u00e9lection_simple en la reliant \u00e0 une \u00e9tape de l'algorithme. Lancer assert trouverpy-undpluspy-undleger([1,2,3]) == 0bksl-nlassert trouverpy-undpluspy-undleger([]) == -1bksl-nlassert trouverpy-undpluspy-undleger([12,4,7]) == 1bksl-nlbksl-nl Valider \u221e/\u221e T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def trouverpy-undpluspy-undleger(listepy-unddepy-undpoids: list) -> list:bksl-nl \"\"\"bksl-nl Trouve la valeur la plus petite d'un tableau d'entiersbksl-nl et renvoie la position de cette valeur (-1 si la liste est vide)bksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - listepy-unddepy-undpoids : tableau d'entiersbksl-nl \"\"\"bksl-nl n = len(listepy-unddepy-undpoids)bksl-nl bksl-nlbksl-nl returnbksl-nlbksl-nlbksl-nldef tripy-undselectionpy-undsimple(taspy-unddespy-undpoids: list)-> list:bksl-nl \"\"\"bksl-nl R\u00c3\u00a9alise un tri par s\u00c3\u00a9lection simplifi\u00c3\u00a9bksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - boitePoids : tableaux d'entiersbksl-nl \"\"\"bksl-nl n = len(taspy-unddespy-undpoids)bksl-nl taspy-unddespy-undpoidspy-undtri\u00c3\u00a9s = []bksl-nl bksl-nl for py-und in range(n):bksl-nl indicepy-undleger = trouverpy-undpluspy-undleger(taspy-unddespy-undpoids)bksl-nl boitepy-undlapy-undpluspy-undlegere = taspy-unddespy-undpoids.pop(indicepy-undleger)bksl-nl taspy-unddespy-undpoidspy-undtri\u00c3\u00a9s.append(boitepy-undlapy-undpluspy-undlegere)bksl-nlbksl-nl return taspy-unddespy-undpoidspy-undtri\u00c3\u00a9sbksl-nl def trouverpy-undpluspy-undleger(listepy-unddepy-undpoids: list) -> list:bksl-nl \"\"\"bksl-nl Trouve la valeur la plus petite d'un tableau d'entiersbksl-nl et renvoie la position de cette valeurbksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - listepy-unddepy-undpoids : tableau d'entiersbksl-nl - ipy-unddebut : param\u00c3\u00a8tre optionnel (valeur par d\u00c3\u00a9faut : 0)bksl-nl \"\"\"bksl-nl n = len(listepy-unddepy-undpoids)bksl-nl minimumpy-undactuel = 1e99bksl-nl ipy-undminimum = -1bksl-nl for i in range(n):bksl-nl if listepy-unddepy-undpoids[i] < minimumpy-undactuel:bksl-nl minimumpy-undactuel = listepy-unddepy-undpoids[i]bksl-nl ipy-undminimum = ibksl-nl return ipy-undminimumbksl-nlbksl-nlbksl-nldef tripy-undselectionpy-undsimple(taspy-unddespy-undpoids: list)-> list:bksl-nl \"\"\"bksl-nl R\u00c3\u00a9alise un tri par s\u00c3\u00a9lection simplifi\u00c3\u00a9bksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - boitePoids : tableaux d'entiersbksl-nl \"\"\"bksl-nl n = len(taspy-unddespy-undpoids)bksl-nl taspy-unddespy-undpoidspy-undtri\u00c3\u00a9s = []bksl-nl bksl-nl for py-und in range(n):bksl-nl indicepy-undleger = trouverpy-undpluspy-undleger(taspy-unddespy-undpoids)bksl-nl boitepy-undlapy-undpluspy-undlegere = taspy-unddespy-undpoids.pop(indicepy-undleger)bksl-nl taspy-unddespy-undpoidspy-undtri\u00c3\u00a9s.append(boitepy-undlapy-undpluspy-undlegere)bksl-nlbksl-nl return taspy-unddespy-undpoidspy-undtri\u00c3\u00a9sbksl-nl Question 4 La fonction trouver_plus_leger ci-dessus doit \u00eatre programm\u00e9e. Cette fonction prend en param\u00e8tres d'entr\u00e9e un tableau de nombres entiers liste_de_poids ainsi qu'un indice qui nous servira plus tard. Elle renvoie la position du minimum de ce tableau. On s'interdira l'utilisation de la fonction Python min . Algorithme : tri par s\u00e9lection \u2693\ufe0e L'algorithme pr\u00e9c\u00e9dent a l'inconv\u00e9nient d'utiliser deux tableaux, ce qui est inefficace en terme de co\u00fbt m\u00e9moire. On se propose de trouve une m\u00e9thode permettant de n'utiliser qu'un seul tableau. Question 5 \u00c0 partir du tableau ci-dessous, sch\u00e9matisant le tri par s\u00e9lection, expliquez ce qu'il se passe \u00e0 chaque \u00e9tape. On consid\u00e8re un tas de 4 poids. Passage 0 dans boucle 33 81 21 51 On trouve 21 pour minimum. Il est en position 2. On va inverser le 33 et le 21 Passage 1 dans boucle 21 81 33 51 ..... Passage 2 dans boucle 21 33 81 51 ..... Passage 3 dans boucle 21 33 51 81 ..... En d\u00e9duire quelle pourrait \u00eatre la m\u00e9thode nous permettant de nous passer d'un tableau par rapport \u00e0 la m\u00e9thode na\u00efve. Question 6 \u00c0 partir du tableau pr\u00e9c\u00e9dent, r\u00e9pondez \u00e0 ces questions importantes : combien de passage(s) dans la boucle contient cet algorithme ? la recherche d'un minimum se fait-elle syst\u00e9matiquement dans tout le tableau ? Si non, \u00e0 une \u00e9tape quelconque k, \u00e0 partir de quel leposition doit-on chercher le minimum ? quelle valeur est toujours \u00e9chang\u00e9e ? Question 7 \u00c0 partir de vos r\u00e9ponses, compl\u00e9tez l'algorithme ci-dessous : Param\u00e8tres d ' entr\u00e9e : tas_des_poids = ensemble des poids non tri\u00e9s D\u00e9but : On parcourt \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 : on enregistre \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 on \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 on \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 On renvoie \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 Question 8 Pour que notre nouvel algorithme fonctionne, modifier la fonction trouver_plus_l\u00e9ger . Celle-ci doit maintenant trouver le minimum d'un tableau liste_de_poids pour des \u00e9l\u00e9ments compris entre la position i_debut et la fin du tableau. On utilisera le param\u00e8tre optionnel i_debut . Aide : l'instruction range ( a , b ) permet de compter de a \u00e0 b-1. Lancer assert trouverpy-undpluspy-undleger([1,2,3], 1) == 2bksl-nlassert trouverpy-undpluspy-undleger([1,2,3], 0) == 1bksl-nlassert trouverpy-undpluspy-undleger([12,4,7],2) == 7bksl-nlbksl-nl Valider \u221e/\u221e T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def trouverpy-undpluspy-undleger(listepy-unddepy-undpoids: list, ipy-unddebut : int = 0) -> list:bksl-nl \"\"\"bksl-nl Trouve la valeur la plus petite d'un tableau d'entiersbksl-nl et renvoie la position de cette valeurbksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - listepy-unddepy-undpoids : tableau d'entiersbksl-nl - ipy-unddebut : param\u00c3\u00a8tre optionnel (valeur par d\u00c3\u00a9faut : 0)bksl-nl \"\"\"bksl-nl n = len(listepy-unddepy-undpoids)bksl-nl bksl-nlbksl-nl returnbksl-nl def trouverpy-undpluspy-undleger(listepy-unddepy-undpoids: list, ipy-unddebut : int = 0) -> list:bksl-nl \"\"\"bksl-nl Trouve la valeur la plus petite d'un tableau d'entiersbksl-nl et renvoie la position de cette valeurbksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - listepy-unddepy-undpoids : tableau d'entiersbksl-nl - ipy-unddebut : param\u00c3\u00a8tre optionnel (valeur par d\u00c3\u00a9faut : 0)bksl-nl \"\"\"bksl-nl n = len(listepy-unddepy-undpoids)bksl-nl minimumpy-undactuel = 1e99bksl-nl ipy-undminimum = -1bksl-nl for i in range(ipy-unddebut, n):bksl-nl if listepy-unddepy-undpoids[i] < minimumpy-undactuel:bksl-nl minimumpy-undactuel = listepy-unddepy-undpoids[i]bksl-nl ipy-undminimum = ibksl-nl return ipy-undminimumbksl-nl Question 9 \u00c0 partir de l'algorithme de la question 3 et en utilisant la nouvelle version de la fonction trouver_plus_l\u00e9ger , compl\u00e9ter la fonction tri_selection . Aide : pour utiliser un param\u00e8tre optionnel, il suffit de lui donner une valeur. Exemple trouver_plus_l\u00e9ger ([ 11 , 18 , 8 , 63 ]) trouve la plus petite valeur depuis l'indice 0 (valeur par d\u00e9faut 0), donc entre 11, 18, 8 et 63 ; trouver_plus_l\u00e9ger ([ 11 , 18 , 8 , 63 ], 2 ) trouve la plus petite valeur depuis l'indice 2, donc entre 8 et 63. Lancer assert tripy-undselection([1, 3, 2]) == [1, 2, 3]bksl-nlassert tripy-undselection([1, 7, 7, 1]) == [1, 1, 7, 7]bksl-nlassert tripy-undselection([1]) == [1]bksl-nlbksl-nl Valider \u221e/\u221e T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def tripy-undselection(taspy-unddespy-undpoids: list)-> list:bksl-nl \"\"\"bksl-nl R\u00c3\u00a9alise un tri par s\u00c3\u00a9lection simplifi\u00c3\u00a9bksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - taspy-unddespy-undpoids : tableaux d'entiersbksl-nl \"\"\"bksl-nl n = len(taspy-unddespy-undpoids)bksl-nl bksl-nlbksl-nl return taspy-unddespy-undpoidsbksl-nl from docs.scripts.algo2.exo1 import trouverpy-undpluspy-undlegerbksl-nlbksl-nlbksl-nldef tripy-undselection(taspy-unddespy-undpoids: list)-> list:bksl-nl \"\"\"bksl-nl R\u00c3\u00a9alise un tri par s\u00c3\u00a9lection simplifi\u00c3\u00a9bksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - taspy-unddespy-undpoids : tableaux d'entiersbksl-nl \"\"\"bksl-nl n = len(taspy-unddespy-undpoids)bksl-nl for i in range(n):bksl-nl positionpy-unddepy-undlapy-undpluspy-undlegere = trouverpy-undpluspy-undleger(taspy-unddespy-undpoids, i)bksl-nl taspy-unddespy-undpoids[i], taspy-unddespy-undpoids[positionpy-unddepy-undlapy-undpluspy-undlegere] \\bksl-nl = taspy-unddespy-undpoids[positionpy-unddepy-undlapy-undpluspy-undlegere], taspy-unddespy-undpoids[i]bksl-nlbksl-nl return taspy-unddespy-undpoidsbksl-nl N'oubliez pas de tester votre algorithme sur quelques exemples. Algorithme : complexit\u00e9 et mesure de temps \u2693\ufe0e Question 10 Quelle sera la complexit\u00e9 de notre algorithme dans les cas suivants : liste = [4, 2, 8, 7, 9, 3, 11] liste = [11, 8, 6, 4, 2, 1] liste = [1, 4, 5, 6, 9, 13] En d\u00e9duire quel est le pire des cas puis donner la complexit\u00e9 de l'algorithme en notation O. Cette partie est \u00e0 r\u00e9aliser en local sur Thonny. La librairie timeit permet de faire des mesures de vitesse d'ex\u00e9cution. Pour cela, il faut d'abord l'importer \u00e0 l'aide de l'instruction import timeit . timeit s'utilise comme suit : Cr\u00e9er des tableaux de taille 100, 1000, 10000. R\u00e9aliser et afficher quelques mesures de temps d'ex\u00e9cution de votre algorithme na\u00eff ainsi que de votre algorithme de recherche par dichotomie sur ces tableaux. Modifier votre programme de mani\u00e8re \u00e0 enregistrer les r\u00e9sultats des mesures de temps dans deux variables : temps_naif et temps_s\u00e9lection . Exemple de r\u00e9sultat taille_tableau = [ 10 , 100 , 1000 , 10000 ] temps_naif = [] temps_s\u00e9lection = [] # Mesure de temps de calcul # Obtention des r\u00e9sultats. temps_naif = [ 0.0001 , 0.01 , 0.1 , 1.2 ] temps_dichotomique = [ 0.0001 , 0.001 , 0.01 , 0.2 ] On peut r\u00e9aliser des graphiques gr\u00e2ce \u00e0 une librairie appel\u00e9e matplotlib. \u00c0 l'aide d'une recherche, trouver comment fonctionne matplotlib. Nous aurons besoin de l'importation : from matplotlib.pyplot import * . R\u00e9aliser un graphique repr\u00e9sentant vos mesures de temps pour les deux algorithmes en fonction de la taille du tableau. On pourra utiliser une \u00e9chelle logarithmique en abscisse et en ordonn\u00e9es.","title":"Algorithme de tri 1"},{"location":"algorithmes2/#algorithmes-de-tri-tri-par-selection","text":"Nous avons vu que la recherche dichotomique permettait de rechercher de mani\u00e8re tr\u00e8s efficace un \u00e9l\u00e9ment dans une liste tri\u00e9e . Cet algorithme va donc \u00eatre utile si nous disposons d'un algorithme de tri capable de faire son travail rapidement (si possible en complexit\u00e9 logarithmique). Mais un tel algorithme n'est vu qu'en Terminale... Pour vous donner une id\u00e9e, allez voir le nombre d'algorithmes de tri existant. La probl\u00e9matique du tri est encore aujourd'hui largement \u00e9tudi\u00e9e en recherche informatique. Toute personne travaillant dans le domaine de l'informatique est amen\u00e9e \u00e0 \u00e9tudier sur ce type d'algorithme. Nous verrons cette ann\u00e9e deux algorithmes de tri : le tri par s\u00e9lection ; le tri par insertion.","title":"Algorithmes de tri : tri par s\u00e9lection"},{"location":"algorithmes2/#algorithme-naif","text":"Question 1 Regardez la vid\u00e9o li\u00e9e afin de comprendre son fonctionnement dans le cas o\u00f9 on recherche l'objet le plus lourd. Question Nous allons repr\u00e9senter les boites de la vid\u00e9o par un tableau de nombres dont les valeurs correspondent aux poids des pi\u00e8ces. Sur une feuille, compl\u00e9ter l'algorithme en pseudo-code suivant : Param\u00e8tres d 'entr\u00e9e : tas_des_poids = ensemble des poids non tri\u00e9s tas_des_poids_tri\u00e9s = ensemble des poids tri\u00e9s D\u00e9but : On parcourt \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 : on trouve \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 on l' enregistre dans tas_des_poids_tri\u00e9s. On renvoie \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 Pour des raisons de simplicit\u00e9 d'\u00e9criture, nous allons chercher l'\u00e9l\u00e9ment le plus l\u00e9ger . Question 3 Commenter chaque ligne de la fonction tri_s\u00e9lection_simple en la reliant \u00e0 une \u00e9tape de l'algorithme. Lancer assert trouverpy-undpluspy-undleger([1,2,3]) == 0bksl-nlassert trouverpy-undpluspy-undleger([]) == -1bksl-nlassert trouverpy-undpluspy-undleger([12,4,7]) == 1bksl-nlbksl-nl Valider \u221e/\u221e T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def trouverpy-undpluspy-undleger(listepy-unddepy-undpoids: list) -> list:bksl-nl \"\"\"bksl-nl Trouve la valeur la plus petite d'un tableau d'entiersbksl-nl et renvoie la position de cette valeur (-1 si la liste est vide)bksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - listepy-unddepy-undpoids : tableau d'entiersbksl-nl \"\"\"bksl-nl n = len(listepy-unddepy-undpoids)bksl-nl bksl-nlbksl-nl returnbksl-nlbksl-nlbksl-nldef tripy-undselectionpy-undsimple(taspy-unddespy-undpoids: list)-> list:bksl-nl \"\"\"bksl-nl R\u00c3\u00a9alise un tri par s\u00c3\u00a9lection simplifi\u00c3\u00a9bksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - boitePoids : tableaux d'entiersbksl-nl \"\"\"bksl-nl n = len(taspy-unddespy-undpoids)bksl-nl taspy-unddespy-undpoidspy-undtri\u00c3\u00a9s = []bksl-nl bksl-nl for py-und in range(n):bksl-nl indicepy-undleger = trouverpy-undpluspy-undleger(taspy-unddespy-undpoids)bksl-nl boitepy-undlapy-undpluspy-undlegere = taspy-unddespy-undpoids.pop(indicepy-undleger)bksl-nl taspy-unddespy-undpoidspy-undtri\u00c3\u00a9s.append(boitepy-undlapy-undpluspy-undlegere)bksl-nlbksl-nl return taspy-unddespy-undpoidspy-undtri\u00c3\u00a9sbksl-nl def trouverpy-undpluspy-undleger(listepy-unddepy-undpoids: list) -> list:bksl-nl \"\"\"bksl-nl Trouve la valeur la plus petite d'un tableau d'entiersbksl-nl et renvoie la position de cette valeurbksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - listepy-unddepy-undpoids : tableau d'entiersbksl-nl - ipy-unddebut : param\u00c3\u00a8tre optionnel (valeur par d\u00c3\u00a9faut : 0)bksl-nl \"\"\"bksl-nl n = len(listepy-unddepy-undpoids)bksl-nl minimumpy-undactuel = 1e99bksl-nl ipy-undminimum = -1bksl-nl for i in range(n):bksl-nl if listepy-unddepy-undpoids[i] < minimumpy-undactuel:bksl-nl minimumpy-undactuel = listepy-unddepy-undpoids[i]bksl-nl ipy-undminimum = ibksl-nl return ipy-undminimumbksl-nlbksl-nlbksl-nldef tripy-undselectionpy-undsimple(taspy-unddespy-undpoids: list)-> list:bksl-nl \"\"\"bksl-nl R\u00c3\u00a9alise un tri par s\u00c3\u00a9lection simplifi\u00c3\u00a9bksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - boitePoids : tableaux d'entiersbksl-nl \"\"\"bksl-nl n = len(taspy-unddespy-undpoids)bksl-nl taspy-unddespy-undpoidspy-undtri\u00c3\u00a9s = []bksl-nl bksl-nl for py-und in range(n):bksl-nl indicepy-undleger = trouverpy-undpluspy-undleger(taspy-unddespy-undpoids)bksl-nl boitepy-undlapy-undpluspy-undlegere = taspy-unddespy-undpoids.pop(indicepy-undleger)bksl-nl taspy-unddespy-undpoidspy-undtri\u00c3\u00a9s.append(boitepy-undlapy-undpluspy-undlegere)bksl-nlbksl-nl return taspy-unddespy-undpoidspy-undtri\u00c3\u00a9sbksl-nl Question 4 La fonction trouver_plus_leger ci-dessus doit \u00eatre programm\u00e9e. Cette fonction prend en param\u00e8tres d'entr\u00e9e un tableau de nombres entiers liste_de_poids ainsi qu'un indice qui nous servira plus tard. Elle renvoie la position du minimum de ce tableau. On s'interdira l'utilisation de la fonction Python min .","title":"Algorithme na\u00eff"},{"location":"algorithmes2/#algorithme-tri-par-selection","text":"L'algorithme pr\u00e9c\u00e9dent a l'inconv\u00e9nient d'utiliser deux tableaux, ce qui est inefficace en terme de co\u00fbt m\u00e9moire. On se propose de trouve une m\u00e9thode permettant de n'utiliser qu'un seul tableau. Question 5 \u00c0 partir du tableau ci-dessous, sch\u00e9matisant le tri par s\u00e9lection, expliquez ce qu'il se passe \u00e0 chaque \u00e9tape. On consid\u00e8re un tas de 4 poids. Passage 0 dans boucle 33 81 21 51 On trouve 21 pour minimum. Il est en position 2. On va inverser le 33 et le 21 Passage 1 dans boucle 21 81 33 51 ..... Passage 2 dans boucle 21 33 81 51 ..... Passage 3 dans boucle 21 33 51 81 ..... En d\u00e9duire quelle pourrait \u00eatre la m\u00e9thode nous permettant de nous passer d'un tableau par rapport \u00e0 la m\u00e9thode na\u00efve. Question 6 \u00c0 partir du tableau pr\u00e9c\u00e9dent, r\u00e9pondez \u00e0 ces questions importantes : combien de passage(s) dans la boucle contient cet algorithme ? la recherche d'un minimum se fait-elle syst\u00e9matiquement dans tout le tableau ? Si non, \u00e0 une \u00e9tape quelconque k, \u00e0 partir de quel leposition doit-on chercher le minimum ? quelle valeur est toujours \u00e9chang\u00e9e ? Question 7 \u00c0 partir de vos r\u00e9ponses, compl\u00e9tez l'algorithme ci-dessous : Param\u00e8tres d ' entr\u00e9e : tas_des_poids = ensemble des poids non tri\u00e9s D\u00e9but : On parcourt \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 : on enregistre \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 on \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 on \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 On renvoie \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 \u2026 Question 8 Pour que notre nouvel algorithme fonctionne, modifier la fonction trouver_plus_l\u00e9ger . Celle-ci doit maintenant trouver le minimum d'un tableau liste_de_poids pour des \u00e9l\u00e9ments compris entre la position i_debut et la fin du tableau. On utilisera le param\u00e8tre optionnel i_debut . Aide : l'instruction range ( a , b ) permet de compter de a \u00e0 b-1. Lancer assert trouverpy-undpluspy-undleger([1,2,3], 1) == 2bksl-nlassert trouverpy-undpluspy-undleger([1,2,3], 0) == 1bksl-nlassert trouverpy-undpluspy-undleger([12,4,7],2) == 7bksl-nlbksl-nl Valider \u221e/\u221e T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def trouverpy-undpluspy-undleger(listepy-unddepy-undpoids: list, ipy-unddebut : int = 0) -> list:bksl-nl \"\"\"bksl-nl Trouve la valeur la plus petite d'un tableau d'entiersbksl-nl et renvoie la position de cette valeurbksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - listepy-unddepy-undpoids : tableau d'entiersbksl-nl - ipy-unddebut : param\u00c3\u00a8tre optionnel (valeur par d\u00c3\u00a9faut : 0)bksl-nl \"\"\"bksl-nl n = len(listepy-unddepy-undpoids)bksl-nl bksl-nlbksl-nl returnbksl-nl def trouverpy-undpluspy-undleger(listepy-unddepy-undpoids: list, ipy-unddebut : int = 0) -> list:bksl-nl \"\"\"bksl-nl Trouve la valeur la plus petite d'un tableau d'entiersbksl-nl et renvoie la position de cette valeurbksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - listepy-unddepy-undpoids : tableau d'entiersbksl-nl - ipy-unddebut : param\u00c3\u00a8tre optionnel (valeur par d\u00c3\u00a9faut : 0)bksl-nl \"\"\"bksl-nl n = len(listepy-unddepy-undpoids)bksl-nl minimumpy-undactuel = 1e99bksl-nl ipy-undminimum = -1bksl-nl for i in range(ipy-unddebut, n):bksl-nl if listepy-unddepy-undpoids[i] < minimumpy-undactuel:bksl-nl minimumpy-undactuel = listepy-unddepy-undpoids[i]bksl-nl ipy-undminimum = ibksl-nl return ipy-undminimumbksl-nl Question 9 \u00c0 partir de l'algorithme de la question 3 et en utilisant la nouvelle version de la fonction trouver_plus_l\u00e9ger , compl\u00e9ter la fonction tri_selection . Aide : pour utiliser un param\u00e8tre optionnel, il suffit de lui donner une valeur. Exemple trouver_plus_l\u00e9ger ([ 11 , 18 , 8 , 63 ]) trouve la plus petite valeur depuis l'indice 0 (valeur par d\u00e9faut 0), donc entre 11, 18, 8 et 63 ; trouver_plus_l\u00e9ger ([ 11 , 18 , 8 , 63 ], 2 ) trouve la plus petite valeur depuis l'indice 2, donc entre 8 et 63. Lancer assert tripy-undselection([1, 3, 2]) == [1, 2, 3]bksl-nlassert tripy-undselection([1, 7, 7, 1]) == [1, 1, 7, 7]bksl-nlassert tripy-undselection([1]) == [1]bksl-nlbksl-nl Valider \u221e/\u221e T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def tripy-undselection(taspy-unddespy-undpoids: list)-> list:bksl-nl \"\"\"bksl-nl R\u00c3\u00a9alise un tri par s\u00c3\u00a9lection simplifi\u00c3\u00a9bksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - taspy-unddespy-undpoids : tableaux d'entiersbksl-nl \"\"\"bksl-nl n = len(taspy-unddespy-undpoids)bksl-nl bksl-nlbksl-nl return taspy-unddespy-undpoidsbksl-nl from docs.scripts.algo2.exo1 import trouverpy-undpluspy-undlegerbksl-nlbksl-nlbksl-nldef tripy-undselection(taspy-unddespy-undpoids: list)-> list:bksl-nl \"\"\"bksl-nl R\u00c3\u00a9alise un tri par s\u00c3\u00a9lection simplifi\u00c3\u00a9bksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - taspy-unddespy-undpoids : tableaux d'entiersbksl-nl \"\"\"bksl-nl n = len(taspy-unddespy-undpoids)bksl-nl for i in range(n):bksl-nl positionpy-unddepy-undlapy-undpluspy-undlegere = trouverpy-undpluspy-undleger(taspy-unddespy-undpoids, i)bksl-nl taspy-unddespy-undpoids[i], taspy-unddespy-undpoids[positionpy-unddepy-undlapy-undpluspy-undlegere] \\bksl-nl = taspy-unddespy-undpoids[positionpy-unddepy-undlapy-undpluspy-undlegere], taspy-unddespy-undpoids[i]bksl-nlbksl-nl return taspy-unddespy-undpoidsbksl-nl N'oubliez pas de tester votre algorithme sur quelques exemples.","title":"Algorithme : tri par s\u00e9lection"},{"location":"algorithmes2/#algorithme-complexite-et-mesure-de-temps","text":"Question 10 Quelle sera la complexit\u00e9 de notre algorithme dans les cas suivants : liste = [4, 2, 8, 7, 9, 3, 11] liste = [11, 8, 6, 4, 2, 1] liste = [1, 4, 5, 6, 9, 13] En d\u00e9duire quel est le pire des cas puis donner la complexit\u00e9 de l'algorithme en notation O. Cette partie est \u00e0 r\u00e9aliser en local sur Thonny. La librairie timeit permet de faire des mesures de vitesse d'ex\u00e9cution. Pour cela, il faut d'abord l'importer \u00e0 l'aide de l'instruction import timeit . timeit s'utilise comme suit : Cr\u00e9er des tableaux de taille 100, 1000, 10000. R\u00e9aliser et afficher quelques mesures de temps d'ex\u00e9cution de votre algorithme na\u00eff ainsi que de votre algorithme de recherche par dichotomie sur ces tableaux. Modifier votre programme de mani\u00e8re \u00e0 enregistrer les r\u00e9sultats des mesures de temps dans deux variables : temps_naif et temps_s\u00e9lection . Exemple de r\u00e9sultat taille_tableau = [ 10 , 100 , 1000 , 10000 ] temps_naif = [] temps_s\u00e9lection = [] # Mesure de temps de calcul # Obtention des r\u00e9sultats. temps_naif = [ 0.0001 , 0.01 , 0.1 , 1.2 ] temps_dichotomique = [ 0.0001 , 0.001 , 0.01 , 0.2 ] On peut r\u00e9aliser des graphiques gr\u00e2ce \u00e0 une librairie appel\u00e9e matplotlib. \u00c0 l'aide d'une recherche, trouver comment fonctionne matplotlib. Nous aurons besoin de l'importation : from matplotlib.pyplot import * . R\u00e9aliser un graphique repr\u00e9sentant vos mesures de temps pour les deux algorithmes en fonction de la taille du tableau. On pourra utiliser une \u00e9chelle logarithmique en abscisse et en ordonn\u00e9es.","title":"Algorithme : complexit\u00e9 et mesure de temps"},{"location":"algorithmes3/","text":"table { border-collapse: collapse; } table, th, td { border: 1px solid black; width:400px; text-align:center; } Algorithmes de tri : tri par insertion \u2693\ufe0e Nous avons \u00e9tudi\u00e9 un premier algorithme de tri la derni\u00e8re s\u00e9ance. Cet algorithme est le tri par s\u00e9lection. Toutefois, cet algorithme est tr\u00e8s inefficace : il nous faut donc trouver un algorithme plus rapide. Le but de ce TP est d'\u00e9tudier un deuxi\u00e8me algorithme de tri classique appel\u00e9 le tri par insertion. Algorithme \"avanc\u00e9\" : tri par insertion \u2693\ufe0e Question 1 Le tri par insertion est fond\u00e9 sur le principe de s\u00e9paration du tableau \u00e0 trier en deux parties : une partie gauche toujours tri\u00e9e ; une partie droite \u00e0 trier. Entre ces deux parties se situe un \u00e9l\u00e9ment fronti\u00e8re que nous allons d\u00e9placer de la partie \u00e0 trier vers la partie tri\u00e9e. Cet \u00e9l\u00e9ment sera plac\u00e9 de telle mani\u00e8re \u00e0 ce que la partie tri\u00e9e reste toujours tri\u00e9e! Exemple On d\u00e9marre du tableau [ 3 , 8 , 2 , 9 , 5 ] . \u00c0 la deuxi\u00e8me \u00e9tape, on est dans cette situation : Partie tri\u00e9e Partie \u00e0 trier Fronti\u00e8re 3 8 2 9 5 \u00c0 la troisi\u00e8me \u00e9tape, on est dans cette situation : Partie tri\u00e9e Partie \u00e0 trier Fronti\u00e8re 3 2 8 9 5 2 3 8 9 5 Que s'est-il pass\u00e9 \u00e0 la premi\u00e8re \u00e9tape ? Expliquez ce que vous allez faire pour trier le tableau de l'exemple selon la m\u00e9thode d\u00e9crite ci-dessus. Prenez le temps de comprendre chaque \u00e9tape \u00e0 l'aide d'une feuille de brouillon. Question 2 \u00c0 partir de la question pr\u00e9c\u00e9dente, essayez d'\u00e9crire un algorithme qui permet de faire le tri par insertion. On ne cherchera pas \u00e0 \u00e9crire cet algorithme en Python et on ne se pr\u00e9occupera pas forc\u00e9ment des petits d\u00e9tails d'impl\u00e9mentation. Question 3 On donne ci-dessous l'algorithme du tri par insertion. n \u2190 nombre d ' \u00e9l\u00e9ments du tableau pour i allant de 1 \u00e0 n-1 inclus: valeur_frontiere \u2190 tableau [ i ] j \u2190 i-1 tant que j> = 0 et valeur_frontiere < tableau [ j ] : tableau [ j+1 ] \u2190 tableau [ j ] j \u2190 j-1 tableau [ j+1 ] \u2190 valeur_frontiere renvoyer tableau Comparez avec votre proposition et identifiez les diff\u00e9rences et les similarit\u00e9s. \u00c0 l'aide d'une feuille et d'un crayon et en recopiant le tableau algorithmique ci-dessous, appliquez cet algorithme sur le tableau T = [10, 3, 7 ,5 ,6, 1]. En particulier, on suivra l'\u00e9volution de T \u00e0 chaque passage dans les diff\u00e9rentes boucles. lignes i valeur_fronti\u00e8re j tableau[j] test tant que tableau[j+1] tableau ... ... ... ... ... ... ... ... Question 4 Montrez que la propri\u00e9t\u00e9 \"quand i prend une valeur k quelconque, les valeurs comprises entre 0 et k du tableau sont toujours tri\u00e9s dans l'ordre croissant\". Une telle propri\u00e9t\u00e9 est appel\u00e9e un invariant de boucle. Conclure sur le fait que notre algorithme r\u00e9alise bien un tri d'un tableau dans l'ordre croissant. Question 5 Convertir l'algorithme en langage Python dans l'\u00e9diteur de code ci-dessous : Lancer from random import randintbksl-nlbksl-nltab1 = [randint(-100, 100) for i in range(10)]bksl-nlbksl-nlassert tripy-undinsertion([1,5,3]) == sorted([1, 3, 5])bksl-nlassert tripy-undinsertion(tab1) == sorted(tab1)bksl-nlassert tripy-undinsertion([]) == []bksl-nlbksl-nl Valider \u221e/\u221e T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def tripy-undinsertion(tableau: list)-> list:bksl-nl \"\"\"bksl-nl R\u00c3\u00a9alise un tri par insertionbksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - tableau : tableau d'entiersbksl-nl \"\"\" bksl-nl bksl-nl return bksl-nlbksl-nlbksl-nldef trouverpy-undpluspy-undleger(listepy-unddepy-undpoids: list) -> list:bksl-nl \"\"\"bksl-nl Trouve la valeur la plus petite d'un tableau d'entiersbksl-nl et renvoie la position de cette valeurbksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - listepy-unddepy-undpoids : tableau d'entiersbksl-nl - ipy-unddebut : param\u00c3\u00a8tre optionnel (valeur par d\u00c3\u00a9faut : 0)bksl-nl \"\"\"bksl-nl n = len(listepy-unddepy-undpoids)bksl-nl minimumpy-undactuel = 1e99bksl-nl ipy-undminimum = -1bksl-nl for i in range(n):bksl-nl if listepy-unddepy-undpoids[i] < minimumpy-undactuel:bksl-nl minimumpy-undactuel = listepy-unddepy-undpoids[i]bksl-nl ipy-undminimum = ibksl-nl return ipy-undminimumbksl-nlbksl-nlbksl-nldef tripy-undselection(taspy-unddespy-undpoids: list)-> list:bksl-nl \"\"\"bksl-nl R\u00c3\u00a9alise un tri par s\u00c3\u00a9lection simplifi\u00c3\u00a9bksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - boitePoids : tableaux d'entiersbksl-nl \"\"\"bksl-nl n = len(taspy-unddespy-undpoids)bksl-nl taspy-unddespy-undpoidspy-undtri\u00c3\u00a9s = []bksl-nl bksl-nl for py-und in range(n):bksl-nl indicepy-undleger = trouverpy-undpluspy-undleger(taspy-unddespy-undpoids)bksl-nl boitepy-undlapy-undpluspy-undlegere = taspy-unddespy-undpoids.pop(indicepy-undleger)bksl-nl taspy-unddespy-undpoidspy-undtri\u00c3\u00a9s.append(boitepy-undlapy-undpluspy-undlegere)bksl-nlbksl-nl return taspy-unddespy-undpoidspy-undtri\u00c3\u00a9sbksl-nl def tripy-undinsertion(tableau: list)-> list:bksl-nl \"\"\"bksl-nl R\u00c3\u00a9alise un tri par insertionbksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - tableau : tableau d'entiersbksl-nl \"\"\" bksl-nl n = len(tableau)bksl-nl for i in range(1, n):bksl-nl valeurpy-undfronti\u00c3\u00a8re = tableau[i]bksl-nl j = i - 1bksl-nl while j>=0 and valeurpy-undfronti\u00c3\u00a8re < tableau[j]:bksl-nl tableau[j + 1] = tableau[j]bksl-nl j = j - 1bksl-nl tableau[j + 1] = valeurpy-undfronti\u00c3\u00a8rebksl-nlbksl-nl return tableaubksl-nlbksl-nlbksl-nldef trouverpy-undpluspy-undleger(listepy-unddepy-undpoids: list) -> list:bksl-nl \"\"\"bksl-nl Trouve la valeur la plus petite d'un tableau d'entiersbksl-nl et renvoie la position de cette valeurbksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - listepy-unddepy-undpoids : tableau d'entiersbksl-nl - ipy-unddebut : param\u00c3\u00a8tre optionnel (valeur par d\u00c3\u00a9faut : 0)bksl-nl \"\"\"bksl-nl n = len(listepy-unddepy-undpoids)bksl-nl minimumpy-undactuel = 1e99bksl-nl ipy-undminimum = -1bksl-nl for i in range(n):bksl-nl if listepy-unddepy-undpoids[i] < minimumpy-undactuel:bksl-nl minimumpy-undactuel = listepy-unddepy-undpoids[i]bksl-nl ipy-undminimum = ibksl-nl return ipy-undminimumbksl-nlbksl-nlbksl-nldef tripy-undselection(taspy-unddespy-undpoids: list)-> list:bksl-nl \"\"\"bksl-nl R\u00c3\u00a9alise un tri par s\u00c3\u00a9lection simplifi\u00c3\u00a9bksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - boitePoids : tableaux d'entiersbksl-nl \"\"\"bksl-nl n = len(taspy-unddespy-undpoids)bksl-nl taspy-unddespy-undpoidspy-undtri\u00c3\u00a9s = []bksl-nl bksl-nl for py-und in range(n):bksl-nl indicepy-undleger = trouverpy-undpluspy-undleger(taspy-unddespy-undpoids)bksl-nl boitepy-undlapy-undpluspy-undlegere = taspy-unddespy-undpoids.pop(indicepy-undleger)bksl-nl taspy-unddespy-undpoidspy-undtri\u00c3\u00a9s.append(boitepy-undlapy-undpluspy-undlegere)bksl-nlbksl-nl return taspy-unddespy-undpoidspy-undtri\u00c3\u00a9sbksl-nl Question 6 Tester votre code Python sur PythonTutor.com pour observer le fonctionnement du programme. On fera des tests par exemple pour les tableaux : tab1 = [ 1 , 5 , 12 , 8 ] tab2 = [ - 3 , - 5 , - 12 , - 1 ] tab3 = [] Algorithme : complexit\u00e9 et mesure de temps \u2693\ufe0e Question 7 Indiquez le nombre d'\u00e9tapes mis par PythonTutor pour trier (par insertion) les cas suivants : L = [4, 2, 8, 7, 9, 3, 11] L = [13, 11, 8, 6, 4, 2, 1] L = [1, 4, 5, 6, 9, 13,15] En d\u00e9duire quel est le pire des cas et le meilleur des cas pour cet algorithme. Quelle est la complexit\u00e9 dans le meilleur des cas ? dans le pire des cas ? Cette partie est \u00e0 r\u00e9aliser en local sur Thonny. La librairie timeit permet de faire des mesures de vitesse d'ex\u00e9cution. Pour cela, il faut d'abord l'importer \u00e0 l'aide de l'instruction import timeit . La librairie timeit permet de faire des mesures de vitesse d'ex\u00e9cution (voir Partie 1 pour une explication plus d\u00e9taill\u00e9e). Python poss\u00e8de une fonction de tri interne. Cette fonction s'appelle sorted et s'utilise ainsi : sorted ([ 10 , 3 , 7 , 5 , 6 , 1 ]) renvoie [ 1 , 3 , 5 , 6 , 7 , 10 ] . Pour trier un tableau dans l'ordre inverse, on va utiliser tab_100_inv = sorted ( tab_100 , reverse = True ) . Cr\u00e9er des tableaux de taille 100, 1000, 10000. Dans le pire des cas, r\u00e9aliser et afficher quelques mesures de temps d'ex\u00e9cution des 3 algorithmes de tri dont nous disposons : tri par s\u00e9lection, tri par insertion et sorted . Modifier votre programme de mani\u00e8re \u00e0 enregistrer les r\u00e9sultats des mesures de temps dans trois tableaux : temps_insertion , temps_sorted et temps_s\u00e9lection . Exemple de r\u00e9sultat taille_tableau = [ 10 , 100 , 1000 , 10000 ] temps_naif = [] temps_s\u00e9lection = [] # Mesure de temps de calcul # Obtention des r\u00e9sultats. temps_naif = [ 0.0001 , 0.01 , 0.1 , 1.2 ] temps_dichotomique = [ 0.0001 , 0.001 , 0.01 , 0.2 ] On peut r\u00e9aliser des graphiques gr\u00e2ce \u00e0 une librairie appel\u00e9e matplotlib. \u00c0 l'aide d'une recherche, trouver comment fonctionne matplotlib. Nous aurons besoin de l'importation : from matplotlib.pyplot import * . R\u00e9aliser un graphique repr\u00e9sentant vos mesures de temps pour les deux algorithmes en fonction de la taille du tableau. On pourra utiliser une \u00e9chelle logarithmique en abscisse et en ordonn\u00e9es.","title":"Algorithme de tri 2"},{"location":"algorithmes3/#algorithmes-de-tri-tri-par-insertion","text":"Nous avons \u00e9tudi\u00e9 un premier algorithme de tri la derni\u00e8re s\u00e9ance. Cet algorithme est le tri par s\u00e9lection. Toutefois, cet algorithme est tr\u00e8s inefficace : il nous faut donc trouver un algorithme plus rapide. Le but de ce TP est d'\u00e9tudier un deuxi\u00e8me algorithme de tri classique appel\u00e9 le tri par insertion.","title":"Algorithmes de tri : tri par insertion"},{"location":"algorithmes3/#algorithme-avance-tri-par-insertion","text":"Question 1 Le tri par insertion est fond\u00e9 sur le principe de s\u00e9paration du tableau \u00e0 trier en deux parties : une partie gauche toujours tri\u00e9e ; une partie droite \u00e0 trier. Entre ces deux parties se situe un \u00e9l\u00e9ment fronti\u00e8re que nous allons d\u00e9placer de la partie \u00e0 trier vers la partie tri\u00e9e. Cet \u00e9l\u00e9ment sera plac\u00e9 de telle mani\u00e8re \u00e0 ce que la partie tri\u00e9e reste toujours tri\u00e9e! Exemple On d\u00e9marre du tableau [ 3 , 8 , 2 , 9 , 5 ] . \u00c0 la deuxi\u00e8me \u00e9tape, on est dans cette situation : Partie tri\u00e9e Partie \u00e0 trier Fronti\u00e8re 3 8 2 9 5 \u00c0 la troisi\u00e8me \u00e9tape, on est dans cette situation : Partie tri\u00e9e Partie \u00e0 trier Fronti\u00e8re 3 2 8 9 5 2 3 8 9 5 Que s'est-il pass\u00e9 \u00e0 la premi\u00e8re \u00e9tape ? Expliquez ce que vous allez faire pour trier le tableau de l'exemple selon la m\u00e9thode d\u00e9crite ci-dessus. Prenez le temps de comprendre chaque \u00e9tape \u00e0 l'aide d'une feuille de brouillon. Question 2 \u00c0 partir de la question pr\u00e9c\u00e9dente, essayez d'\u00e9crire un algorithme qui permet de faire le tri par insertion. On ne cherchera pas \u00e0 \u00e9crire cet algorithme en Python et on ne se pr\u00e9occupera pas forc\u00e9ment des petits d\u00e9tails d'impl\u00e9mentation. Question 3 On donne ci-dessous l'algorithme du tri par insertion. n \u2190 nombre d ' \u00e9l\u00e9ments du tableau pour i allant de 1 \u00e0 n-1 inclus: valeur_frontiere \u2190 tableau [ i ] j \u2190 i-1 tant que j> = 0 et valeur_frontiere < tableau [ j ] : tableau [ j+1 ] \u2190 tableau [ j ] j \u2190 j-1 tableau [ j+1 ] \u2190 valeur_frontiere renvoyer tableau Comparez avec votre proposition et identifiez les diff\u00e9rences et les similarit\u00e9s. \u00c0 l'aide d'une feuille et d'un crayon et en recopiant le tableau algorithmique ci-dessous, appliquez cet algorithme sur le tableau T = [10, 3, 7 ,5 ,6, 1]. En particulier, on suivra l'\u00e9volution de T \u00e0 chaque passage dans les diff\u00e9rentes boucles. lignes i valeur_fronti\u00e8re j tableau[j] test tant que tableau[j+1] tableau ... ... ... ... ... ... ... ... Question 4 Montrez que la propri\u00e9t\u00e9 \"quand i prend une valeur k quelconque, les valeurs comprises entre 0 et k du tableau sont toujours tri\u00e9s dans l'ordre croissant\". Une telle propri\u00e9t\u00e9 est appel\u00e9e un invariant de boucle. Conclure sur le fait que notre algorithme r\u00e9alise bien un tri d'un tableau dans l'ordre croissant. Question 5 Convertir l'algorithme en langage Python dans l'\u00e9diteur de code ci-dessous : Lancer from random import randintbksl-nlbksl-nltab1 = [randint(-100, 100) for i in range(10)]bksl-nlbksl-nlassert tripy-undinsertion([1,5,3]) == sorted([1, 3, 5])bksl-nlassert tripy-undinsertion(tab1) == sorted(tab1)bksl-nlassert tripy-undinsertion([]) == []bksl-nlbksl-nl Valider \u221e/\u221e T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def tripy-undinsertion(tableau: list)-> list:bksl-nl \"\"\"bksl-nl R\u00c3\u00a9alise un tri par insertionbksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - tableau : tableau d'entiersbksl-nl \"\"\" bksl-nl bksl-nl return bksl-nlbksl-nlbksl-nldef trouverpy-undpluspy-undleger(listepy-unddepy-undpoids: list) -> list:bksl-nl \"\"\"bksl-nl Trouve la valeur la plus petite d'un tableau d'entiersbksl-nl et renvoie la position de cette valeurbksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - listepy-unddepy-undpoids : tableau d'entiersbksl-nl - ipy-unddebut : param\u00c3\u00a8tre optionnel (valeur par d\u00c3\u00a9faut : 0)bksl-nl \"\"\"bksl-nl n = len(listepy-unddepy-undpoids)bksl-nl minimumpy-undactuel = 1e99bksl-nl ipy-undminimum = -1bksl-nl for i in range(n):bksl-nl if listepy-unddepy-undpoids[i] < minimumpy-undactuel:bksl-nl minimumpy-undactuel = listepy-unddepy-undpoids[i]bksl-nl ipy-undminimum = ibksl-nl return ipy-undminimumbksl-nlbksl-nlbksl-nldef tripy-undselection(taspy-unddespy-undpoids: list)-> list:bksl-nl \"\"\"bksl-nl R\u00c3\u00a9alise un tri par s\u00c3\u00a9lection simplifi\u00c3\u00a9bksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - boitePoids : tableaux d'entiersbksl-nl \"\"\"bksl-nl n = len(taspy-unddespy-undpoids)bksl-nl taspy-unddespy-undpoidspy-undtri\u00c3\u00a9s = []bksl-nl bksl-nl for py-und in range(n):bksl-nl indicepy-undleger = trouverpy-undpluspy-undleger(taspy-unddespy-undpoids)bksl-nl boitepy-undlapy-undpluspy-undlegere = taspy-unddespy-undpoids.pop(indicepy-undleger)bksl-nl taspy-unddespy-undpoidspy-undtri\u00c3\u00a9s.append(boitepy-undlapy-undpluspy-undlegere)bksl-nlbksl-nl return taspy-unddespy-undpoidspy-undtri\u00c3\u00a9sbksl-nl def tripy-undinsertion(tableau: list)-> list:bksl-nl \"\"\"bksl-nl R\u00c3\u00a9alise un tri par insertionbksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - tableau : tableau d'entiersbksl-nl \"\"\" bksl-nl n = len(tableau)bksl-nl for i in range(1, n):bksl-nl valeurpy-undfronti\u00c3\u00a8re = tableau[i]bksl-nl j = i - 1bksl-nl while j>=0 and valeurpy-undfronti\u00c3\u00a8re < tableau[j]:bksl-nl tableau[j + 1] = tableau[j]bksl-nl j = j - 1bksl-nl tableau[j + 1] = valeurpy-undfronti\u00c3\u00a8rebksl-nlbksl-nl return tableaubksl-nlbksl-nlbksl-nldef trouverpy-undpluspy-undleger(listepy-unddepy-undpoids: list) -> list:bksl-nl \"\"\"bksl-nl Trouve la valeur la plus petite d'un tableau d'entiersbksl-nl et renvoie la position de cette valeurbksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - listepy-unddepy-undpoids : tableau d'entiersbksl-nl - ipy-unddebut : param\u00c3\u00a8tre optionnel (valeur par d\u00c3\u00a9faut : 0)bksl-nl \"\"\"bksl-nl n = len(listepy-unddepy-undpoids)bksl-nl minimumpy-undactuel = 1e99bksl-nl ipy-undminimum = -1bksl-nl for i in range(n):bksl-nl if listepy-unddepy-undpoids[i] < minimumpy-undactuel:bksl-nl minimumpy-undactuel = listepy-unddepy-undpoids[i]bksl-nl ipy-undminimum = ibksl-nl return ipy-undminimumbksl-nlbksl-nlbksl-nldef tripy-undselection(taspy-unddespy-undpoids: list)-> list:bksl-nl \"\"\"bksl-nl R\u00c3\u00a9alise un tri par s\u00c3\u00a9lection simplifi\u00c3\u00a9bksl-nl Param\u00c3\u00a8tres d'entr\u00c3\u00a9e : bksl-nl - boitePoids : tableaux d'entiersbksl-nl \"\"\"bksl-nl n = len(taspy-unddespy-undpoids)bksl-nl taspy-unddespy-undpoidspy-undtri\u00c3\u00a9s = []bksl-nl bksl-nl for py-und in range(n):bksl-nl indicepy-undleger = trouverpy-undpluspy-undleger(taspy-unddespy-undpoids)bksl-nl boitepy-undlapy-undpluspy-undlegere = taspy-unddespy-undpoids.pop(indicepy-undleger)bksl-nl taspy-unddespy-undpoidspy-undtri\u00c3\u00a9s.append(boitepy-undlapy-undpluspy-undlegere)bksl-nlbksl-nl return taspy-unddespy-undpoidspy-undtri\u00c3\u00a9sbksl-nl Question 6 Tester votre code Python sur PythonTutor.com pour observer le fonctionnement du programme. On fera des tests par exemple pour les tableaux : tab1 = [ 1 , 5 , 12 , 8 ] tab2 = [ - 3 , - 5 , - 12 , - 1 ] tab3 = []","title":"Algorithme \"avanc\u00e9\" : tri par insertion"},{"location":"algorithmes3/#algorithme-complexite-et-mesure-de-temps","text":"Question 7 Indiquez le nombre d'\u00e9tapes mis par PythonTutor pour trier (par insertion) les cas suivants : L = [4, 2, 8, 7, 9, 3, 11] L = [13, 11, 8, 6, 4, 2, 1] L = [1, 4, 5, 6, 9, 13,15] En d\u00e9duire quel est le pire des cas et le meilleur des cas pour cet algorithme. Quelle est la complexit\u00e9 dans le meilleur des cas ? dans le pire des cas ? Cette partie est \u00e0 r\u00e9aliser en local sur Thonny. La librairie timeit permet de faire des mesures de vitesse d'ex\u00e9cution. Pour cela, il faut d'abord l'importer \u00e0 l'aide de l'instruction import timeit . La librairie timeit permet de faire des mesures de vitesse d'ex\u00e9cution (voir Partie 1 pour une explication plus d\u00e9taill\u00e9e). Python poss\u00e8de une fonction de tri interne. Cette fonction s'appelle sorted et s'utilise ainsi : sorted ([ 10 , 3 , 7 , 5 , 6 , 1 ]) renvoie [ 1 , 3 , 5 , 6 , 7 , 10 ] . Pour trier un tableau dans l'ordre inverse, on va utiliser tab_100_inv = sorted ( tab_100 , reverse = True ) . Cr\u00e9er des tableaux de taille 100, 1000, 10000. Dans le pire des cas, r\u00e9aliser et afficher quelques mesures de temps d'ex\u00e9cution des 3 algorithmes de tri dont nous disposons : tri par s\u00e9lection, tri par insertion et sorted . Modifier votre programme de mani\u00e8re \u00e0 enregistrer les r\u00e9sultats des mesures de temps dans trois tableaux : temps_insertion , temps_sorted et temps_s\u00e9lection . Exemple de r\u00e9sultat taille_tableau = [ 10 , 100 , 1000 , 10000 ] temps_naif = [] temps_s\u00e9lection = [] # Mesure de temps de calcul # Obtention des r\u00e9sultats. temps_naif = [ 0.0001 , 0.01 , 0.1 , 1.2 ] temps_dichotomique = [ 0.0001 , 0.001 , 0.01 , 0.2 ] On peut r\u00e9aliser des graphiques gr\u00e2ce \u00e0 une librairie appel\u00e9e matplotlib. \u00c0 l'aide d'une recherche, trouver comment fonctionne matplotlib. Nous aurons besoin de l'importation : from matplotlib.pyplot import * . R\u00e9aliser un graphique repr\u00e9sentant vos mesures de temps pour les deux algorithmes en fonction de la taille du tableau. On pourra utiliser une \u00e9chelle logarithmique en abscisse et en ordonn\u00e9es.","title":"Algorithme : complexit\u00e9 et mesure de temps"},{"location":"complexity/","text":"Exercices sur la complexit\u00e9 \u2693\ufe0e Question 1 \u00c9crire un algorithme appel\u00e9 distance : qui renvoie -1 si deux mots ne sont pas de la m\u00eame taille qui renvoie le nombre de lettres diff\u00e9rentes \u00e0 la m\u00eame position sinon. Exemple mentor et montre ont une diff\u00e9rence de 3. bide et aide ont une diff\u00e9rence de 1. Quelle est la complexit\u00e9 de votre algorithme ? Question 2 Quelle est la complexit\u00e9 du programme python ci-dessous, o\u00f9 dictionnaire est un tableau contenant N mots ? def gen_graphe ( dictionnaire ): g = Graphe_dico () for mot_1 in dictionnaire : for mot_2 in dictionnaire : if distance ( mot_1 , mot_2 ) == 1 : g . ajouteArc ( mot1 , mot2 ) return g Question 3 On donne ci-dessous l'algorithme du tri par insertion. n \u2190 nombre d ' \u00e9l\u00e9ments du tableau pour i allant de 1 \u00e0 n-1 inclus: valeur_frontiere \u2190 tableau [ i ] j \u2190 i-1 tant que j> = 0 et valeur_frontiere < tableau [ j ] : tableau [ j+1 ] \u2190 tableau [ j ] j \u2190 j-1 tableau [ j+1 ] \u2190 valeur_frontiere renvoyer tableau D\u00e9crire le principe de fonctionnement de cet algorithme. Quel serait le meilleur des cas ? et la complexit\u00e9 dans ce cas ? Quel serait le pire des cas ? et la complexit\u00e9 dans ce cas ? Question 4 Soit le tableau [2, 4, 6, 8, 12, 16, 17, 22, 67, 87, 112, 141, 155, 167, 178] . Dessiner un arbre repr\u00e9sentant toutes les possibilit\u00e9s lorsque l'on recherche un nombre. En d\u00e9duire la complexit\u00e9 de la recherche dichotomique. Question 5 Quel est le principe de fonctionnement du tri par s\u00e9lection ? Donner sa complexit\u00e9. Question 6 Quelle est la complexit\u00e9 de la fonction suivante : def nb_zeros ( n ): resultat = 0 while n % 10 == 0 : n = n // 10 resultat += 1 return resultat Question 7 Quelle est la complexit\u00e9 de la fonction suivante : def negatif ( image ): '''renvoie le n\u00e9gatif de l'image sous la forme d'une liste de listes''' hauteur_img , largeur_img = hauteur ( image ), largeur ( image ) nouvelle_image = [[ 0 for j in range ( largeur_img )] for i in range ( hauteur_img )] for i in range ( hauteur_img ): for j in range ( largeur_img ): nouvelle_image [ i ][ j ] = 255 - image [ i ][ j ] return nouvelle_image Question 8 Quelle est la complexit\u00e9 de la fonction suivante : def perm_rec ( liste , pris ): if len ( pris ) == len ( liste ): return [ pris . copy ()] else : liste_permutations = [] for element in liste : if element not in pris : pris . append ( element ) for permut in perm_rec ( liste , pris ): liste_permutations . append ( permut ) pris . pop () return liste_permutations","title":"Exercices de complexit\u00e9"},{"location":"complexity/#exercices-sur-la-complexite","text":"Question 1 \u00c9crire un algorithme appel\u00e9 distance : qui renvoie -1 si deux mots ne sont pas de la m\u00eame taille qui renvoie le nombre de lettres diff\u00e9rentes \u00e0 la m\u00eame position sinon. Exemple mentor et montre ont une diff\u00e9rence de 3. bide et aide ont une diff\u00e9rence de 1. Quelle est la complexit\u00e9 de votre algorithme ? Question 2 Quelle est la complexit\u00e9 du programme python ci-dessous, o\u00f9 dictionnaire est un tableau contenant N mots ? def gen_graphe ( dictionnaire ): g = Graphe_dico () for mot_1 in dictionnaire : for mot_2 in dictionnaire : if distance ( mot_1 , mot_2 ) == 1 : g . ajouteArc ( mot1 , mot2 ) return g Question 3 On donne ci-dessous l'algorithme du tri par insertion. n \u2190 nombre d ' \u00e9l\u00e9ments du tableau pour i allant de 1 \u00e0 n-1 inclus: valeur_frontiere \u2190 tableau [ i ] j \u2190 i-1 tant que j> = 0 et valeur_frontiere < tableau [ j ] : tableau [ j+1 ] \u2190 tableau [ j ] j \u2190 j-1 tableau [ j+1 ] \u2190 valeur_frontiere renvoyer tableau D\u00e9crire le principe de fonctionnement de cet algorithme. Quel serait le meilleur des cas ? et la complexit\u00e9 dans ce cas ? Quel serait le pire des cas ? et la complexit\u00e9 dans ce cas ? Question 4 Soit le tableau [2, 4, 6, 8, 12, 16, 17, 22, 67, 87, 112, 141, 155, 167, 178] . Dessiner un arbre repr\u00e9sentant toutes les possibilit\u00e9s lorsque l'on recherche un nombre. En d\u00e9duire la complexit\u00e9 de la recherche dichotomique. Question 5 Quel est le principe de fonctionnement du tri par s\u00e9lection ? Donner sa complexit\u00e9. Question 6 Quelle est la complexit\u00e9 de la fonction suivante : def nb_zeros ( n ): resultat = 0 while n % 10 == 0 : n = n // 10 resultat += 1 return resultat Question 7 Quelle est la complexit\u00e9 de la fonction suivante : def negatif ( image ): '''renvoie le n\u00e9gatif de l'image sous la forme d'une liste de listes''' hauteur_img , largeur_img = hauteur ( image ), largeur ( image ) nouvelle_image = [[ 0 for j in range ( largeur_img )] for i in range ( hauteur_img )] for i in range ( hauteur_img ): for j in range ( largeur_img ): nouvelle_image [ i ][ j ] = 255 - image [ i ][ j ] return nouvelle_image Question 8 Quelle est la complexit\u00e9 de la fonction suivante : def perm_rec ( liste , pris ): if len ( pris ) == len ( liste ): return [ pris . copy ()] else : liste_permutations = [] for element in liste : if element not in pris : pris . append ( element ) for permut in perm_rec ( liste , pris ): liste_permutations . append ( permut ) pris . pop () return liste_permutations","title":"Exercices sur la complexit\u00e9"},{"location":"gui/","text":"Introduction aux GUI (Graphical User Interface) et \u00e0 la programmation \u00e9v\u00e9nementielle \u2693\ufe0e Une courte introduction \u2693\ufe0e tkinter est un module de \u00ab gadgets graphiques \u00bb (widgets - contraction de window et gadget) int\u00e9gr\u00e9 par d\u00e9faut dans Python et d\u2019une grande simplicit\u00e9. Il existe d'autres biblioth\u00e8ques de ce type ( wxPython , pyQT , pygame ...). Un manuel de r\u00e9f\u00e9rence sur tkinter (168 pages en anglais !) est disponible sur Internet (google : tkinter reference guide). Le principe g\u00e9n\u00e9ral est : de cr\u00e9er une fen\u00eatre graphique ; puis de placer et organiser des \u00e9l\u00e9ments (boutons, textes, zones de dessin, etc...) \u00e0 l'int\u00e9rieur de cette fen\u00eatre. Syntaxe Tous les \u00e9l\u00e9ments (fen\u00eatre graphique comprise) sont consid\u00e9r\u00e9s comme des objets que l\u2019on peut modifier \u00e0 l\u2019aide de m\u00e9thodes. C'est le principe de la programmation orient\u00e9e objet (POO) que nous aborderons en Terminale. La syntaxe est la suivante : objet . methode ( parametres_de_la_methode ) . tkinter permet de jongler entre 15 widgets standards ! Nous nous focaliserons sur 4 widgets : Label Entry Button Canvas Premi\u00e8res instructions \u2693\ufe0e Exercice 1 Cr\u00e9ation d'une premi\u00e8re fen\u00eatre : dans Thonny, cr\u00e9er un fichier appel\u00e9 gui01 . py ; importer toutes les fonctions du module tkinter \u00e0 l'aide de la commande import ; cr\u00e9er la fen\u00eatre graphique parent \u00e0 l\u2019aide de l\u2019instruction fen = Tk () ; demander l\u2019affichage de la fen\u00eatre graphique \u00e0 l\u2019aide de l\u2019instruction fen . mainloop () . Question 1 Question 2 Que fait fen = Tk () ? Que fait fen . mainloop () ? Exercice 2 Notre premi\u00e8re fen\u00eatre, bien que tr\u00e8s jolie dans le style Windows 95, ne fait absolument rien. Nous allons modifier gui01 . py . utiliser la m\u00e9thode title sur l\u2019objet fen . La m\u00e9thode title prend comme param\u00e8tres une cha\u00eene de caract\u00e8res: title ( 'Vive Windows 95' ) ; ajouter un texte \u00e0 l\u2019aide du widget Label : tex1 = Label ( fen , text = 'Hello, world!' ) ; faire appara\u00eetre le texte en appelant : tex1 . pack () . Exercice 3 Ajoutons un peu plus de contenu : ajouter un bouton \"Ne sers \u00e0 rien\" \u00e0 l\u2019aide du widget Button. Ce widget fonctionne de la m\u00eame mati\u00e8re que le widget Label. N\u2019oubliez pas le . pack () ! Syntaxe : but1 = Button ( fen , text = 'Ne sera \u00e0 rien' ) ; ajouter un bouton \u00ab Quitter \u00bb \u00e0 l\u2019aide du widget Button. Question R\u00e9ponse Que se passe-t-il quand on clique sur le bouton \u00ab Quitter \u00bb? \u00c9tait-ce pr\u00e9visible ? Certains widgets ont des fonctionnalit\u00e9s accessibles gr\u00e2ce \u00e0 un param\u00e8tre appel\u00e9 command = . Corriger le widget Button en ajoutant command = fen . destroy pour le bouton Quitter. Gestion graphique de la fen\u00eatre \u2693\ufe0e . pack () nous permet de placer automatiquement des objets et de les afficher. Toutefois, nous souhaitons disposer d\u2019un certain contr\u00f4le dans le design de nos fen\u00eatres graphiques. C\u2019est l\u00e0 que la m\u00e9thode . grid () entre en sc\u00e8ne. Exercice 4 [ ] t\u00e9l\u00e9charger le fichier Exemple Grille et le renommer : grid_example . py ; dans Thonny, copier/modifier/supprimer/commenter certaines fonctions inconnues de . grid () et essayer de deviner leur r\u00f4les en ajoutant d'autres fl\u00e8ches sur le sch\u00e9ma ci-dessous.","title":"GUI"},{"location":"gui/#introduction-aux-gui-graphical-user-interface-et-a-la-programmation-evenementielle","text":"","title":"Introduction aux GUI (Graphical User Interface) et \u00e0 la programmation \u00e9v\u00e9nementielle"},{"location":"gui/#une-courte-introduction","text":"tkinter est un module de \u00ab gadgets graphiques \u00bb (widgets - contraction de window et gadget) int\u00e9gr\u00e9 par d\u00e9faut dans Python et d\u2019une grande simplicit\u00e9. Il existe d'autres biblioth\u00e8ques de ce type ( wxPython , pyQT , pygame ...). Un manuel de r\u00e9f\u00e9rence sur tkinter (168 pages en anglais !) est disponible sur Internet (google : tkinter reference guide). Le principe g\u00e9n\u00e9ral est : de cr\u00e9er une fen\u00eatre graphique ; puis de placer et organiser des \u00e9l\u00e9ments (boutons, textes, zones de dessin, etc...) \u00e0 l'int\u00e9rieur de cette fen\u00eatre. Syntaxe Tous les \u00e9l\u00e9ments (fen\u00eatre graphique comprise) sont consid\u00e9r\u00e9s comme des objets que l\u2019on peut modifier \u00e0 l\u2019aide de m\u00e9thodes. C'est le principe de la programmation orient\u00e9e objet (POO) que nous aborderons en Terminale. La syntaxe est la suivante : objet . methode ( parametres_de_la_methode ) . tkinter permet de jongler entre 15 widgets standards ! Nous nous focaliserons sur 4 widgets : Label Entry Button Canvas","title":"Une courte introduction"},{"location":"gui/#premieres-instructions","text":"Exercice 1 Cr\u00e9ation d'une premi\u00e8re fen\u00eatre : dans Thonny, cr\u00e9er un fichier appel\u00e9 gui01 . py ; importer toutes les fonctions du module tkinter \u00e0 l'aide de la commande import ; cr\u00e9er la fen\u00eatre graphique parent \u00e0 l\u2019aide de l\u2019instruction fen = Tk () ; demander l\u2019affichage de la fen\u00eatre graphique \u00e0 l\u2019aide de l\u2019instruction fen . mainloop () . Question 1 Question 2 Que fait fen = Tk () ? Que fait fen . mainloop () ? Exercice 2 Notre premi\u00e8re fen\u00eatre, bien que tr\u00e8s jolie dans le style Windows 95, ne fait absolument rien. Nous allons modifier gui01 . py . utiliser la m\u00e9thode title sur l\u2019objet fen . La m\u00e9thode title prend comme param\u00e8tres une cha\u00eene de caract\u00e8res: title ( 'Vive Windows 95' ) ; ajouter un texte \u00e0 l\u2019aide du widget Label : tex1 = Label ( fen , text = 'Hello, world!' ) ; faire appara\u00eetre le texte en appelant : tex1 . pack () . Exercice 3 Ajoutons un peu plus de contenu : ajouter un bouton \"Ne sers \u00e0 rien\" \u00e0 l\u2019aide du widget Button. Ce widget fonctionne de la m\u00eame mati\u00e8re que le widget Label. N\u2019oubliez pas le . pack () ! Syntaxe : but1 = Button ( fen , text = 'Ne sera \u00e0 rien' ) ; ajouter un bouton \u00ab Quitter \u00bb \u00e0 l\u2019aide du widget Button. Question R\u00e9ponse Que se passe-t-il quand on clique sur le bouton \u00ab Quitter \u00bb? \u00c9tait-ce pr\u00e9visible ? Certains widgets ont des fonctionnalit\u00e9s accessibles gr\u00e2ce \u00e0 un param\u00e8tre appel\u00e9 command = . Corriger le widget Button en ajoutant command = fen . destroy pour le bouton Quitter.","title":"Premi\u00e8res instructions"},{"location":"gui/#gestion-graphique-de-la-fenetre","text":". pack () nous permet de placer automatiquement des objets et de les afficher. Toutefois, nous souhaitons disposer d\u2019un certain contr\u00f4le dans le design de nos fen\u00eatres graphiques. C\u2019est l\u00e0 que la m\u00e9thode . grid () entre en sc\u00e8ne. Exercice 4 [ ] t\u00e9l\u00e9charger le fichier Exemple Grille et le renommer : grid_example . py ; dans Thonny, copier/modifier/supprimer/commenter certaines fonctions inconnues de . grid () et essayer de deviner leur r\u00f4les en ajoutant d'autres fl\u00e8ches sur le sch\u00e9ma ci-dessous.","title":"Gestion graphique de la fen\u00eatre"},{"location":"hack1/","text":"Le clavier \u2693\ufe0e Cela peut sembler b\u00eate mais utiliser un clavier s'apprend... Pourquoi et comment devenir un ninja du clavier ? \u2693\ufe0e Pourquoi le clavier ? De nos jours, on utilise un peu la souris et de plus en plus les interfaces. Alors pourquoi le clavier ? La r\u00e9ponse tient en un mot : efficacit\u00e9 . Petite d\u00e9monstration avec Starcraft : Comment devenir un ninja du clavier ? La recette est simple et se d\u00e9compose en deux \u00e9tapes : il faut donner du sens aux raccourcis que vous utiliser ; il faut pratiquer, pratiquer, pratiquer \u00c0 force de pratique, vous n'allez plus penser aux raccourcis mais aux actions que vous souhaitez faire. Vos mains feront le reste automatiquement. Cours Quelques r\u00e8gles essentielles : dans de nombreux cas, Shift permet de faire l'inverse d'un raccourci d\u00e9j\u00e0 existant (onglet \u00e0 gauche au lieu d'onglet \u00e0 droite par exemple) ; limitez l'usage de la souris au maximum ; utilisez les fl\u00e8ches Up Down Right Left pour vous d\u00e9placer \u00e0 un endroit proche du caret | sur un document. Navigateur et syst\u00e8me d'exploitation \u2693\ufe0e Voici le tableau des raccourcis class\u00e9 par difficult\u00e9 d'utilisation. En fonction du syst\u00e8me d'exploitation, ceux-ci peuvent ne pas fonctionner comme attendu... Raccourci Action Mn\u00e9motechnique Difficult\u00e9 Alt \uff0b Tab Change de programme vers la droite Si Alt reste appuy\u00e9, les programmes disponibles apparaissent et peuvent \u00eatre s\u00e9lectionn\u00e9s avec plusieurs appuis sur Tab . Au repos, votre pouce et votre annulaire gauche touchent ces touches! Shift \uff0b Alt \uff0b Tab Change de programme vers la gauche Si Alt reste appuy\u00e9, les programmes disponibles apparaissent et peuvent \u00eatre s\u00e9lectionn\u00e9s avec plusieurs appuis sur Tab . Au repos, votre auriculaire, votre pouce et votre annulaire gauche touchent ces touches! Bureautique \u2693\ufe0e Voici le tableau des raccourcis class\u00e9 par difficult\u00e9 d'utilisation. Tous ces raccourcis devraient \u00eatre connus et maitris\u00e9s ! Raccourci Action Mn\u00e9motechnique Difficult\u00e9 Ctrl \uff0b X Couper la s\u00e9lection. X \u2192 ressemble \u00e0 des ciseaux Ctrl \uff0b C Copie la s\u00e9lection. C \u2192 copy Ctrl \uff0b V Colle la s\u00e9lection. \u00e0 c\u00f4t\u00e9 de C Ctrl \uff0b A Retourne en d\u00e9but de ligne. a est la premi\u00e8re lettre de l'alphabet Ctrl \uff0b E Va \u00e0 la fin de la ligne. E \u2192 end Alt \uff0b Left Se d\u00e9place d'un mot vers la gauche. Laissez Alt appuy\u00e9 et cliquer sur les fl\u00e8ches pour vous d\u00e9placer librement. Left \u2192 la gauche. Alt \u2192 fais un truc Shift \uff0b Left S\u00e9lectionne le caract\u00e8re \u00e0 gauche du caret. Laissez Shift appuy\u00e9 et cliquer sur les fl\u00e8ches pour vous s\u00e9lectionner librement. Left \u2192 la gauche. Shift s\u00e9lectionne. Shift \uff0b Up S\u00e9lectionne la ligne au-dessus du caret. Up va vers le haut. Shift s\u00e9lectionne. Shift \uff0b Alt \uff0b Left Se d\u00e9place d'un mot \u00e0 gauche du caret et le s\u00e9lectionne. Laissez Shift appuy\u00e9 et cliquer sur Alt \uff0b fl\u00e8che pour s\u00e9lectionner librement mot par mot ou ligne par ligne. Shift s\u00e9lectionne. Alt \uff0b Left se d\u00e9place d'un mot \u00e0 gauche. Remarque Vous pouvez toujours inverser gauche/droite et haut/bas en \u00e9change Left par Right et Up par Down .","title":"Clavier"},{"location":"hack1/#le-clavier","text":"Cela peut sembler b\u00eate mais utiliser un clavier s'apprend...","title":"Le clavier"},{"location":"hack1/#pourquoi-et-comment-devenir-un-ninja-du-clavier","text":"Pourquoi le clavier ? De nos jours, on utilise un peu la souris et de plus en plus les interfaces. Alors pourquoi le clavier ? La r\u00e9ponse tient en un mot : efficacit\u00e9 . Petite d\u00e9monstration avec Starcraft : Comment devenir un ninja du clavier ? La recette est simple et se d\u00e9compose en deux \u00e9tapes : il faut donner du sens aux raccourcis que vous utiliser ; il faut pratiquer, pratiquer, pratiquer \u00c0 force de pratique, vous n'allez plus penser aux raccourcis mais aux actions que vous souhaitez faire. Vos mains feront le reste automatiquement. Cours Quelques r\u00e8gles essentielles : dans de nombreux cas, Shift permet de faire l'inverse d'un raccourci d\u00e9j\u00e0 existant (onglet \u00e0 gauche au lieu d'onglet \u00e0 droite par exemple) ; limitez l'usage de la souris au maximum ; utilisez les fl\u00e8ches Up Down Right Left pour vous d\u00e9placer \u00e0 un endroit proche du caret | sur un document.","title":"Pourquoi et comment devenir un ninja du clavier ?"},{"location":"hack1/#navigateur-et-systeme-dexploitation","text":"Voici le tableau des raccourcis class\u00e9 par difficult\u00e9 d'utilisation. En fonction du syst\u00e8me d'exploitation, ceux-ci peuvent ne pas fonctionner comme attendu... Raccourci Action Mn\u00e9motechnique Difficult\u00e9 Alt \uff0b Tab Change de programme vers la droite Si Alt reste appuy\u00e9, les programmes disponibles apparaissent et peuvent \u00eatre s\u00e9lectionn\u00e9s avec plusieurs appuis sur Tab . Au repos, votre pouce et votre annulaire gauche touchent ces touches! Shift \uff0b Alt \uff0b Tab Change de programme vers la gauche Si Alt reste appuy\u00e9, les programmes disponibles apparaissent et peuvent \u00eatre s\u00e9lectionn\u00e9s avec plusieurs appuis sur Tab . Au repos, votre auriculaire, votre pouce et votre annulaire gauche touchent ces touches!","title":"Navigateur et syst\u00e8me d'exploitation"},{"location":"hack1/#bureautique","text":"Voici le tableau des raccourcis class\u00e9 par difficult\u00e9 d'utilisation. Tous ces raccourcis devraient \u00eatre connus et maitris\u00e9s ! Raccourci Action Mn\u00e9motechnique Difficult\u00e9 Ctrl \uff0b X Couper la s\u00e9lection. X \u2192 ressemble \u00e0 des ciseaux Ctrl \uff0b C Copie la s\u00e9lection. C \u2192 copy Ctrl \uff0b V Colle la s\u00e9lection. \u00e0 c\u00f4t\u00e9 de C Ctrl \uff0b A Retourne en d\u00e9but de ligne. a est la premi\u00e8re lettre de l'alphabet Ctrl \uff0b E Va \u00e0 la fin de la ligne. E \u2192 end Alt \uff0b Left Se d\u00e9place d'un mot vers la gauche. Laissez Alt appuy\u00e9 et cliquer sur les fl\u00e8ches pour vous d\u00e9placer librement. Left \u2192 la gauche. Alt \u2192 fais un truc Shift \uff0b Left S\u00e9lectionne le caract\u00e8re \u00e0 gauche du caret. Laissez Shift appuy\u00e9 et cliquer sur les fl\u00e8ches pour vous s\u00e9lectionner librement. Left \u2192 la gauche. Shift s\u00e9lectionne. Shift \uff0b Up S\u00e9lectionne la ligne au-dessus du caret. Up va vers le haut. Shift s\u00e9lectionne. Shift \uff0b Alt \uff0b Left Se d\u00e9place d'un mot \u00e0 gauche du caret et le s\u00e9lectionne. Laissez Shift appuy\u00e9 et cliquer sur Alt \uff0b fl\u00e8che pour s\u00e9lectionner librement mot par mot ou ligne par ligne. Shift s\u00e9lectionne. Alt \uff0b Left se d\u00e9place d'un mot \u00e0 gauche. Remarque Vous pouvez toujours inverser gauche/droite et haut/bas en \u00e9change Left par Right et Up par Down .","title":"Bureautique"},{"location":"index_tp/","text":"Page d'accueil des TP en ligne \u2693\ufe0e Vendredi 3 d\u00e9cembre 2021 : TP 10 sur les tableaux et fonctions","title":"Accueil TP"},{"location":"index_tp/#page-daccueil-des-tp-en-ligne","text":"Vendredi 3 d\u00e9cembre 2021 : TP 10 sur les tableaux et fonctions","title":"Page d'accueil des TP en ligne"},{"location":"install_ide/","text":"Guide du IDE \u2693\ufe0e Exemple \u2693\ufe0e Un IDE se pr\u00e9sente sous cette forme : D\u00e9roulez-moi ! Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def sommation(T: list) -> int:bksl-nl a = 0bksl-nl for nombre in T:bksl-nl a = a+nombrebksl-nl return abksl-nlbksl-nldef somme(L: list) -> None or int:bksl-nl return sum(L)bksl-nl Il dispose de quatre boutons : Lancer le script : \u25b6\ufe0f T\u00e9l\u00e9charger le script : \u2935\ufe0f T\u00e9l\u00e9verser un script : \u2934\ufe0f Valider le script avec des tests unitaires : \ud83d\udec2 Rappel Tout se fait du c\u00f4t\u00e9 client. Rien n'est envoy\u00e9 au serveur . Prise en main \u2693\ufe0e Par d\u00e9faut, la commande {{IDE('exo2')}} permet de charger un script plac\u00e9 dans docs/scripts/ . Pour une organisation en chapitre, utilisez un chemin relatif. Par exemple : {{IDE('foo/bar/exo2')}} chargera le script exo2.py depuis docs/scripts/foo/bar . Important Le bouton de validation du script \u00e0 l'aide de tests unitaires est pr\u00e9sent uniquement si vous fournissez un fichier test_nom_du_fichier.py pr\u00e9sent dans le m\u00eame r\u00e9pertoire que nom_du_fichier.py . La solution apparait au bout de 5 tests unitaires si vous fournissez un fichier corr_nom_du_fichier.py dans le m\u00eame r\u00e9pertoire que nom_du_fichier.py . Le lancement du script, le t\u00e9l\u00e9chargement et le t\u00e9l\u00e9versement sont pr\u00e9sentes par d\u00e9faut. Format de fichiers Fichier Python Fichier Correction Fichier Juge Le script Python est \u00e9crit de mani\u00e8re classique. Les librairies standards sont accept\u00e9s. Les annotations, m\u00eame complexes, sont normalement accept\u00e9es : merci de me contacter si vous observez des comportements inattendus. Le fichier Python de correction corr_nom_de_script.py est \u00e9crit de mani\u00e8re classique. 1 2 def somme ( L : list [ int ]) -> int : return None if len ( L ) == 0 else sum ( L ) Le fichier de juge en ligne doit contenir une variable appel\u00e9e benchmark , de type list ou tuple : 1) Si l'on souhaite v\u00e9rifier une unique fonction gr\u00e2ce \u00e0 l'\u00e9valuateur de code : 1 On a donc un tableau de chaines de caract\u00e8res qui seront \u00e9valu\u00e9es avec eval () . Attention donc aux caract\u00e8res d'\u00e9chappement. 1) Si l'on souhaite v\u00e9rifier plusieurs fonctions gr\u00e2ce \u00e0 l'\u00e9valuateur de code : 1 2 3 4 b1 = [ 'somme([]) == None' , 'somme([1]) == 1' , 'somme([1,2]) == 3' , 'somme([-1,1]) == 0' ] b2 = [ 'sommation([1]) == 1' , 'sommation([1,2]) == 3' , 'sommation([-1,1]) == 0' ] benchmark = ( b1 , b2 ) On a donc un tableau de tableau de chaines de caract\u00e8res qui seront \u00e9valu\u00e9es avec eval () . Conclusion \u00c0 condition que les fichiers corr_ et test_ soient pr\u00e9sents, {{IDE('foo/bar/truc/muche/fichier')}} g\u00e8re tout seul : l'\u00e9nonc\u00e9, le juge en ligne, les fichiers de correction Technique ! \u2693\ufe0e Pour l'instant, j'ai la grosse flemme d'\u00e9crire cette section. En quelques mots, on cr\u00e9e deux div d\u00e9sign\u00e9 par un num\u00e9ro auto-incr\u00e9ment\u00e9 : < div id = \"editor_6\" > cr\u00e9e la partie \u00e9diteur de texte. Ce div est converti en \u00e9diteur gr\u00e2ce \u00e0 l' \u00e9diteur ACE ; < div id = \"term_editor_6\" > cr\u00e9e la partie Terminal. Le Terminal n'est cr\u00e9\u00e9 qu'au moment de la validation du script ou du juge en ligne. Il est cr\u00e9\u00e9 gr\u00e2ce au plugin Terminal de jQuery par converstion du div (voir section Guide du Terminal). Plein d'exercices ! \u2693\ufe0e Exercices sur la longueur d'un tableau Exercice 1 Exercice 2 Exercice 3 Compl\u00e9tez la fonction longueur afin que celle-ci renvoie la taille d'un tableau L. Lancer benchmark = ['longueur([])==0', 'longueur([1,3,5,5])==4', 'longueur([0]py-str100)==100']bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder L = [5,3,4,1]bksl-nlbksl-nldef longueur(L: list) -> int:bksl-nl return bksl-nl def longueur(L: list) -> int:bksl-nl return len(L)bksl-nl Compl\u00e9tez la fonction longueur_ajout afin que celle-ci renvoie la taille de deux tableaux T1 et T2. Lancer benchmark = ['longueurpy-undajout([], [])==0', 'longueurpy-undajout([1,3,5,5],[])==4', \"longueurpy-undajout([0]\\py-str100, [1]\\py-str20)==120\"]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder T1 = [5,3,4,1]bksl-nlT2 = [1,2]bksl-nlbksl-nldef longueurpy-undajout(T1: list, T2: list) -> int:bksl-nl return bksl-nl def longueurpy-undajout(T1: list, T2: list) -> int:bksl-nl return len(T1) + len(T2)bksl-nl On d\u00e9coupe une phrase \u00e0 l'aide de l'instruction split . Compl\u00e9tez la fonction nombre_mots afin que celle-ci renvoie le nombre de mots s\u00e9par\u00e9 par un espace d'une phrase phrase . Lancer benchmark = ['nombrepy-undmots(\"Mon chien est beau.\") == 4', 'nombrepy-undmots(\"\") == 0', 'nombrepy-undmots(\"L\\'esth\u00c3\u00a8te a des vices que la vertu ignore.\") == 8']bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder adage = \"Mon chien est beau.\"bksl-nlbksl-nldef nombrepy-undmots(phrase: str) -> int:bksl-nl # tableaupy-undmots = bksl-nl return bksl-nl adage = \"Mon chien est beau.\"bksl-nlbksl-nldef nombrepy-undmots(phrase: str) -> int:bksl-nl tableaupy-undmots = phrase.split(' ')bksl-nl return len(tableaupy-undmots) if len(phrase)>0 else 0bksl-nl On peut bien sur enrouler tout cela... Exercices sur la longueur d'un tableau Exercice 1 Exercice 2 Exercice 3 Compl\u00e9tez la fonction longueur afin que celle-ci renvoie la taille d'un tableau L. Lancer benchmark = ['longueur([])==0', 'longueur([1,3,5,5])==4', 'longueur([0]py-str100)==100']bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder L = [5,3,4,1]bksl-nlbksl-nldef longueur(L: list) -> int:bksl-nl return bksl-nl def longueur(L: list) -> int:bksl-nl return len(L)bksl-nl Compl\u00e9tez la fonction longueur_ajout afin que celle-ci renvoie la taille de deux tableaux T1 et T2. Lancer benchmark = ['longueurpy-undajout([], [])==0', 'longueurpy-undajout([1,3,5,5],[])==4', \"longueurpy-undajout([0]\\py-str100, [1]\\py-str20)==120\"]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder T1 = [5,3,4,1]bksl-nlT2 = [1,2]bksl-nlbksl-nldef longueurpy-undajout(T1: list, T2: list) -> int:bksl-nl return bksl-nl def longueurpy-undajout(T1: list, T2: list) -> int:bksl-nl return len(T1) + len(T2)bksl-nl On d\u00e9coupe une phrase \u00e0 l'aide de l'instruction split . Compl\u00e9tez la fonction nombre_mots afin que celle-ci renvoie le nombre de mots s\u00e9par\u00e9 par un espace d'une phrase phrase . Lancer benchmark = ['nombrepy-undmots(\"Mon chien est beau.\") == 4', 'nombrepy-undmots(\"\") == 0', 'nombrepy-undmots(\"L\\'esth\u00c3\u00a8te a des vices que la vertu ignore.\") == 8']bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder adage = \"Mon chien est beau.\"bksl-nlbksl-nldef nombrepy-undmots(phrase: str) -> int:bksl-nl # tableaupy-undmots = bksl-nl return bksl-nl adage = \"Mon chien est beau.\"bksl-nlbksl-nldef nombrepy-undmots(phrase: str) -> int:bksl-nl tableaupy-undmots = phrase.split(' ')bksl-nl return len(tableaupy-undmots) if len(phrase)>0 else 0bksl-nl","title":"Guide du IDE"},{"location":"install_ide/#guide-du-ide","text":"","title":"Guide du IDE"},{"location":"install_ide/#exemple","text":"Un IDE se pr\u00e9sente sous cette forme : D\u00e9roulez-moi ! Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def sommation(T: list) -> int:bksl-nl a = 0bksl-nl for nombre in T:bksl-nl a = a+nombrebksl-nl return abksl-nlbksl-nldef somme(L: list) -> None or int:bksl-nl return sum(L)bksl-nl Il dispose de quatre boutons : Lancer le script : \u25b6\ufe0f T\u00e9l\u00e9charger le script : \u2935\ufe0f T\u00e9l\u00e9verser un script : \u2934\ufe0f Valider le script avec des tests unitaires : \ud83d\udec2 Rappel Tout se fait du c\u00f4t\u00e9 client. Rien n'est envoy\u00e9 au serveur .","title":"Exemple"},{"location":"install_ide/#prise-en-main","text":"Par d\u00e9faut, la commande {{IDE('exo2')}} permet de charger un script plac\u00e9 dans docs/scripts/ . Pour une organisation en chapitre, utilisez un chemin relatif. Par exemple : {{IDE('foo/bar/exo2')}} chargera le script exo2.py depuis docs/scripts/foo/bar . Important Le bouton de validation du script \u00e0 l'aide de tests unitaires est pr\u00e9sent uniquement si vous fournissez un fichier test_nom_du_fichier.py pr\u00e9sent dans le m\u00eame r\u00e9pertoire que nom_du_fichier.py . La solution apparait au bout de 5 tests unitaires si vous fournissez un fichier corr_nom_du_fichier.py dans le m\u00eame r\u00e9pertoire que nom_du_fichier.py . Le lancement du script, le t\u00e9l\u00e9chargement et le t\u00e9l\u00e9versement sont pr\u00e9sentes par d\u00e9faut. Format de fichiers Fichier Python Fichier Correction Fichier Juge Le script Python est \u00e9crit de mani\u00e8re classique. Les librairies standards sont accept\u00e9s. Les annotations, m\u00eame complexes, sont normalement accept\u00e9es : merci de me contacter si vous observez des comportements inattendus. Le fichier Python de correction corr_nom_de_script.py est \u00e9crit de mani\u00e8re classique. 1 2 def somme ( L : list [ int ]) -> int : return None if len ( L ) == 0 else sum ( L ) Le fichier de juge en ligne doit contenir une variable appel\u00e9e benchmark , de type list ou tuple : 1) Si l'on souhaite v\u00e9rifier une unique fonction gr\u00e2ce \u00e0 l'\u00e9valuateur de code : 1 On a donc un tableau de chaines de caract\u00e8res qui seront \u00e9valu\u00e9es avec eval () . Attention donc aux caract\u00e8res d'\u00e9chappement. 1) Si l'on souhaite v\u00e9rifier plusieurs fonctions gr\u00e2ce \u00e0 l'\u00e9valuateur de code : 1 2 3 4 b1 = [ 'somme([]) == None' , 'somme([1]) == 1' , 'somme([1,2]) == 3' , 'somme([-1,1]) == 0' ] b2 = [ 'sommation([1]) == 1' , 'sommation([1,2]) == 3' , 'sommation([-1,1]) == 0' ] benchmark = ( b1 , b2 ) On a donc un tableau de tableau de chaines de caract\u00e8res qui seront \u00e9valu\u00e9es avec eval () . Conclusion \u00c0 condition que les fichiers corr_ et test_ soient pr\u00e9sents, {{IDE('foo/bar/truc/muche/fichier')}} g\u00e8re tout seul : l'\u00e9nonc\u00e9, le juge en ligne, les fichiers de correction","title":"Prise en main"},{"location":"install_ide/#technique","text":"Pour l'instant, j'ai la grosse flemme d'\u00e9crire cette section. En quelques mots, on cr\u00e9e deux div d\u00e9sign\u00e9 par un num\u00e9ro auto-incr\u00e9ment\u00e9 : < div id = \"editor_6\" > cr\u00e9e la partie \u00e9diteur de texte. Ce div est converti en \u00e9diteur gr\u00e2ce \u00e0 l' \u00e9diteur ACE ; < div id = \"term_editor_6\" > cr\u00e9e la partie Terminal. Le Terminal n'est cr\u00e9\u00e9 qu'au moment de la validation du script ou du juge en ligne. Il est cr\u00e9\u00e9 gr\u00e2ce au plugin Terminal de jQuery par converstion du div (voir section Guide du Terminal).","title":"Technique !"},{"location":"install_ide/#plein-dexercices","text":"Exercices sur la longueur d'un tableau Exercice 1 Exercice 2 Exercice 3 Compl\u00e9tez la fonction longueur afin que celle-ci renvoie la taille d'un tableau L. Lancer benchmark = ['longueur([])==0', 'longueur([1,3,5,5])==4', 'longueur([0]py-str100)==100']bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder L = [5,3,4,1]bksl-nlbksl-nldef longueur(L: list) -> int:bksl-nl return bksl-nl def longueur(L: list) -> int:bksl-nl return len(L)bksl-nl Compl\u00e9tez la fonction longueur_ajout afin que celle-ci renvoie la taille de deux tableaux T1 et T2. Lancer benchmark = ['longueurpy-undajout([], [])==0', 'longueurpy-undajout([1,3,5,5],[])==4', \"longueurpy-undajout([0]\\py-str100, [1]\\py-str20)==120\"]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder T1 = [5,3,4,1]bksl-nlT2 = [1,2]bksl-nlbksl-nldef longueurpy-undajout(T1: list, T2: list) -> int:bksl-nl return bksl-nl def longueurpy-undajout(T1: list, T2: list) -> int:bksl-nl return len(T1) + len(T2)bksl-nl On d\u00e9coupe une phrase \u00e0 l'aide de l'instruction split . Compl\u00e9tez la fonction nombre_mots afin que celle-ci renvoie le nombre de mots s\u00e9par\u00e9 par un espace d'une phrase phrase . Lancer benchmark = ['nombrepy-undmots(\"Mon chien est beau.\") == 4', 'nombrepy-undmots(\"\") == 0', 'nombrepy-undmots(\"L\\'esth\u00c3\u00a8te a des vices que la vertu ignore.\") == 8']bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder adage = \"Mon chien est beau.\"bksl-nlbksl-nldef nombrepy-undmots(phrase: str) -> int:bksl-nl # tableaupy-undmots = bksl-nl return bksl-nl adage = \"Mon chien est beau.\"bksl-nlbksl-nldef nombrepy-undmots(phrase: str) -> int:bksl-nl tableaupy-undmots = phrase.split(' ')bksl-nl return len(tableaupy-undmots) if len(phrase)>0 else 0bksl-nl On peut bien sur enrouler tout cela... Exercices sur la longueur d'un tableau Exercice 1 Exercice 2 Exercice 3 Compl\u00e9tez la fonction longueur afin que celle-ci renvoie la taille d'un tableau L. Lancer benchmark = ['longueur([])==0', 'longueur([1,3,5,5])==4', 'longueur([0]py-str100)==100']bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder L = [5,3,4,1]bksl-nlbksl-nldef longueur(L: list) -> int:bksl-nl return bksl-nl def longueur(L: list) -> int:bksl-nl return len(L)bksl-nl Compl\u00e9tez la fonction longueur_ajout afin que celle-ci renvoie la taille de deux tableaux T1 et T2. Lancer benchmark = ['longueurpy-undajout([], [])==0', 'longueurpy-undajout([1,3,5,5],[])==4', \"longueurpy-undajout([0]\\py-str100, [1]\\py-str20)==120\"]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder T1 = [5,3,4,1]bksl-nlT2 = [1,2]bksl-nlbksl-nldef longueurpy-undajout(T1: list, T2: list) -> int:bksl-nl return bksl-nl def longueurpy-undajout(T1: list, T2: list) -> int:bksl-nl return len(T1) + len(T2)bksl-nl On d\u00e9coupe une phrase \u00e0 l'aide de l'instruction split . Compl\u00e9tez la fonction nombre_mots afin que celle-ci renvoie le nombre de mots s\u00e9par\u00e9 par un espace d'une phrase phrase . Lancer benchmark = ['nombrepy-undmots(\"Mon chien est beau.\") == 4', 'nombrepy-undmots(\"\") == 0', 'nombrepy-undmots(\"L\\'esth\u00c3\u00a8te a des vices que la vertu ignore.\") == 8']bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder adage = \"Mon chien est beau.\"bksl-nlbksl-nldef nombrepy-undmots(phrase: str) -> int:bksl-nl # tableaupy-undmots = bksl-nl return bksl-nl adage = \"Mon chien est beau.\"bksl-nlbksl-nldef nombrepy-undmots(phrase: str) -> int:bksl-nl tableaupy-undmots = phrase.split(' ')bksl-nl return len(tableaupy-undmots) if len(phrase)>0 else 0bksl-nl","title":"Plein d'exercices !"},{"location":"install_term/","text":"Guide du Terminal \u2693\ufe0e Exemple \u2693\ufe0e >>> Technique \u2693\ufe0e Techniquement, le terminal est obtenu en utilisant le plugin Terminal de jQuery 1 . On cr\u00e9e un < div > qui poss\u00e8de un identificateur num\u00e9ro (entier commen\u00e7ant \u00e0 1 et auto-incr\u00e9ment\u00e9). Ce < div > est ensuite colori\u00e9 \u00e0 l'aide du plugin Terminal. Technique Un probl\u00e8me provient du focus du terminal. Par d\u00e9faut, le dernier terminal cr\u00e9\u00e9 aura le focus, ce qui souvent nous emm\u00e8ne en bas de page... La solution a \u00e9t\u00e9 de cr\u00e9er deux < div > : Le premier < div > est un simple bloc de texte mimant un Terminal. Il est appel\u00e9 fake_id . Le second < div > contient effectivement le Terminal. Il ne se cr\u00e9era que si l'\u00e9v\u00e9nement onclick du < div id = fake_id > est d\u00e9clench\u00e9. Vraiment tr\u00e8s technique Voir aussi les fonctions pyterm et start_term de interpreter.js . C'est pour cela qu'on ne peut pas se passer de jQuery actuellement. \u21a9","title":"Guide du Terminal"},{"location":"install_term/#guide-du-terminal","text":"","title":"Guide du Terminal"},{"location":"install_term/#exemple","text":">>>","title":"Exemple"},{"location":"install_term/#technique","text":"Techniquement, le terminal est obtenu en utilisant le plugin Terminal de jQuery 1 . On cr\u00e9e un < div > qui poss\u00e8de un identificateur num\u00e9ro (entier commen\u00e7ant \u00e0 1 et auto-incr\u00e9ment\u00e9). Ce < div > est ensuite colori\u00e9 \u00e0 l'aide du plugin Terminal. Technique Un probl\u00e8me provient du focus du terminal. Par d\u00e9faut, le dernier terminal cr\u00e9\u00e9 aura le focus, ce qui souvent nous emm\u00e8ne en bas de page... La solution a \u00e9t\u00e9 de cr\u00e9er deux < div > : Le premier < div > est un simple bloc de texte mimant un Terminal. Il est appel\u00e9 fake_id . Le second < div > contient effectivement le Terminal. Il ne se cr\u00e9era que si l'\u00e9v\u00e9nement onclick du < div id = fake_id > est d\u00e9clench\u00e9. Vraiment tr\u00e8s technique Voir aussi les fonctions pyterm et start_term de interpreter.js . C'est pour cela qu'on ne peut pas se passer de jQuery actuellement. \u21a9","title":"Technique"},{"location":"os/","text":"Syst\u00e8mes d'exploitation \u2693\ufe0e Sujet \u00e0 t\u00e9l\u00e9charger et \u00e0 d\u00e9zipper . \u00c9nonc\u00e9 \u00e0 t\u00e9l\u00e9charger . Python et Terminal \u2693\ufe0e Sujet \u00e0 t\u00e9l\u00e9charger .","title":"OS"},{"location":"os/#systemes-dexploitation","text":"Sujet \u00e0 t\u00e9l\u00e9charger et \u00e0 d\u00e9zipper . \u00c9nonc\u00e9 \u00e0 t\u00e9l\u00e9charger .","title":"Syst\u00e8mes d'exploitation"},{"location":"os/#python-et-terminal","text":"Sujet \u00e0 t\u00e9l\u00e9charger .","title":"Python et Terminal"},{"location":"pi/","text":"Constantes utiles \u2693\ufe0e Le nombre Pi \u2693\ufe0e Voici les 39500 premi\u00e8res d\u00e9cimales de \\(\\pi\\) : D\u00e9cimales de \\(\\pi\\) pi = 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217122680661300192787661119590921642019893809525720106548586327886593615338182796823030195203530185296899577362259941389124972177528347913151557485724245415069595082953311686172785588907509838175463746493931925506040092770167113900984882401285836160356370766010471018194295559619894676783744944825537977472684710404753464620804668425906949129331367702898915210475216205696602405803815019351125338243003558764024749647326391419927260426992279678235478163600934172164121992458631503028618297455570674983850549458858692699569092721079750930295532116534498720275596023648066549911988183479775356636980742654252786255181841757467289097777279380008164706001614524919217321721477235014144197356854816136115735255213347574184946843852332390739414333454776241686251898356948556209921922218427255025425688767179049460165346680498862723279178608578438382796797668145410095388378636095068006422512520511739298489608412848862694560424196528502221066118630674427862203919494504712371378696095636437191728746776465757396241389086583264599581339047802759009946576407895126946839835259570982582262052248940772671947826848260147699090264013639443745530506820349625245174939965143142980919065925093722169646151570985838741059788595977297549893016175392846813826868386894277415599185592524595395943104997252468084598727364469584865383673622262609912460805124388439045124413654976278079771569143599770012961608944169486855584840635342207222582848864815845602850601684273945226746767889525213852254995466672782398645659611635488623057745649803559363456817432411251507606947945109659609402522887971089314566913686722874894056010150330861792868092087476091782493858900971490967598526136554978189312978482168299894872265880485756401427047755513237964145152374623436454285844479526586782105114135473573952311342716610213596953623144295248493718711014576540359027993440374200731057853906219838744780847848968332144571386875194350643021845319104848100537061468067491927819119793995206141966342875444064374512371819217999839101591956181467514269123974894090718649423196156794520809514655022523160388193014209376213785595663893778708303906979207734672218256259966150142150306803844773454920260541466592520149744285073251866600213243408819071048633173464965145390579626856100550810665879699816357473638405257145910289706414011097120628043903975951567715770042033786993600723055876317635942187312514712053292819182618612586732157919841484882916447060957527069572209175671167229109816909152801735067127485832228718352093539657251210835791513698820914442100675103346711031412671113699086585163983150197016515116851714376576183515565088490998985998238734552833163550764791853589322618548963213293308985706420467525907091548141654985946163718027098199430992448895757128289059232332609729971208443357326548938239119325974636673058360414281388303203824903758985243744170291327656180937734440307074692112019130203303801976211011004492932151608424448596376698389522868478312355265821314495768572624334418930396864262434107732269780280731891544110104468232527162010526522721116603966655730925471105578537634668206531098965269186205647693125705863566201855810072936065987648611791045334885034611365768675324944166803962657978771855608455296541266540853061434443185867697514566140680070023787765913440171274947042056223053899456131407112700040785473326993908145466464588079727082668306343285878569830523580893306575740679545716377525420211495576158140025012622859413021647155097925923099079654737612551765675135751782966645477917450112996148903046399471329621073404375189573596145890193897131117904297828564750320319869151402870808599048010941214722131794764777262241425485454033215718530614228813758504306332175182979866223717215916077166925474873898665494945011465406284336639379003976926567214638530673609657120918076383271664162748888007869256029022847210403172118608204190004229661711963779213375751149595015660496318629472654736425230817703675159067350235072835405670403867435136222247715891504953098444893330963408780769325993978054193414473774418426312986080998886874132604721569516239658645730216315981931951673538129741677294786724229246543668009806769282382806899640048243540370141631496589794092432378969070697794223625082216889573837986230015937764716512289357860158816175578297352334460428151262720373431465319777741603199066554187639792933441952154134189948544473456738316249934191318148092777710386387734317720754565453220777092120190516609628049092636019759882816133231666365286193266863360627356763035447762803504507772355471058595487027908143562401451718062464362679456127531813407833033625423278394497538243720583531147711992606381334677687969597030983391307710987040859133746414428227726346594704745878477872019277152807317679077071572134447306057007334924369311383504931631284042512192565179806941135280131470130478164378851852909285452011658393419656213491434159562586586557055269049652098580338507224264829397285847831630577775606888764462482468579260395352773480304802900587607582510474709164396136267604492562742042083208566119062545433721315359584506877246029016187667952406163425225771954291629919306455377991403734043287526288896399587947572917464263574552540790914513571113694109119393251910760208252026187985318877058429725916778131496990090192116971737278476847268608490033770242429165130050051683233643503895170298939223345172201381280696501178440874519601212285993716231301711444846409038906449544400619869075485160263275052983491874078668088183385102283345085048608250393021332197155184306354550076682829493041377655279397517546139539846833936383047461199665385815384205685338621867252334028308711232827892125077126294632295639898989358211674562701021835646220134967151881909730381198004973407239610368540664319395097901906996395524530054505806855019567302292191393391856803449039820595510022635353619204199474553859381023439554495977837790237421617271117236434354394782218185286240851400666044332588856986705431547069657474585503323233421073015459405165537906866273337995851156257843229882737231989875714159578111963583300594087306812160287649628674460477464915995054973742562690104903778198683593814657412680492564879855614537234786733039046883834363465537949864192705638729317487233208376011230299113679386270894387993620162951541337142489283072201269014754668476535761647737946752004907571555278196536213239264061601363581559074220202031872776052772190055614842555187925303435139844253223415762336106425063904975008656271095359194658975141310348227693062474353632569160781547818115284366795706110861533150445212747392454494542368288606134084148637767009612071512491404302725386076482363414334623518975766452164137679690314950191085759844239198629164219399490723623464684411739403265918404437805133389452574239950829659122850855582157250310712570126683024029295252201187267675622041542051618416348475651699981161410100299607838690929160302884002691041407928862150784245167090870006992821206604183718065355672525325675328612910424877618258297651579598470356222629348600341587229805349896502262917487882027342092222453398562647669149055628425039127577102840279980663658254889264880254566101729670266407655904290994568150652653053718294127033693137851786090407086671149655834343476933857817113864558736781230145876871266034891390956200993936103102916161528813843790990423174733639480457593149314052976347574811935670911013775172100803155902485309066920376719220332290943346768514221447737939375170344366199104033751117354719185504644902636551281622882446257591633303910722538374218214088350865739177150968288747826569959957449066175834413752239709683408005355984917541738188399944697486762655165827658483588453142775687900290951702835297163445621296404352311760066510124120065975585127617858382920419748442360800719304576189323492292796501987518721272675079812554709589045563579212210333466974992356302549478024901141952123828153091140790738602515227429958180724716259166854513331239480494707911915326734302824418604142636395480004480026704962482017928964766975831832713142517029692348896276684403232609275249603579964692565049368183609003238092934595889706953653494060340216654437558900456328822505452556405644824651518754711962184439658253375438856909411303150952617937800297412076651479394259029896959469955657612186561967337862362561252163208628692221032748892186543648022967807057656151446320469279068212073883778142335628236089632080682224680122482611771858963814091839036736722208883215137556003727983940041529700287830766709444745601345564172543709069793961225714298946715435784687886144458123145935719849225284716050492212424701412147805734551050080190869960330276347870810817545011930714122339086639383395294257869050764310063835198343893415961318543475464955697810382930971646514384070070736041123735998434522516105070270562352660127648483084076118301305279320542746286540360367453286510570658748822569815793678976697422057505968344086973502014102067235850200724522563265134105592401902742162484391403599895353945909440704691209140938700126456001623742880210927645793106579229552498872758461012648369998922569596881592056001016552563756785667227966198857827948488558343975187445455129656344348039664205579829368043522027709842942325330225763418070394769941597915945300697521482933665556615678736400536665641654732170439035213295435291694145990416087532018683793702348886894791510716378529023452924407736594956305100742108714261349745956151384987137570471017879573104229690666702144986374645952808243694457897723300487647652413390759204340196340391147320233807150952220106825634274716460243354400515212669324934196739770415956837535551667302739007497297363549645332888698440611964961627734495182736955882207573551766515898551909866653935494810688732068599075407923424023009259007017319603622547564789406475483466477604114632339056513433068449539790709030234604614709616968868850140834704054607429586991382966824681857103188790652870366508324319744047718556789348230894310682870272280973624809399627060747264553992539944280811373694338872940630792615959954626246297070625948455690347119729964090894180595343932512362355081349490043642785271383159125689892951964272875739469142725343669415323610045373048819855170659412173524625895487301676002988659257866285612496655235338294287854253404830833070165372285635591525347844598183134112900199920598135220511733658564078264849427644113763938669248031183644536985891754426473998822846218449008777697763127957226726555625962825427653183001340709223343657791601280931794017185985999338492354956400570995585611349802524990669842330173503580440811685526531170995708994273287092584878944364600504108922669178352587078595129834417295351953788553457374260859029081765155780390594640873506123226112009373108048548526357228257682034160504846627750450031262008007998049254853469414697751649327095049346393824322271885159740547021482897111777923761225788734771881968254629812686858170507402725502633290449762778944236216741191862694396506715157795867564823993917604260176338704549901761436412046921823707648878341968968611815581587360629386038101712158552726683008238340465647588040513808016336388742163714064354955618689641122821407533026551004241048967835285882902436709048871181909094945331442182876618103100735477054981596807720094746961343609286148494178501718077930681085469000944589952794243981392135055864221964834915126390128038320010977386806628779239718014613432445726400973742570073592100315415089367930081699805365202760072774967458400283624053460372634165542590276018348403068113818551059797056640075094260878857357960373245141467867036880988060971642584975951380693094494015154222219432913021739125383559150310033303251117491569691745027149433151558854039221640972291011290355218157628232831823425483261119128009282525619020526301639114772473314857391077758744253876117465786711694147764214411112635835538713610110232679877564102468240322648346417663698066378576813492045302240819727856471983963087815432211669122464159117767322532643356861461865452226812688726844596844241610785401676814208088502800541436131462308210259417375623899420757136275167457318918945628352570441335437585753426986994725470316566139919996826282472706413362221789239031760854289437339356188916512504244040089527198378738648058472689546243882343751788520143956005710481194988423906061369573423155907967034614914344788636041031823507365027785908975782727313050488939890099239135033732508559826558670892426124294736701939077271307068691709264625484232407485503660801360466895118400936686095463250021458529309500009071510582362672932645373821049387249966993394246855164832611341461106802674466373343753407642940266829738652209357016263846485285149036293201991996882851718395366913452224447080459239660281715655156566611135982311225062890585491450971575539002439315351909021071194573002438801766150352708626025378817975194780610137150044899172100222013350131060163915415895780371177927752259787428919179155224171895853616805947412341933984202187456492564434623925319531351033114763949119950728584306583619353693296992898379149419394060857248639688369032655643642166442576079147108699843157337496488352927693282207629472823815374099615455987982598910937171262182830258481123890119682214294576675807186538065064870261338928229949725745303328389638184394477077940228435988341003583854238973542439564755568409522484455413923941000162076936368467764130178196593799715574685419463348937484391297423914336593604100352343777065888677811394986164787471407932638587386247328896456435987746676384794665040741118256583788784548581489629612739984134427260860618724554523606431537101127468097787044640947582803487697589483282412392929605829486191966709189580898332012103184303401284951162035342801441276172858302435598300320420245120728725355811958401491809692533950757784000674655260314461670508276827722235341911026341631571474061238504258459884199076112872580591139356896014316682831763235673254170734208173322304629879928049085140947903688786878949305469557030726190095020764334933591060245450864536289354568629585313153371838682656178622736371697577418302398600659148161640494496501173213138957470620884748023653710311508984279927544268532779743113951435741722197597993596852522857452637962896126915723579866205734083757668738842664059909935050008133754324546359675048442352848747014435454195762584735642161981340734685411176688311865448937769795665172796623267148103386439137518659467300244345005449953997423723287124948347060440634716063258306498297955101095418362350303094530973358344628394763047756450150085075789495489313939448992161255255977014368589435858775263796255970816776438001254365023714127834679261019955852247172201777237004178084194239487254068015560359983905489857235467456423905858502167190313952629445543913166313453089390620467843877850542393905247313620129476918749751910114723152893267725339181466073000890277689631148109022097245207591672970078505807171863810549679731001678708506942070922329080703832634534520380278609905569001341371823683709919495164896007550493412678764367463849020639640197666855923356546391383631857456981471962108410809618846054560390384553437291414465134749407848844237721751543342603066988317683310011331086904219390310801437843341513709243530136776310849135161564226984750743032971674696406665315270353254671126675224605511995818319637637076179919192035795820075956053023462677579439363074630569010801149427141009391369138107258137813578940055995001835425118417213605572752210352680373572652792241737360575112788721819084490061780138897107708229310027976659358387589093956881485602632243937265624727760378908144588378550197028437793624078250527048758164703245812908783952324532378960298416692254896497156069811921865849267704039564812781021799132174163058105545988013004845629976511212415363745150056350701278159267142413421033015661653560247338078430286552572227530499988370153487930080626018096238151613669033411113865385109193673938352293458883225508870645075394739520439680790670868064450969865488016828743437861264538158342807530618454859037982179945996811544197425363443996029025100158882721647450068207041937615845471231834600726293395505482395571372568402322682130124767945226448209102356477527230820810635188991526928891084555711266039650343978962782500161101532351605196559042118449499077899920073294769058685778787209829013529566139788848605097860859570177312981553149516814671769597609942100361835591387778176984587581044662839988060061622984861693533738657877359833616133841338536842119789389001852956919678045544828584837011709672125353387586215823101331038776682721157269495181795897546939926421979155233857662316762754757035469941489290413018638611943919628388705436777432242768091323654494853667680000010652624854730558615989991401707698385483188750142938908995068545307651168033373222651756622075269517914422528081651716677667279303548515420402381746089232839170327542575086765511785939500279338959205766827896776445318404041855401043513483895312013263783692835808271937831265496174599705674507183320650345566440344904536275600112501843356073612227659492783937064784264567633881880756561216896050416113903906396016202215368494109260538768871483798955999911209916464644119185682770045742434340216722764455893301277815868695250694993646101756850601671453543158148010545886056455013320375864548584032402987170934809105562116715468484778039447569798042631809917564228098739987669732376957370158080682290459921236616890259627304306793165311494017647376938735140933618332161428021497633991898354848756252987524238730775595559554651963944018218409984124898262367377146722606163364329640633572810707887581640438148501884114318859882769449011932129682715888413386943468285900666408063140777577257056307294004929403024204984165654797367054855804458657202276378404668233798528271057843197535417950113472736257740802134768260450228515797957976474670228409995616015691089038458245026792659420555039587922981852648007068376504183656209455543461351341525700659748819163413595567196496540321872716026485930490397874895890661272507948282769389535217536218507962977851461884327192232238101587444505286652380225328438913752738458923844225354726530981715784478342158223270206902872323300538621634798850946954720047952311201504329322662827276321779088400878614802214753765781058197022263097174950721272484794781695729614236585957820908307332335603484653187302930266596450137183754288975579714499246540386817992138934692447419850973346267933210726868707680626399193619650440995421676278409146698569257150743157407938053239252394775574415918458215625181921552337096074833292349210345146264374498055961033079941453477845746999921285999993996122816152193148887693880222810830019860165494165426169685867883726095877456761825072759929508931805218729246108676399589161458550583972742098090978172932393010676638682404011130402470073508578287246271349463685318154696904669686939254725194139929146524238577625500474852954768147954670070503479995888676950161249722820403039954632788306959762493615101024365553522306906129493885990157346610237122354789112925476961760050479749280607212680392269110277722610254414922157650450812067717357120271802429681062037765788371669091094180744878140490755178203856539099104775941413215432844062503018027571696508209642734841469572639788425600845312140659358090412711359200419759851362547961606322887361813673732445060792441176399759746193835845749159880976674470930065463424234606342374746660804317012600520559284936959414340814685298150539471789004518357551541252235905906872648786357525419112888773717663748602766063496035367947026923229718683277173932361920077745221262475186983349515101986426988784717193966497690708252174233656627259284406204302141137199227852699846988477023238238400556555178890876613601304770984386116870523105531491625172837327286760072481729876375698163354150746088386636406934704372066886512756882661497307886570156850169186474885416791545965072342877306998537139043002665307839877638503238182155355973235306860430106757608389086270498418885951380910304235957824951439885901131858358406674723702971497850841458530857813391562707603563907639473114554958322669457024941398316343323789759556808568362972538679132750555425244919435891284050452269538121791319145135009938463117740179715122837854601160359554028644059024964669307077690554810288502080858008781157738171917417760173307385547580060560143377432990127286772530431825197579167929699650414607066457125888346979796429316229655201687973000356463045793088403274807718115553309098870255052076804630346086581653948769519600440848206596737947316808641564565053004988161649057883115434548505266006982309315777650037807046612647060214575057932709620478256152471459189652236083966456241051955105223572397395128818164059785914279148165426328920042816091369377737222999833270820829699557377273756676155271139225880552018988762011416800546873655806334716037342917039079863965229613128017826797172898229360702880690877686605932527463784053976918480820410219447197138692560841624511239806201131845412447820501107987607171556831540788654390412108730324020106853419472304766667217498698685470767812051247367924791931508564447753798537997322344561227858432968466475133365736923872014647236794278700425032555899268843495928761240075587569464137056251400117971331662071537154360068764773186755871487839890810742953094106059694431584775397009439883949144323536685392099468796450665339857388878661476294434140104988899316005120767810358861166020296119363968213496075011164983278563531614516845769568710900299976984126326650234771672865737857908574664607722834154031144152941880478254387617707904300015669867767957609099669360755949651527363498118964130433116627747123388174060373174397054067031096767657486953587896700319258662594105105335843846560233917967492678447637084749783336555790073841914731988627135259546251816043422537299628632674968240580602964211463864368642247248872834341704415734824818333016405669596688667695634914163284264149745333499994800026699875888159350735781519588990053951208535103572613736403436753471410483601754648830040784641674521673719048310967671134434948192626811107399482506073949507350316901973185211955263563258433909982249862406703107683184466072912487475403161796994113973877658998685541703188477886759290260700432126661791922352093822787888098863359911608192353555704646349113208591897961327913197564909760001399623444553501434642686046449586247690943470482932941404111465409239883444351591332010773944111840741076849810663472410482393582740194493566516108846312567852977697346843030614624180358529331597345830384554103370109167677637427621021370135485445092630719011473184857492331816720721372793556795284439254815609137281284063330393735624200160456645574145881660521666087387480472433912129558777639069690370788285277538940524607584962315743691711317613478388271941686066257210368513215664780014767523103935786068961112599602818393095487090590738613519145918195102973278755710497290114871718971800469616977700179139196137914171627070189584692143436967629274591099400600849835684252019155937037010110497473394938778859894174330317853487076032219829705797511914405109942358830345463534923498268836240433272674155403016195056806541809394099820206099941402168909007082133072308966211977553066591881411915778362729274615618571037217247100952142369648308641025928874579993223749551912219519034244523075351338068568073544649951272031744871954039761073080602699062580760202927314552520780799141842906388443734996814582733720726639176702011830046481900024130835088465841521489912761065137415394356572113903285749187690944137020905170314877734616528798482353382972601361109845148418238081205409961252745808810994869722161285248974255555160763716750548961730168096138038119143611439921063800508321409876045993093248510251682944672606661381517457125597549535802399831469822036133808284993567055755247129027453977621404931820146580080215665360677655087838043041343105918046068008345911366408348874080057412725867047922583191274157390809143831384564241509408491339180968402511639919368532255573389669537490266209232613188558915808324555719484538756287861288590041060060737465014026278240273469625282171749415823317492396835301361786536737606421667781377399510065895288774276626368418306801908046098498094697636673356622829151323527888061577682781595886691802389403330764419124034120223163685778603572769415417788264352381319050280870185750470463129333537572853866058889045831114507739429352019943219711716422350056440429798920815943071670198574692738486538334361457946341759225738985880016980147574205429958012429581054565108310462972829375841611625325625165724980784920998979906200359365099347215829651741357984910471116607915874369865412223483418877229294463351786538567319625598520260729476740726167671455736498121056777168934849176607717052771876011999081441130586455779105256843048114402619384023224709392498029335507318458903553971330884461741079591625117148648744686112476054286734367090466784686702740918810142497111496578177242793470702166882956108777944050484375284433751088282647719785400065097040330218625561473321177711744133502816088403517814525419643203095760186946490886815452856213469883554445602495566684366029221951248309106053772019802183101032704178386654471812603971906884623708575180800353270471856594994761242481109992886791589690495639476246084240659309486215076903149870206735338483495508363660178487710608098042692471324100094640143736032656451845667924566695510015022983307984960799498824970617236744936122622296179081431141466094123415935930958540791390872083227335495720807571651718765994498569379562387555161757543809178052802946420044721539628074636021132942559160025707356281263873310600589106524570802447493754318414940148211999627645310680066311838237616396631809314446712986155275982014514102756006892975024630401735148919457636078935285550531733141645705049964438909363084387448478396168405184527328840323452024705685164657164771393237755172947951261323982296023945485797545865174587877133181387529598094121742273003522965080891777050682592488223221549380483714547816472139768209633205083056479204820859204754998573203888763916019952409189389455767687497308569559580106595265030362661597506622250840674288982659075106375635699682115109496697445805472886936310203678232501823237084597901115484720876182124778132663304120762165873129708112307581598212486398072124078688781145016558251361789030708608701989758898074566439551574153631931919810705753366337380382721527988493503974800158905194208797113080512339332219034662499171691509485414018710603546037946433790058909577211808044657439628061867178610171567409676620802957665770512912099079443046328929473061595104309022214393718495606340561893425130572682914657832933405246350289291754708725648426003496296116541382300773133272983050016025672401418515204189070115428857992081219844931569990591820118197335001261877280368124819958770702075324063612593134385955425477819611429351635612234966615226147353996740515849986035529533292457523888101362023476246690558164389678630976273655047243486430712184943734853006063876445662721866617012381277156213797461498613287441177145524447089971445228856629424402301847912054784985745216346964489738920624019435183100882834802492490854030778638751659113028739587870981007727182718745290139728366148421428717055317965430765045343246005363614726181809699769334862640774351999286863238350887566835950972655748154319401955768504372480010204137498318722596773871549583997184449072791419658459300839426370208756353982169620553248032122674989114026785285996734052420310917978999057188219493913207534317079800237365909853755202389116434671855829068537118979526262344924833924963424497146568465912489185566295893299090352392333336474352037077010108438800329075983421701855422838616172104176030116459187805393674474720599850235828918336929223373239994804371084196594731626548257480994825099918330069765693671596893644933488647442135008407006608835972350395323401795825570360169369909886711321097988970705172807558551912699306730992507040702455685077867906947661262980822516331363995211709845280926303759224267425755998928927837047444521893632034894155210445972618838003006776179313813991620580627016510244588692476492468919246121253102757313908404700071435613623169923716948481325542009145304103713545329662063921054798243921251725401323149027405858920632175894943454890684639931375709103463327141531622328055229729795380188016285907357295541627886764982741861642187898857410716490691918511628152854867941736389066538857642291583425006736124538491606741373401735727799563410433268835695078149313780073623541800706191802673285511919426760912210359874692411728374931261633950012395992405084543756985079570462226646190001035004901830341535458428337643781119885563187777925372011667185395418359844383052037628194407615941068207169703022851522505731260930468984234331527321313612165828080752126315477306044237747535059522871744026663891488171730864361113890694202790881431194487994171540421034121908470940802540239329429454938786402305129271190975135360009219711054120966831115163287054230284700731206580326264171161659576132723515666625366727189985341998952368848309993027574199164638414270779887088742292770538912271724863220288984251252872178260305009945108247835729056919885554678860794628053712270424665431921452817607414824038278358297193010178883456741678113989547504483393146896307633966572267270433932167454218245570625247972199786685427989779923395790575818906225254735822052364248507834071101449804787266919901864388229323053823185597328697809222535295910173414073348847610055640182423921926950620831838145469839236646136398910121021770959767049083050818547041946643713122996923588953849301363565761861060622287055994233716310212784574464639897381885667462608794820186474876727272220626764653380998019668836809941590757768526398651462533363124505364026105696055131838131742611844201890888531963569869627950367384243130113317533053298020166888174813429886815855778103432317530647849832106297184251843855344276201282345707169885305183261796411785796088881503296022907056144762209150947390359466469162353968092013945781758910889319921122600739281491694816152738427362642980982340632002440244958944561291670495082358124873917996486411334803247577752197089327722623494860150466526814398770516153170266969297049283162855042128981467061953319702695072143782304768752802873541261663917082459251700107141808548006369232594620190022780874098597719218051585321473926532515590354102092846659252999143537918253145452905984158176370589279069098969111643811878094353715213322614436253144901274547726957393934815469163116249288735747188240715039950094467319543161938554852076657388251396391635767231510055560372633948672082078086537349424401157996675073607111593513319591971209489647175530245313647709420946356969822266737752099451684506436238242118535348879893956731878066061078854400055082765703055874485418057788917192078814233511386629296671796434687600770479995378833878703487180218424373421122739402557176908196030920182401884270570460926225641783752652633583242406612533115294234579655695025068100183109004112453790153329661569705223792103257069370510908307894799990049993953221536227484766036136776979785673865846709366795885837887956259464648913766521995882869338018360119323685785585581955560421562508836502033220245137621582046181067051953306530606065010548871672453779428313388716313955969058320834168984760656071183471362181232462272588419902861420872849568796393254642853430753011052857138296437099903569488852851904029560473461311382638788975517885604249987483163828040468486189381895905420398898726506976202019955484126500053944282039301274816381585303964399254702016727593285743666616441109625663373054092195196751483287348089574777752783442210910731113518280460363471981856555729571447476825528578633493428584231187494400032296906977583159038580393535213588600796003420975473922967333106493956018122378128545843176055617338611267347807458506760630482294096530411183066710818930311088717281675195796753471885372293096161432040063813224658411111577583585811350185690478153689381377184728147519983505047812977185990847076219746058874232569958288925350419379582606162118423687685114183160683158679946016520577405294230536017803133572632670547903384012573059123396018801378254219270947673371919872873852480574212489211834708766296672072723256505651293331260595057777275424712416483128329820723617505746738701282095755443059683955556868611883971355220844528526400812520276655576774959696266126045652456840861392382657685833846984997787267065551918544686984694784957346226062942196245570853712727765230989554501930377321666491825781546772920052126671434632096378918523232150189761260343736840671941930377468809992968775824410478781232662531818459604538535438391144967753128642609252115376732588667226040425234910870269580996475958057946639734190640100363619040420331135793365424263035614570090112448008900208014780566037101541223288914657223931450760716706435568274377439657890679726874384730763464516775621030986040927170909512808630902973850445271828927496892121066700816485833955377359191369501531620189088874842107987068991148046692706509407620465027725286507289053285485614331608126930056937854178610969692025388650345771831766868859236814884752764984688219497397297077371871884004143231276365048145311228509900207424092558592529261030210673681543470152523487863516439762358604191941296976904052648323470099111542426012734380220893310966863678986949779940012601642276092608234930411806438291383473546797253992623387915829984864592717340592256207491053085315371829116816372193951887009577881815868504645076993439409874335144316263303172477474868979182092394808331439708406730840795893581089665647758599055637695252326536144247802308268118310377358870892406130313364773710116282146146616794040905186152603600925219472188909181073358719641421444786548995285823439470500798303885388608310357193060027711945580219119428999227223534587075662469261776631788551443502182870266856106650035310502163182060176092179846849368631612937279518730789726373537171502563787335797718081848784588665043358243770041477104149349274384575871071597315594394264125702709651251081155482479394035976811881172824721582501094960966253933953809221955919181885526780621499231727631632183398969380756168559117529984501320671293924041445938623988093812404521914848316462101473891825101090967738690664041589736104764365000680771056567184862814963711188321924456639458144914861655004956769826903089111856879869294705135248160917432430153836847072928989828460222373014526556798986277679680914697983782687643115988321090437156112997665215396354644208691975673700057387649784376862876817924974694384274652563163230055513041742273416464551278127845777724575203865437542828256714128858345444351325620544642410110379554641905811686230596447695870540721419852121067343324107567675758184569906930460475227701670056845439692340417110898889934163505851578873534308155208117720718803791040469830695786854739376564336319797868036718730796939242363214484503547763156702553900654231179201534649779290662415083288583952905426376876689688050333172278001858850697362324038947004718976193473443084374437599250341788079722358591342458131440498477017323616947197657153531977549971627856631190469126091825912498903676541769799036237552865263757337635269693443544004730671988689019681474287677908669796885225016369498567302175231325292653758964151714795595387842784998664563028788319620998304945198743963690706827626574858104391122326187940599415540632701319898957037611053236062986748037791537675115830432084987209202809297526498125691634250005229088726469252846661046653921714820801305022980526378364269597337070539227891535105688839381132497570713310295044303467159894487868471164383280506925077662745001220035262037094660234146489983902525888301486781621967751945831677187627572005054397944124599007711520515461993050983869825428464072555409274031325716326407929341833421470904125425335232480219322770753555467958716383587501815933871742360615511710131235256334858203651461418700492057043720182617331947157008675785393360786227395581857975872587441025420771054753612940474601000940954449596628814869159038990718659805636171376922272907641977551777201042764969496110562205925024202177042696221549587264539892276976603105249808557594716310758701332088614632664125911486338812202844406941694882615295776253250198703598706743804698219420563812558334364219492322759372212890564209430823525440841108645453694049692714940033197828613181861888111184082578659287574263844500599442295685864604810330153889114994869354360302218109434667640000223625505736312946262960961987605642599639461386923308371962659547392346241345977957485246478379807956931986508159776753505539189911513352522987361127791827485420086895396583594219633315028695611920122988898870060799927954111882690230789131076036176347794894320321027733594169086500719328040171638406449878717537567811853213284082165711075495282949749362146082155832056872321855740651610962748743750980922302116099826330339154694946444910045152809250897450748967603240907689836529406579201983152654106581368237919840906457124689484702093577611931399802468134052003947819498662026240089021501661638135383815150377350229660746279529103840686855690701575166241929872444827194293310048548244545807188976330032325258215812803274679620028147624318286221710543528983482082734516801861317195933247110746622285087106661177034653528395776259977446721857158161264111432717943478859908928084866949141390977167369002777585026866465405659503948678411107901161040085727445629384254941675946054871172359464291058509099502149587931121961359083158826206823321561530868337308381732793281969838750870834838804638847844188400318471269745437093732983624028751979208023218787448828728437273780178270080587824107493575148899789117397461293203510814327032514090304874622629423443275712600866425083331876886507564292716055252895449215376517514921963671810494353178583834538652556566406572513635750643532365089367904317025978781771903148679638408288102094614900797151377170990619549696400708676671023300486726314755105372317571143223174114116806228642063889062101923552235467116621374996932693217370431059872250394565749246169782609702533594750209138366737728944386964000281103440260847128990007468077648440887113413525033678773167977093727786821661178653442317322646378476978751443320953400016506921305464768909850502030150448808342618452087305309731894929164253229336124315143065782640702838984098416029503092418971209716016492656134134334222988279099217860426798124572853458013382609958771781131021673402565627440072968340661984806766158050216918337236803990279316064204368120799003162644491461902194582296909921227885539487835383056468648816555622943156731282743908264506116289428035016613366978240","title":"Constantes"},{"location":"pi/#constantes-utiles","text":"","title":"Constantes utiles"},{"location":"pi/#le-nombre-pi","text":"Voici les 39500 premi\u00e8res d\u00e9cimales de \\(\\pi\\) : D\u00e9cimales de \\(\\pi\\) pi = 3.14159265358979323846264338327950288419716939937510582097494459230781640628620899862803482534211706798214808651328230664709384460955058223172535940812848111745028410270193852110555964462294895493038196442881097566593344612847564823378678316527120190914564856692346034861045432664821339360726024914127372458700660631558817488152092096282925409171536436789259036001133053054882046652138414695194151160943305727036575959195309218611738193261179310511854807446237996274956735188575272489122793818301194912983367336244065664308602139494639522473719070217986094370277053921717629317675238467481846766940513200056812714526356082778577134275778960917363717872146844090122495343014654958537105079227968925892354201995611212902196086403441815981362977477130996051870721134999999837297804995105973173281609631859502445945534690830264252230825334468503526193118817101000313783875288658753320838142061717766914730359825349042875546873115956286388235378759375195778185778053217122680661300192787661119590921642019893809525720106548586327886593615338182796823030195203530185296899577362259941389124972177528347913151557485724245415069595082953311686172785588907509838175463746493931925506040092770167113900984882401285836160356370766010471018194295559619894676783744944825537977472684710404753464620804668425906949129331367702898915210475216205696602405803815019351125338243003558764024749647326391419927260426992279678235478163600934172164121992458631503028618297455570674983850549458858692699569092721079750930295532116534498720275596023648066549911988183479775356636980742654252786255181841757467289097777279380008164706001614524919217321721477235014144197356854816136115735255213347574184946843852332390739414333454776241686251898356948556209921922218427255025425688767179049460165346680498862723279178608578438382796797668145410095388378636095068006422512520511739298489608412848862694560424196528502221066118630674427862203919494504712371378696095636437191728746776465757396241389086583264599581339047802759009946576407895126946839835259570982582262052248940772671947826848260147699090264013639443745530506820349625245174939965143142980919065925093722169646151570985838741059788595977297549893016175392846813826868386894277415599185592524595395943104997252468084598727364469584865383673622262609912460805124388439045124413654976278079771569143599770012961608944169486855584840635342207222582848864815845602850601684273945226746767889525213852254995466672782398645659611635488623057745649803559363456817432411251507606947945109659609402522887971089314566913686722874894056010150330861792868092087476091782493858900971490967598526136554978189312978482168299894872265880485756401427047755513237964145152374623436454285844479526586782105114135473573952311342716610213596953623144295248493718711014576540359027993440374200731057853906219838744780847848968332144571386875194350643021845319104848100537061468067491927819119793995206141966342875444064374512371819217999839101591956181467514269123974894090718649423196156794520809514655022523160388193014209376213785595663893778708303906979207734672218256259966150142150306803844773454920260541466592520149744285073251866600213243408819071048633173464965145390579626856100550810665879699816357473638405257145910289706414011097120628043903975951567715770042033786993600723055876317635942187312514712053292819182618612586732157919841484882916447060957527069572209175671167229109816909152801735067127485832228718352093539657251210835791513698820914442100675103346711031412671113699086585163983150197016515116851714376576183515565088490998985998238734552833163550764791853589322618548963213293308985706420467525907091548141654985946163718027098199430992448895757128289059232332609729971208443357326548938239119325974636673058360414281388303203824903758985243744170291327656180937734440307074692112019130203303801976211011004492932151608424448596376698389522868478312355265821314495768572624334418930396864262434107732269780280731891544110104468232527162010526522721116603966655730925471105578537634668206531098965269186205647693125705863566201855810072936065987648611791045334885034611365768675324944166803962657978771855608455296541266540853061434443185867697514566140680070023787765913440171274947042056223053899456131407112700040785473326993908145466464588079727082668306343285878569830523580893306575740679545716377525420211495576158140025012622859413021647155097925923099079654737612551765675135751782966645477917450112996148903046399471329621073404375189573596145890193897131117904297828564750320319869151402870808599048010941214722131794764777262241425485454033215718530614228813758504306332175182979866223717215916077166925474873898665494945011465406284336639379003976926567214638530673609657120918076383271664162748888007869256029022847210403172118608204190004229661711963779213375751149595015660496318629472654736425230817703675159067350235072835405670403867435136222247715891504953098444893330963408780769325993978054193414473774418426312986080998886874132604721569516239658645730216315981931951673538129741677294786724229246543668009806769282382806899640048243540370141631496589794092432378969070697794223625082216889573837986230015937764716512289357860158816175578297352334460428151262720373431465319777741603199066554187639792933441952154134189948544473456738316249934191318148092777710386387734317720754565453220777092120190516609628049092636019759882816133231666365286193266863360627356763035447762803504507772355471058595487027908143562401451718062464362679456127531813407833033625423278394497538243720583531147711992606381334677687969597030983391307710987040859133746414428227726346594704745878477872019277152807317679077071572134447306057007334924369311383504931631284042512192565179806941135280131470130478164378851852909285452011658393419656213491434159562586586557055269049652098580338507224264829397285847831630577775606888764462482468579260395352773480304802900587607582510474709164396136267604492562742042083208566119062545433721315359584506877246029016187667952406163425225771954291629919306455377991403734043287526288896399587947572917464263574552540790914513571113694109119393251910760208252026187985318877058429725916778131496990090192116971737278476847268608490033770242429165130050051683233643503895170298939223345172201381280696501178440874519601212285993716231301711444846409038906449544400619869075485160263275052983491874078668088183385102283345085048608250393021332197155184306354550076682829493041377655279397517546139539846833936383047461199665385815384205685338621867252334028308711232827892125077126294632295639898989358211674562701021835646220134967151881909730381198004973407239610368540664319395097901906996395524530054505806855019567302292191393391856803449039820595510022635353619204199474553859381023439554495977837790237421617271117236434354394782218185286240851400666044332588856986705431547069657474585503323233421073015459405165537906866273337995851156257843229882737231989875714159578111963583300594087306812160287649628674460477464915995054973742562690104903778198683593814657412680492564879855614537234786733039046883834363465537949864192705638729317487233208376011230299113679386270894387993620162951541337142489283072201269014754668476535761647737946752004907571555278196536213239264061601363581559074220202031872776052772190055614842555187925303435139844253223415762336106425063904975008656271095359194658975141310348227693062474353632569160781547818115284366795706110861533150445212747392454494542368288606134084148637767009612071512491404302725386076482363414334623518975766452164137679690314950191085759844239198629164219399490723623464684411739403265918404437805133389452574239950829659122850855582157250310712570126683024029295252201187267675622041542051618416348475651699981161410100299607838690929160302884002691041407928862150784245167090870006992821206604183718065355672525325675328612910424877618258297651579598470356222629348600341587229805349896502262917487882027342092222453398562647669149055628425039127577102840279980663658254889264880254566101729670266407655904290994568150652653053718294127033693137851786090407086671149655834343476933857817113864558736781230145876871266034891390956200993936103102916161528813843790990423174733639480457593149314052976347574811935670911013775172100803155902485309066920376719220332290943346768514221447737939375170344366199104033751117354719185504644902636551281622882446257591633303910722538374218214088350865739177150968288747826569959957449066175834413752239709683408005355984917541738188399944697486762655165827658483588453142775687900290951702835297163445621296404352311760066510124120065975585127617858382920419748442360800719304576189323492292796501987518721272675079812554709589045563579212210333466974992356302549478024901141952123828153091140790738602515227429958180724716259166854513331239480494707911915326734302824418604142636395480004480026704962482017928964766975831832713142517029692348896276684403232609275249603579964692565049368183609003238092934595889706953653494060340216654437558900456328822505452556405644824651518754711962184439658253375438856909411303150952617937800297412076651479394259029896959469955657612186561967337862362561252163208628692221032748892186543648022967807057656151446320469279068212073883778142335628236089632080682224680122482611771858963814091839036736722208883215137556003727983940041529700287830766709444745601345564172543709069793961225714298946715435784687886144458123145935719849225284716050492212424701412147805734551050080190869960330276347870810817545011930714122339086639383395294257869050764310063835198343893415961318543475464955697810382930971646514384070070736041123735998434522516105070270562352660127648483084076118301305279320542746286540360367453286510570658748822569815793678976697422057505968344086973502014102067235850200724522563265134105592401902742162484391403599895353945909440704691209140938700126456001623742880210927645793106579229552498872758461012648369998922569596881592056001016552563756785667227966198857827948488558343975187445455129656344348039664205579829368043522027709842942325330225763418070394769941597915945300697521482933665556615678736400536665641654732170439035213295435291694145990416087532018683793702348886894791510716378529023452924407736594956305100742108714261349745956151384987137570471017879573104229690666702144986374645952808243694457897723300487647652413390759204340196340391147320233807150952220106825634274716460243354400515212669324934196739770415956837535551667302739007497297363549645332888698440611964961627734495182736955882207573551766515898551909866653935494810688732068599075407923424023009259007017319603622547564789406475483466477604114632339056513433068449539790709030234604614709616968868850140834704054607429586991382966824681857103188790652870366508324319744047718556789348230894310682870272280973624809399627060747264553992539944280811373694338872940630792615959954626246297070625948455690347119729964090894180595343932512362355081349490043642785271383159125689892951964272875739469142725343669415323610045373048819855170659412173524625895487301676002988659257866285612496655235338294287854253404830833070165372285635591525347844598183134112900199920598135220511733658564078264849427644113763938669248031183644536985891754426473998822846218449008777697763127957226726555625962825427653183001340709223343657791601280931794017185985999338492354956400570995585611349802524990669842330173503580440811685526531170995708994273287092584878944364600504108922669178352587078595129834417295351953788553457374260859029081765155780390594640873506123226112009373108048548526357228257682034160504846627750450031262008007998049254853469414697751649327095049346393824322271885159740547021482897111777923761225788734771881968254629812686858170507402725502633290449762778944236216741191862694396506715157795867564823993917604260176338704549901761436412046921823707648878341968968611815581587360629386038101712158552726683008238340465647588040513808016336388742163714064354955618689641122821407533026551004241048967835285882902436709048871181909094945331442182876618103100735477054981596807720094746961343609286148494178501718077930681085469000944589952794243981392135055864221964834915126390128038320010977386806628779239718014613432445726400973742570073592100315415089367930081699805365202760072774967458400283624053460372634165542590276018348403068113818551059797056640075094260878857357960373245141467867036880988060971642584975951380693094494015154222219432913021739125383559150310033303251117491569691745027149433151558854039221640972291011290355218157628232831823425483261119128009282525619020526301639114772473314857391077758744253876117465786711694147764214411112635835538713610110232679877564102468240322648346417663698066378576813492045302240819727856471983963087815432211669122464159117767322532643356861461865452226812688726844596844241610785401676814208088502800541436131462308210259417375623899420757136275167457318918945628352570441335437585753426986994725470316566139919996826282472706413362221789239031760854289437339356188916512504244040089527198378738648058472689546243882343751788520143956005710481194988423906061369573423155907967034614914344788636041031823507365027785908975782727313050488939890099239135033732508559826558670892426124294736701939077271307068691709264625484232407485503660801360466895118400936686095463250021458529309500009071510582362672932645373821049387249966993394246855164832611341461106802674466373343753407642940266829738652209357016263846485285149036293201991996882851718395366913452224447080459239660281715655156566611135982311225062890585491450971575539002439315351909021071194573002438801766150352708626025378817975194780610137150044899172100222013350131060163915415895780371177927752259787428919179155224171895853616805947412341933984202187456492564434623925319531351033114763949119950728584306583619353693296992898379149419394060857248639688369032655643642166442576079147108699843157337496488352927693282207629472823815374099615455987982598910937171262182830258481123890119682214294576675807186538065064870261338928229949725745303328389638184394477077940228435988341003583854238973542439564755568409522484455413923941000162076936368467764130178196593799715574685419463348937484391297423914336593604100352343777065888677811394986164787471407932638587386247328896456435987746676384794665040741118256583788784548581489629612739984134427260860618724554523606431537101127468097787044640947582803487697589483282412392929605829486191966709189580898332012103184303401284951162035342801441276172858302435598300320420245120728725355811958401491809692533950757784000674655260314461670508276827722235341911026341631571474061238504258459884199076112872580591139356896014316682831763235673254170734208173322304629879928049085140947903688786878949305469557030726190095020764334933591060245450864536289354568629585313153371838682656178622736371697577418302398600659148161640494496501173213138957470620884748023653710311508984279927544268532779743113951435741722197597993596852522857452637962896126915723579866205734083757668738842664059909935050008133754324546359675048442352848747014435454195762584735642161981340734685411176688311865448937769795665172796623267148103386439137518659467300244345005449953997423723287124948347060440634716063258306498297955101095418362350303094530973358344628394763047756450150085075789495489313939448992161255255977014368589435858775263796255970816776438001254365023714127834679261019955852247172201777237004178084194239487254068015560359983905489857235467456423905858502167190313952629445543913166313453089390620467843877850542393905247313620129476918749751910114723152893267725339181466073000890277689631148109022097245207591672970078505807171863810549679731001678708506942070922329080703832634534520380278609905569001341371823683709919495164896007550493412678764367463849020639640197666855923356546391383631857456981471962108410809618846054560390384553437291414465134749407848844237721751543342603066988317683310011331086904219390310801437843341513709243530136776310849135161564226984750743032971674696406665315270353254671126675224605511995818319637637076179919192035795820075956053023462677579439363074630569010801149427141009391369138107258137813578940055995001835425118417213605572752210352680373572652792241737360575112788721819084490061780138897107708229310027976659358387589093956881485602632243937265624727760378908144588378550197028437793624078250527048758164703245812908783952324532378960298416692254896497156069811921865849267704039564812781021799132174163058105545988013004845629976511212415363745150056350701278159267142413421033015661653560247338078430286552572227530499988370153487930080626018096238151613669033411113865385109193673938352293458883225508870645075394739520439680790670868064450969865488016828743437861264538158342807530618454859037982179945996811544197425363443996029025100158882721647450068207041937615845471231834600726293395505482395571372568402322682130124767945226448209102356477527230820810635188991526928891084555711266039650343978962782500161101532351605196559042118449499077899920073294769058685778787209829013529566139788848605097860859570177312981553149516814671769597609942100361835591387778176984587581044662839988060061622984861693533738657877359833616133841338536842119789389001852956919678045544828584837011709672125353387586215823101331038776682721157269495181795897546939926421979155233857662316762754757035469941489290413018638611943919628388705436777432242768091323654494853667680000010652624854730558615989991401707698385483188750142938908995068545307651168033373222651756622075269517914422528081651716677667279303548515420402381746089232839170327542575086765511785939500279338959205766827896776445318404041855401043513483895312013263783692835808271937831265496174599705674507183320650345566440344904536275600112501843356073612227659492783937064784264567633881880756561216896050416113903906396016202215368494109260538768871483798955999911209916464644119185682770045742434340216722764455893301277815868695250694993646101756850601671453543158148010545886056455013320375864548584032402987170934809105562116715468484778039447569798042631809917564228098739987669732376957370158080682290459921236616890259627304306793165311494017647376938735140933618332161428021497633991898354848756252987524238730775595559554651963944018218409984124898262367377146722606163364329640633572810707887581640438148501884114318859882769449011932129682715888413386943468285900666408063140777577257056307294004929403024204984165654797367054855804458657202276378404668233798528271057843197535417950113472736257740802134768260450228515797957976474670228409995616015691089038458245026792659420555039587922981852648007068376504183656209455543461351341525700659748819163413595567196496540321872716026485930490397874895890661272507948282769389535217536218507962977851461884327192232238101587444505286652380225328438913752738458923844225354726530981715784478342158223270206902872323300538621634798850946954720047952311201504329322662827276321779088400878614802214753765781058197022263097174950721272484794781695729614236585957820908307332335603484653187302930266596450137183754288975579714499246540386817992138934692447419850973346267933210726868707680626399193619650440995421676278409146698569257150743157407938053239252394775574415918458215625181921552337096074833292349210345146264374498055961033079941453477845746999921285999993996122816152193148887693880222810830019860165494165426169685867883726095877456761825072759929508931805218729246108676399589161458550583972742098090978172932393010676638682404011130402470073508578287246271349463685318154696904669686939254725194139929146524238577625500474852954768147954670070503479995888676950161249722820403039954632788306959762493615101024365553522306906129493885990157346610237122354789112925476961760050479749280607212680392269110277722610254414922157650450812067717357120271802429681062037765788371669091094180744878140490755178203856539099104775941413215432844062503018027571696508209642734841469572639788425600845312140659358090412711359200419759851362547961606322887361813673732445060792441176399759746193835845749159880976674470930065463424234606342374746660804317012600520559284936959414340814685298150539471789004518357551541252235905906872648786357525419112888773717663748602766063496035367947026923229718683277173932361920077745221262475186983349515101986426988784717193966497690708252174233656627259284406204302141137199227852699846988477023238238400556555178890876613601304770984386116870523105531491625172837327286760072481729876375698163354150746088386636406934704372066886512756882661497307886570156850169186474885416791545965072342877306998537139043002665307839877638503238182155355973235306860430106757608389086270498418885951380910304235957824951439885901131858358406674723702971497850841458530857813391562707603563907639473114554958322669457024941398316343323789759556808568362972538679132750555425244919435891284050452269538121791319145135009938463117740179715122837854601160359554028644059024964669307077690554810288502080858008781157738171917417760173307385547580060560143377432990127286772530431825197579167929699650414607066457125888346979796429316229655201687973000356463045793088403274807718115553309098870255052076804630346086581653948769519600440848206596737947316808641564565053004988161649057883115434548505266006982309315777650037807046612647060214575057932709620478256152471459189652236083966456241051955105223572397395128818164059785914279148165426328920042816091369377737222999833270820829699557377273756676155271139225880552018988762011416800546873655806334716037342917039079863965229613128017826797172898229360702880690877686605932527463784053976918480820410219447197138692560841624511239806201131845412447820501107987607171556831540788654390412108730324020106853419472304766667217498698685470767812051247367924791931508564447753798537997322344561227858432968466475133365736923872014647236794278700425032555899268843495928761240075587569464137056251400117971331662071537154360068764773186755871487839890810742953094106059694431584775397009439883949144323536685392099468796450665339857388878661476294434140104988899316005120767810358861166020296119363968213496075011164983278563531614516845769568710900299976984126326650234771672865737857908574664607722834154031144152941880478254387617707904300015669867767957609099669360755949651527363498118964130433116627747123388174060373174397054067031096767657486953587896700319258662594105105335843846560233917967492678447637084749783336555790073841914731988627135259546251816043422537299628632674968240580602964211463864368642247248872834341704415734824818333016405669596688667695634914163284264149745333499994800026699875888159350735781519588990053951208535103572613736403436753471410483601754648830040784641674521673719048310967671134434948192626811107399482506073949507350316901973185211955263563258433909982249862406703107683184466072912487475403161796994113973877658998685541703188477886759290260700432126661791922352093822787888098863359911608192353555704646349113208591897961327913197564909760001399623444553501434642686046449586247690943470482932941404111465409239883444351591332010773944111840741076849810663472410482393582740194493566516108846312567852977697346843030614624180358529331597345830384554103370109167677637427621021370135485445092630719011473184857492331816720721372793556795284439254815609137281284063330393735624200160456645574145881660521666087387480472433912129558777639069690370788285277538940524607584962315743691711317613478388271941686066257210368513215664780014767523103935786068961112599602818393095487090590738613519145918195102973278755710497290114871718971800469616977700179139196137914171627070189584692143436967629274591099400600849835684252019155937037010110497473394938778859894174330317853487076032219829705797511914405109942358830345463534923498268836240433272674155403016195056806541809394099820206099941402168909007082133072308966211977553066591881411915778362729274615618571037217247100952142369648308641025928874579993223749551912219519034244523075351338068568073544649951272031744871954039761073080602699062580760202927314552520780799141842906388443734996814582733720726639176702011830046481900024130835088465841521489912761065137415394356572113903285749187690944137020905170314877734616528798482353382972601361109845148418238081205409961252745808810994869722161285248974255555160763716750548961730168096138038119143611439921063800508321409876045993093248510251682944672606661381517457125597549535802399831469822036133808284993567055755247129027453977621404931820146580080215665360677655087838043041343105918046068008345911366408348874080057412725867047922583191274157390809143831384564241509408491339180968402511639919368532255573389669537490266209232613188558915808324555719484538756287861288590041060060737465014026278240273469625282171749415823317492396835301361786536737606421667781377399510065895288774276626368418306801908046098498094697636673356622829151323527888061577682781595886691802389403330764419124034120223163685778603572769415417788264352381319050280870185750470463129333537572853866058889045831114507739429352019943219711716422350056440429798920815943071670198574692738486538334361457946341759225738985880016980147574205429958012429581054565108310462972829375841611625325625165724980784920998979906200359365099347215829651741357984910471116607915874369865412223483418877229294463351786538567319625598520260729476740726167671455736498121056777168934849176607717052771876011999081441130586455779105256843048114402619384023224709392498029335507318458903553971330884461741079591625117148648744686112476054286734367090466784686702740918810142497111496578177242793470702166882956108777944050484375284433751088282647719785400065097040330218625561473321177711744133502816088403517814525419643203095760186946490886815452856213469883554445602495566684366029221951248309106053772019802183101032704178386654471812603971906884623708575180800353270471856594994761242481109992886791589690495639476246084240659309486215076903149870206735338483495508363660178487710608098042692471324100094640143736032656451845667924566695510015022983307984960799498824970617236744936122622296179081431141466094123415935930958540791390872083227335495720807571651718765994498569379562387555161757543809178052802946420044721539628074636021132942559160025707356281263873310600589106524570802447493754318414940148211999627645310680066311838237616396631809314446712986155275982014514102756006892975024630401735148919457636078935285550531733141645705049964438909363084387448478396168405184527328840323452024705685164657164771393237755172947951261323982296023945485797545865174587877133181387529598094121742273003522965080891777050682592488223221549380483714547816472139768209633205083056479204820859204754998573203888763916019952409189389455767687497308569559580106595265030362661597506622250840674288982659075106375635699682115109496697445805472886936310203678232501823237084597901115484720876182124778132663304120762165873129708112307581598212486398072124078688781145016558251361789030708608701989758898074566439551574153631931919810705753366337380382721527988493503974800158905194208797113080512339332219034662499171691509485414018710603546037946433790058909577211808044657439628061867178610171567409676620802957665770512912099079443046328929473061595104309022214393718495606340561893425130572682914657832933405246350289291754708725648426003496296116541382300773133272983050016025672401418515204189070115428857992081219844931569990591820118197335001261877280368124819958770702075324063612593134385955425477819611429351635612234966615226147353996740515849986035529533292457523888101362023476246690558164389678630976273655047243486430712184943734853006063876445662721866617012381277156213797461498613287441177145524447089971445228856629424402301847912054784985745216346964489738920624019435183100882834802492490854030778638751659113028739587870981007727182718745290139728366148421428717055317965430765045343246005363614726181809699769334862640774351999286863238350887566835950972655748154319401955768504372480010204137498318722596773871549583997184449072791419658459300839426370208756353982169620553248032122674989114026785285996734052420310917978999057188219493913207534317079800237365909853755202389116434671855829068537118979526262344924833924963424497146568465912489185566295893299090352392333336474352037077010108438800329075983421701855422838616172104176030116459187805393674474720599850235828918336929223373239994804371084196594731626548257480994825099918330069765693671596893644933488647442135008407006608835972350395323401795825570360169369909886711321097988970705172807558551912699306730992507040702455685077867906947661262980822516331363995211709845280926303759224267425755998928927837047444521893632034894155210445972618838003006776179313813991620580627016510244588692476492468919246121253102757313908404700071435613623169923716948481325542009145304103713545329662063921054798243921251725401323149027405858920632175894943454890684639931375709103463327141531622328055229729795380188016285907357295541627886764982741861642187898857410716490691918511628152854867941736389066538857642291583425006736124538491606741373401735727799563410433268835695078149313780073623541800706191802673285511919426760912210359874692411728374931261633950012395992405084543756985079570462226646190001035004901830341535458428337643781119885563187777925372011667185395418359844383052037628194407615941068207169703022851522505731260930468984234331527321313612165828080752126315477306044237747535059522871744026663891488171730864361113890694202790881431194487994171540421034121908470940802540239329429454938786402305129271190975135360009219711054120966831115163287054230284700731206580326264171161659576132723515666625366727189985341998952368848309993027574199164638414270779887088742292770538912271724863220288984251252872178260305009945108247835729056919885554678860794628053712270424665431921452817607414824038278358297193010178883456741678113989547504483393146896307633966572267270433932167454218245570625247972199786685427989779923395790575818906225254735822052364248507834071101449804787266919901864388229323053823185597328697809222535295910173414073348847610055640182423921926950620831838145469839236646136398910121021770959767049083050818547041946643713122996923588953849301363565761861060622287055994233716310212784574464639897381885667462608794820186474876727272220626764653380998019668836809941590757768526398651462533363124505364026105696055131838131742611844201890888531963569869627950367384243130113317533053298020166888174813429886815855778103432317530647849832106297184251843855344276201282345707169885305183261796411785796088881503296022907056144762209150947390359466469162353968092013945781758910889319921122600739281491694816152738427362642980982340632002440244958944561291670495082358124873917996486411334803247577752197089327722623494860150466526814398770516153170266969297049283162855042128981467061953319702695072143782304768752802873541261663917082459251700107141808548006369232594620190022780874098597719218051585321473926532515590354102092846659252999143537918253145452905984158176370589279069098969111643811878094353715213322614436253144901274547726957393934815469163116249288735747188240715039950094467319543161938554852076657388251396391635767231510055560372633948672082078086537349424401157996675073607111593513319591971209489647175530245313647709420946356969822266737752099451684506436238242118535348879893956731878066061078854400055082765703055874485418057788917192078814233511386629296671796434687600770479995378833878703487180218424373421122739402557176908196030920182401884270570460926225641783752652633583242406612533115294234579655695025068100183109004112453790153329661569705223792103257069370510908307894799990049993953221536227484766036136776979785673865846709366795885837887956259464648913766521995882869338018360119323685785585581955560421562508836502033220245137621582046181067051953306530606065010548871672453779428313388716313955969058320834168984760656071183471362181232462272588419902861420872849568796393254642853430753011052857138296437099903569488852851904029560473461311382638788975517885604249987483163828040468486189381895905420398898726506976202019955484126500053944282039301274816381585303964399254702016727593285743666616441109625663373054092195196751483287348089574777752783442210910731113518280460363471981856555729571447476825528578633493428584231187494400032296906977583159038580393535213588600796003420975473922967333106493956018122378128545843176055617338611267347807458506760630482294096530411183066710818930311088717281675195796753471885372293096161432040063813224658411111577583585811350185690478153689381377184728147519983505047812977185990847076219746058874232569958288925350419379582606162118423687685114183160683158679946016520577405294230536017803133572632670547903384012573059123396018801378254219270947673371919872873852480574212489211834708766296672072723256505651293331260595057777275424712416483128329820723617505746738701282095755443059683955556868611883971355220844528526400812520276655576774959696266126045652456840861392382657685833846984997787267065551918544686984694784957346226062942196245570853712727765230989554501930377321666491825781546772920052126671434632096378918523232150189761260343736840671941930377468809992968775824410478781232662531818459604538535438391144967753128642609252115376732588667226040425234910870269580996475958057946639734190640100363619040420331135793365424263035614570090112448008900208014780566037101541223288914657223931450760716706435568274377439657890679726874384730763464516775621030986040927170909512808630902973850445271828927496892121066700816485833955377359191369501531620189088874842107987068991148046692706509407620465027725286507289053285485614331608126930056937854178610969692025388650345771831766868859236814884752764984688219497397297077371871884004143231276365048145311228509900207424092558592529261030210673681543470152523487863516439762358604191941296976904052648323470099111542426012734380220893310966863678986949779940012601642276092608234930411806438291383473546797253992623387915829984864592717340592256207491053085315371829116816372193951887009577881815868504645076993439409874335144316263303172477474868979182092394808331439708406730840795893581089665647758599055637695252326536144247802308268118310377358870892406130313364773710116282146146616794040905186152603600925219472188909181073358719641421444786548995285823439470500798303885388608310357193060027711945580219119428999227223534587075662469261776631788551443502182870266856106650035310502163182060176092179846849368631612937279518730789726373537171502563787335797718081848784588665043358243770041477104149349274384575871071597315594394264125702709651251081155482479394035976811881172824721582501094960966253933953809221955919181885526780621499231727631632183398969380756168559117529984501320671293924041445938623988093812404521914848316462101473891825101090967738690664041589736104764365000680771056567184862814963711188321924456639458144914861655004956769826903089111856879869294705135248160917432430153836847072928989828460222373014526556798986277679680914697983782687643115988321090437156112997665215396354644208691975673700057387649784376862876817924974694384274652563163230055513041742273416464551278127845777724575203865437542828256714128858345444351325620544642410110379554641905811686230596447695870540721419852121067343324107567675758184569906930460475227701670056845439692340417110898889934163505851578873534308155208117720718803791040469830695786854739376564336319797868036718730796939242363214484503547763156702553900654231179201534649779290662415083288583952905426376876689688050333172278001858850697362324038947004718976193473443084374437599250341788079722358591342458131440498477017323616947197657153531977549971627856631190469126091825912498903676541769799036237552865263757337635269693443544004730671988689019681474287677908669796885225016369498567302175231325292653758964151714795595387842784998664563028788319620998304945198743963690706827626574858104391122326187940599415540632701319898957037611053236062986748037791537675115830432084987209202809297526498125691634250005229088726469252846661046653921714820801305022980526378364269597337070539227891535105688839381132497570713310295044303467159894487868471164383280506925077662745001220035262037094660234146489983902525888301486781621967751945831677187627572005054397944124599007711520515461993050983869825428464072555409274031325716326407929341833421470904125425335232480219322770753555467958716383587501815933871742360615511710131235256334858203651461418700492057043720182617331947157008675785393360786227395581857975872587441025420771054753612940474601000940954449596628814869159038990718659805636171376922272907641977551777201042764969496110562205925024202177042696221549587264539892276976603105249808557594716310758701332088614632664125911486338812202844406941694882615295776253250198703598706743804698219420563812558334364219492322759372212890564209430823525440841108645453694049692714940033197828613181861888111184082578659287574263844500599442295685864604810330153889114994869354360302218109434667640000223625505736312946262960961987605642599639461386923308371962659547392346241345977957485246478379807956931986508159776753505539189911513352522987361127791827485420086895396583594219633315028695611920122988898870060799927954111882690230789131076036176347794894320321027733594169086500719328040171638406449878717537567811853213284082165711075495282949749362146082155832056872321855740651610962748743750980922302116099826330339154694946444910045152809250897450748967603240907689836529406579201983152654106581368237919840906457124689484702093577611931399802468134052003947819498662026240089021501661638135383815150377350229660746279529103840686855690701575166241929872444827194293310048548244545807188976330032325258215812803274679620028147624318286221710543528983482082734516801861317195933247110746622285087106661177034653528395776259977446721857158161264111432717943478859908928084866949141390977167369002777585026866465405659503948678411107901161040085727445629384254941675946054871172359464291058509099502149587931121961359083158826206823321561530868337308381732793281969838750870834838804638847844188400318471269745437093732983624028751979208023218787448828728437273780178270080587824107493575148899789117397461293203510814327032514090304874622629423443275712600866425083331876886507564292716055252895449215376517514921963671810494353178583834538652556566406572513635750643532365089367904317025978781771903148679638408288102094614900797151377170990619549696400708676671023300486726314755105372317571143223174114116806228642063889062101923552235467116621374996932693217370431059872250394565749246169782609702533594750209138366737728944386964000281103440260847128990007468077648440887113413525033678773167977093727786821661178653442317322646378476978751443320953400016506921305464768909850502030150448808342618452087305309731894929164253229336124315143065782640702838984098416029503092418971209716016492656134134334222988279099217860426798124572853458013382609958771781131021673402565627440072968340661984806766158050216918337236803990279316064204368120799003162644491461902194582296909921227885539487835383056468648816555622943156731282743908264506116289428035016613366978240","title":"Le nombre Pi"},{"location":"projet1/","text":"Projet : Conjecture de Goldbach \u2693\ufe0e Sujet au format pdf . Correction : Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder from math import sqrtbksl-nlbksl-nldef v\u00c3\u00a9rifierpy-undnombre(entier):bksl-nl \"\"\" V\u00c3\u00a9rifie si un nombre entier est strictement sup\u00c3\u00a9rieur \u00c3 1 \"\"\"bksl-nl if entier < 0 or entier == 0 or entier == 1: bksl-nl return Falsebksl-nl else : bksl-nl return Truebksl-nlbksl-nldef estpy-undpremierpy-undlent(entier):bksl-nl \"\"\" bksl-nl V\u00c3\u00a9rifie si un nombre entier est premier, version lentebksl-nl \"\"\"bksl-nl diviseur = 2bksl-nl if v\u00c3\u00a9rifierpy-undnombre(entier): # si le nombre est validebksl-nl # on parcourt tous les diviseurs de 2 \u00c3 entierbksl-nl while diviseur < entier: bksl-nl # on teste la divisibilit\u00c3\u00a9 de entier par diviseurbksl-nl if entier % diviseur == 0:bksl-nl return Falsebksl-nl # on incr\u00c3\u00a9mente le diviseurbksl-nl diviseur = diviseur + 1bksl-nl return Truebksl-nl else: bksl-nl return Falsebksl-nlbksl-nldef estpy-undpremier(entier):bksl-nl \"\"\" bksl-nl V\u00c3\u00a9rifie si un nombre entier est premier de mani\u00c3\u00a8re rapidebksl-nl \"\"\"bksl-nl diviseur = 2bksl-nl if v\u00c3\u00a9rifierpy-undnombre(entier):bksl-nl # on parcourt tous les diviseurs de 2 \u00c3 la racine de entierbksl-nl # on fait donc sqrt(entier) fois la bouclebksl-nl while diviseur <= sqrt(entier):bksl-nl if entier % diviseur == 0:bksl-nl return Falsebksl-nl diviseur = diviseur + 1bksl-nl return Truebksl-nl else: bksl-nl return Falsebksl-nlbksl-nldef estpy-undnombrepy-undgoldbach(entierpy-undpair):bksl-nl # on parcourt tous les entiers pairs de 2 \u00c3 entierpy-undpairbksl-nl for n in range(entierpy-undpair):bksl-nl # Un nombre de Golbach est de la forme entierpy-undpair = n + n2bksl-nl # donc n2 = entierpy-undpair - n avec n et n2 nombres premiers.bksl-nl if estpy-undpremier(n) and estpy-undpremier(entierpy-undpair - n):bksl-nl #print(entierpy-undpair, n, entierpy-undpair-n)bksl-nl return True, nbksl-nl return False, entierpy-undpairbksl-nlbksl-nldef testerpy-undconjecturepy-undgoldbach(nombrepy-undmaximum):bksl-nl entierpy-undpair = 4bksl-nl nombrepy-unddepy-undnombrepy-undgoldbach = 0bksl-nl nombrepy-unddepy-undpassagepy-undboucle = 0bksl-nl while entierpy-undpair <= nombrepy-undmaximum:bksl-nl # on teste si on a un nombre de Goldbach ou non.bksl-nl reponse, npy-und1 = estpy-undnombrepy-undgoldbach(entierpy-undpair)bksl-nl if reponse :bksl-nl print(entierpy-undpair, npy-und1, entierpy-undpair - npy-und1)bksl-nl nombrepy-unddepy-undnombrepy-undgoldbach = nombrepy-unddepy-undnombrepy-undgoldbach + 1bksl-nl # on rajoute 2 \u00c3 entierpy-undpair pour qu'il reste pair !bksl-nl entierpy-undpair = entierpy-undpair + 2bksl-nl nombrepy-unddepy-undpassagepy-undboucle += 1bksl-nl return nombrepy-unddepy-undnombrepy-undgoldbach / nombrepy-unddepy-undpassagepy-undbouclebksl-nlbksl-nlprint(estpy-undpremierpy-undlent(7))bksl-nl# print(testerpy-undconjecturepy-undgoldbach(100000))bksl-nlbksl-nlbksl-nlbksl-nl A Z","title":"Conjecture de Goldbach"},{"location":"projet1/#projet-conjecture-de-goldbach","text":"Sujet au format pdf . Correction : Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder from math import sqrtbksl-nlbksl-nldef v\u00c3\u00a9rifierpy-undnombre(entier):bksl-nl \"\"\" V\u00c3\u00a9rifie si un nombre entier est strictement sup\u00c3\u00a9rieur \u00c3 1 \"\"\"bksl-nl if entier < 0 or entier == 0 or entier == 1: bksl-nl return Falsebksl-nl else : bksl-nl return Truebksl-nlbksl-nldef estpy-undpremierpy-undlent(entier):bksl-nl \"\"\" bksl-nl V\u00c3\u00a9rifie si un nombre entier est premier, version lentebksl-nl \"\"\"bksl-nl diviseur = 2bksl-nl if v\u00c3\u00a9rifierpy-undnombre(entier): # si le nombre est validebksl-nl # on parcourt tous les diviseurs de 2 \u00c3 entierbksl-nl while diviseur < entier: bksl-nl # on teste la divisibilit\u00c3\u00a9 de entier par diviseurbksl-nl if entier % diviseur == 0:bksl-nl return Falsebksl-nl # on incr\u00c3\u00a9mente le diviseurbksl-nl diviseur = diviseur + 1bksl-nl return Truebksl-nl else: bksl-nl return Falsebksl-nlbksl-nldef estpy-undpremier(entier):bksl-nl \"\"\" bksl-nl V\u00c3\u00a9rifie si un nombre entier est premier de mani\u00c3\u00a8re rapidebksl-nl \"\"\"bksl-nl diviseur = 2bksl-nl if v\u00c3\u00a9rifierpy-undnombre(entier):bksl-nl # on parcourt tous les diviseurs de 2 \u00c3 la racine de entierbksl-nl # on fait donc sqrt(entier) fois la bouclebksl-nl while diviseur <= sqrt(entier):bksl-nl if entier % diviseur == 0:bksl-nl return Falsebksl-nl diviseur = diviseur + 1bksl-nl return Truebksl-nl else: bksl-nl return Falsebksl-nlbksl-nldef estpy-undnombrepy-undgoldbach(entierpy-undpair):bksl-nl # on parcourt tous les entiers pairs de 2 \u00c3 entierpy-undpairbksl-nl for n in range(entierpy-undpair):bksl-nl # Un nombre de Golbach est de la forme entierpy-undpair = n + n2bksl-nl # donc n2 = entierpy-undpair - n avec n et n2 nombres premiers.bksl-nl if estpy-undpremier(n) and estpy-undpremier(entierpy-undpair - n):bksl-nl #print(entierpy-undpair, n, entierpy-undpair-n)bksl-nl return True, nbksl-nl return False, entierpy-undpairbksl-nlbksl-nldef testerpy-undconjecturepy-undgoldbach(nombrepy-undmaximum):bksl-nl entierpy-undpair = 4bksl-nl nombrepy-unddepy-undnombrepy-undgoldbach = 0bksl-nl nombrepy-unddepy-undpassagepy-undboucle = 0bksl-nl while entierpy-undpair <= nombrepy-undmaximum:bksl-nl # on teste si on a un nombre de Goldbach ou non.bksl-nl reponse, npy-und1 = estpy-undnombrepy-undgoldbach(entierpy-undpair)bksl-nl if reponse :bksl-nl print(entierpy-undpair, npy-und1, entierpy-undpair - npy-und1)bksl-nl nombrepy-unddepy-undnombrepy-undgoldbach = nombrepy-unddepy-undnombrepy-undgoldbach + 1bksl-nl # on rajoute 2 \u00c3 entierpy-undpair pour qu'il reste pair !bksl-nl entierpy-undpair = entierpy-undpair + 2bksl-nl nombrepy-unddepy-undpassagepy-undboucle += 1bksl-nl return nombrepy-unddepy-undnombrepy-undgoldbach / nombrepy-unddepy-undpassagepy-undbouclebksl-nlbksl-nlprint(estpy-undpremierpy-undlent(7))bksl-nl# print(testerpy-undconjecturepy-undgoldbach(100000))bksl-nlbksl-nlbksl-nlbksl-nl A Z","title":"Projet : Conjecture de Goldbach"},{"location":"projet2/","text":"Projet : Une plante fractale \u2693\ufe0e But Le but de ce projet d'une dur\u00e9e de deux heures est d'obtenir le dessin d'une plante fractale comme celui ci-dessous. Pour cela, nous utiliserons le formalisme dit de Lindenmayer (dit L-syst\u00e8me ). Important Le travail est d\u00e9compos\u00e9 en plusieurs exercices corrig\u00e9s. Au fur et \u00e0 mesure de votre avanc\u00e9e, v\u00e9rifier votre travail gr\u00e2ce au petit gendarme (\u00e0 droite de la fl\u00e8che de t\u00e9l\u00e9versement) ; copier vos fonctions sur Thonny ; faites la partie Turtle sur Thonny. Pr\u00e9sentation du projet \u2693\ufe0e Pour cr\u00e9er des fractales avec un syst\u00e8me de Lindenmayer, on part d'un tableau contenant un ensemble de lettre. appel\u00e9e axiome. Pour une plante fractale, l'axiome est \"X\". \u00c0 partir de cet axiome et en appliquant de r\u00e8gles de transformation , on construit un tableau de lettres de plus en plus grand. Pour une plante fractale, les r\u00e8gles sont : \"X\" devient \"F+[[X]-X]-F[-FX]+X\" \"F\" devient \"FF\" n'importe quelle autre caract\u00e8re est inchang\u00e9e. \u00c0 titre d'exemple, si on prend pour axiome [ 'F' , 'X' , 'A' ] , le code devient : \u00e9tape 1: [ 'F' , 'X' , 'A' ] \u00e9tape 2: [ 'F' , 'F' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , 'A' ] \u00e9tape 3: [ 'F' , 'F' , 'F' , 'F' , 'F' , 'F' , '+' , '[' , '[' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , ']' , '-' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , ']' , '-' , 'F' , 'F' , '[' , '-' , 'F' , 'F' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , ']' , '+' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , 'A' ] Ce tableau va permettre de donner des instructions Turtle permettant de dessiner la plante fractale. Ainsi : si on lit un \"+\", on tourne \u00e0 droite de 25\u00b0 ; si on lit un \"-\", on tourne \u00e0 gauche de 25\u00b0 ; si on lit un \"F\", on avance de 10 pixels ; si on lit un \"[\", on enregistre dans un tableau la position et l'angle actuel de la tortue ; si on lit un \"]\", on r\u00e9cup\u00e8re \u00e0 partir du tableau la position et l'angle de la tortue pr\u00e9c\u00e9demment enregistr\u00e9. Partie 1 : cr\u00e9ation du tableau \u2693\ufe0e Exercice 1 En vous aidant des commentaires, \u00e9crire la fonction ajouter_lettre qui prend en param\u00e8tres : un tableau de lettres T de taille len ( T ) ; une lettre lettre . Cette fonction renvoie un tableau de lettres T de taille len ( T ) + 1 . Par exemple : ajouter_lettre ([ 'X' , 'X' , 'X' ] , '+' ) renvoie [ 'X' , 'X' , 'X' , '+' ] Lancer b1 = (\"ajouterpy-undlettre(['a','b'], 'c') == ['a','b','c']\", \"ajouterpy-undlettre([], 'a') == ['a']\", \"ajouterpy-undlettre(['a']py-str3, 'b') == ['a', 'a', 'a', 'b']\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def ajouterpy-undlettre(T, lettre):bksl-nl taille = len(T)bksl-nl # cr\u00c3\u00a9er un nouveau tableau de taille len(T) + 1bksl-nl # rempli de 0bksl-nlbksl-nl # remplir ce tableau gr\u00c3\u00a2ce \u00c3 un parcours de Tbksl-nl # sur les indicesbksl-nlbksl-nl # rajouter la lettre \u00c3 la derni\u00c3\u00a8re position bksl-nl # dans le nouveau tableau (len(T))bksl-nlbksl-nl # renvoyer le nouveaupy-undtableaubksl-nl passbksl-nlbksl-nlT1 = ['X', 'F', '+']bksl-nllettre = '+'bksl-nlT2 = ajouterpy-undlettre(T1, lettre)bksl-nlprint(T2)bksl-nl def ajouterpy-undlettre(T, lettre):bksl-nl taille = len(T)bksl-nl nouveaupy-undtableau = [0] py-str (taille+1)bksl-nl bksl-nl for i in range(taille): nouveaupy-undtableau[i] = T[i]bksl-nl nouveaupy-undtableau[len(T)] = lettrebksl-nl bksl-nl return nouveaupy-undtableaubksl-nlbksl-nlT1 = ['X', 'F', '+']bksl-nllettre = '+'bksl-nlT2 = ajouterpy-undlettre(T1, lettre)bksl-nlprint(T2)bksl-nl Exercice 2 Maintenant que nous pouvons ajouter une lettre \u00e0 un tableau, nous devons cr\u00e9er une fonction permettant d'en ajouter plusieurs. \u00c9crire une fonction s'appelant ajouter_expression qui prend en param\u00e8tres : un tableau de lettres T de taille len ( T ) ; une expression expression compos\u00e9e de plusieurs lettres. Cette fonction parcourt et ajoute tous les caract\u00e8res contenus au sein d'une expression dans un tableau. Elle renvoie un tableau de lettres T de taille len ( T ) + len ( expression ) . Par exemple : ajouter_expression ([ 'X' , 'X' , 'X' ] , '+XF' ) renvoie [ 'X' , 'X' , 'X' , '+' , 'X' , 'F' ] Lancer b1 = (\"ajouterpy-undexpression(['a','b'], 'c') == ['a','b','c']\", \"ajouterpy-undexpression(['a', 'b'], 'cd') == ['a','b','c','d']\", \"ajouterpy-undexpression( [],'abc') == ['a','b','c']\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def ajouterpy-undexpression(T, expression):bksl-nl taille = len(T)bksl-nl # pensez \u00c3 appeler la fonction ajouterpy-undlettrebksl-nl passbksl-nlbksl-nlT1 = ['X', 'F', '+']bksl-nlexpression = 'ABC'bksl-nlT2 = ajouterpy-undexpression(T1, expression)bksl-nlprint(T2)bksl-nl def ajouterpy-undlettre(T, lettre):bksl-nl taille = len(T)bksl-nl nouveaupy-undtableau = [0] py-str (taille+1)bksl-nl bksl-nl for i in range(taille): nouveaupy-undtableau[i] = T[i]bksl-nl nouveaupy-undtableau[len(T)] = lettrebksl-nl bksl-nl return nouveaupy-undtableaubksl-nlbksl-nldef ajouterpy-undexpression(tableau, expression):bksl-nl for lettre in expression :bksl-nl tableau = ajouterpy-undlettre(tableau, lettre)bksl-nl return tableaubksl-nlbksl-nlT1 = ['X', 'F', '+']bksl-nlexpression = 'ABC'bksl-nlT2 = ajouterpy-undexpression(T1, expression)bksl-nlprint(T2)bksl-nl Exercice 3 Maintenant que nous savons ajouter une expression \u00e0 un tableau, nous devons cr\u00e9er une fonction permettant de passer d'une \u00e9tape \u00e0 la suivante. Pour cela, il faut cr\u00e9er un nouveau tableau \u00e0 partir du tableau existant. On va par exemple : \u00e0 partir du tableau de l'\u00e9tape 1, cr\u00e9er le tableau de l'\u00e9tape 2 ; \u00e0 partir du tableau de l'\u00e9tape 2, cr\u00e9er le tableau de l'\u00e9tape 3. \u00c9crire une fonction s'appelant g\u00e9n\u00e9rer_nouveau_tableau qui prend en param\u00e8tre : un tableau de lettres T de taille len ( T ) . Cette fonction renvoie le nouveau tableau de lettres. La strat\u00e9gie est la suivante : cette fonction part d'un nouveau tableau nouveau_tableau vide ; elle parcourt un par un tous les \u00e9l\u00e9ments du tableau : si l'\u00e9l\u00e9ment est un 'X' , on ajoute l'expression \"F+[[X]-X]-F[-FX]+X\" \u00e0 nouveau_tableau ; si l'\u00e9l\u00e9ment est un 'F' , on ajoute l'expression \"FF\" \u00e0 nouveau_tableau ; si l'\u00e9l\u00e9ment est un autre caract\u00e8re, on ajoute cette lettre \u00e0 nouveau_tableau . Par exemple : g\u00e9n\u00e9rer_nouveau_tableau ([ 'X' ]) renvoie [ 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' ] Lancer b1 = (\"g\u00c3\u00a9n\u00c3\u00a9rerpy-undnouveaupy-undtableau(['a','b'], 'c') == ['a','b','c']\", \"ajouterpy-undexpression(['a', 'b'], 'cd') == ['a','b','c','d']\", \"ajouterpy-undexpression( [],'abc') == ['a','b','c']\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def g\u00c3\u00a9n\u00c3\u00a9rerpy-undnouveaupy-undtableau(tableau):bksl-nl bksl-nl passbksl-nlbksl-nlaxiome = ['X']bksl-nlplante = g\u00c3\u00a9n\u00c3\u00a9rerpy-undnouveaupy-undtableau(axiome)bksl-nlprint(plante)bksl-nl def ajouterpy-undlettre(T, lettre):bksl-nl taille = len(T)bksl-nl nouveaupy-undtableau = [0] py-str (taille+1)bksl-nl bksl-nl for i in range(taille): nouveaupy-undtableau[i] = T[i]bksl-nl nouveaupy-undtableau[len(T)] = lettrebksl-nl bksl-nl return nouveaupy-undtableaubksl-nlbksl-nldef ajouterpy-undexpression(tableau, expression):bksl-nl for lettre in expression :bksl-nl tableau = ajouterpy-undlettre(tableau, lettre)bksl-nl return tableaubksl-nlbksl-nldef g\u00c3\u00a9n\u00c3\u00a9rerpy-undnouveaupy-undtableau(tableau):bksl-nl nouveaupy-undtableau = []bksl-nl for lettre in tableau:bksl-nl if lettre == 'X':bksl-nl nouveaupy-undtableau = ajouterpy-undexpression(nouveaupy-undtableau, 'F+[[X]-X]-F[-FX]+X')bksl-nl elif lettre == 'F':bksl-nl nouveaupy-undtableau = ajouterpy-undexpression(nouveaupy-undtableau, 'FF')bksl-nl else :bksl-nl nouveaupy-undtableau = ajouterpy-undexpression(nouveaupy-undtableau, lettre)bksl-nl return nouveaupy-undtableaubksl-nlbksl-nlaxiome = ['X']bksl-nlplante = g\u00c3\u00a9n\u00c3\u00a9rerpy-undnouveaupy-undtableau(axiome)bksl-nlprint(plante)bksl-nl Exercice 4 Finalement, il faut g\u00e9n\u00e9rer la plante \u00e0 un certain degr\u00e9 de finesse. Cela signifie que l'on cherche, \u00e0 partir de l'axiome \u00e0 cr\u00e9er la plante de l'\u00e9tape 4, 5 ou 6. La finesse correspond au num\u00e9ro de l'\u00e9tape. \u00c9crire une fonction s'appelant g\u00e9n\u00e9rer_plante qui prend en param\u00e8tre : un tableau de lettres axiome ; un degr\u00e9 de finesse finesse . Cette fonction renvoie la plante sous forme d'un tableau de lettres \u00e0 un certain degr\u00e9 de finesse. Par exemple : g\u00e9n\u00e9rer_plante ([ 'X' ] , 2 ) renvoie [ 'F' , 'F' , '+' , '[' , '[' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , ']' , '-' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , ']' , '-' , 'F' , 'F' , '[' , '-' , 'F' , 'F' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , ']' , '+' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' ] Lancer b1 = (\"g\u00c3\u00a9n\u00c3\u00a9rerpy-undplante(['X'], 0) == ['X']\", \\bksl-nl \"g\u00c3\u00a9n\u00c3\u00a9rerpy-undplante(['X'], 1) == ['F', '+', '[', '[', 'X', ']', '-', 'X', ']', '-', 'F', '[', '-', 'F', 'X', ']', '+', 'X']\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def g\u00c3\u00a9n\u00c3\u00a9rerpy-undplante(tableau, finesse):bksl-nlbksl-nl passbksl-nlbksl-nltableau = g\u00c3\u00a9n\u00c3\u00a9rerpy-undplante(['X'], 1)bksl-nlprint(tableau)bksl-nl def ajouterpy-undlettre(T, lettre):bksl-nl taille = len(T)bksl-nl nouveaupy-undtableau = [0] py-str (taille+1)bksl-nl bksl-nl for i in range(taille): nouveaupy-undtableau[i] = T[i]bksl-nl nouveaupy-undtableau[len(T)] = lettrebksl-nl bksl-nl return nouveaupy-undtableaubksl-nlbksl-nldef ajouterpy-undexpression(tableau, expression):bksl-nl for lettre in expression :bksl-nl tableau = ajouterpy-undlettre(tableau, lettre)bksl-nl return tableaubksl-nlbksl-nldef g\u00c3\u00a9n\u00c3\u00a9rerpy-undnouveaupy-undtableau(tableau):bksl-nl nouveaupy-undtableau = []bksl-nl for lettre in tableau:bksl-nl if lettre == 'X':bksl-nl nouveaupy-undtableau = ajouterpy-undexpression(nouveaupy-undtableau, 'F+[[X]-X]-F[-FX]+X')bksl-nl elif lettre == 'F':bksl-nl nouveaupy-undtableau = ajouterpy-undexpression(nouveaupy-undtableau, 'FF')bksl-nl else :bksl-nl nouveaupy-undtableau = ajouterpy-undexpression(nouveaupy-undtableau, lettre)bksl-nl return nouveaupy-undtableaubksl-nlbksl-nlbksl-nldef g\u00c3\u00a9n\u00c3\u00a9rerpy-undplante(tableau, finesse):bksl-nl for \u00c3\u00a9tape in range(finesse):bksl-nl tableau = g\u00c3\u00a9n\u00c3\u00a9rerpy-undnouveaupy-undtableau(tableau)bksl-nl return tableaubksl-nlbksl-nltableau = g\u00c3\u00a9n\u00c3\u00a9rerpy-undplante(['X'], 2)bksl-nlprint(tableau)bksl-nl Cours \u2693\ufe0e Cours En Python, il est possible de g\u00e9rer les tableaux de mani\u00e8re dynamique, en ajoutant et en retirant des \u00e9l\u00e9ments au tableau courant. Les instructions pour r\u00e9aliser ces op\u00e9rations sont : tableau . append ( \u00e9l\u00e9ment ) ajoute un \u00e9l\u00e9ment \u00e0 la fin d'un tableau ; tableau . pop ( 0 ) retire le premier \u00e9l\u00e9ment d'un tableau et renvoie sa valeur ; tableau . pop ( - 1 ) retire le dernier \u00e9l\u00e9ment d'un tableau et renvoie sa valeur. Exemple Essayez-lez ! Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder tableau = [1, 3, 5, 7]bksl-nlbksl-nl# ajouter l'\u00c3\u00a9l\u00c3\u00a9ment 11 \u00c3 la fin d'un tableau bksl-nltableau.append(11)bksl-nlprint(tableau)bksl-nlbksl-nl# retirer le dernier \u00c3\u00a9l\u00c3\u00a9ment d'un tableaubksl-nl# et le r\u00c3\u00a9cup\u00c3\u00a9rerbksl-nl\u00c3\u00a9l\u00c3\u00a9ment = tableau.pop(-1)bksl-nlprint(tableau, \u00c3\u00a9l\u00c3\u00a9ment)bksl-nlbksl-nl# retirer le premier \u00c3\u00a9l\u00c3\u00a9ment d'un tableaubksl-nl# et le recup\u00c3\u00a9rerbksl-nl\u00c3\u00a9l\u00c3\u00a9ment = tableau.pop(0)bksl-nlprint(tableau, \u00c3\u00a9l\u00c3\u00a9ment)bksl-nlbksl-nlbksl-nl Partie 2 : Turtle \u2693\ufe0e Cette seconde partie se d\u00e9roule uniquement sur Thonny. Exercice 5 Nous allons maintenant dessiner la plante fractale ! Pour se faire, nous devons int\u00e9grer les lettres pr\u00e9sentes dans notre tableau. Copier le code ci-dessous dans Thonny ; Compl\u00e9ter la fonction dessiner_plante qui prend pour param\u00e8tres : un tableau de lettres tableau g\u00e9n\u00e9rer gr\u00e2ce \u00e0 la fonction g\u00e9n\u00e9rer_plante ; une longueur longueur correspondant \u00e0 la longueur d'un trait. Pour compl\u00e9ter cette fonction, allez voir l'interpr\u00e9tation des lettres en Tortue sur le lien wikip\u00e9dia . On prendra la distance unitaire \u00e9gale \u00e0 10 et l'angle \u00e9gal \u00e0 25\u00b0. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtle bksl-nlbksl-nlbksl-nldef dessinerpy-undplante(tableau, longueur):bksl-nlbksl-nl positionpy-undenpy-undm\u00c3\u00a9moire = []bksl-nl directionpy-undenpy-undm\u00c3\u00a9moire = []bksl-nlbksl-nl passbksl-nlbksl-nlbksl-nl# turtle.tracer(0) # trac\u00c3\u00a9 instantan\u00c3\u00a9bksl-nlturtle.ht()bksl-nlturtle.pu()bksl-nlturtle.screensize(1000,2000)bksl-nlturtle.setpos(-300,-300) # place la tortuebksl-nlturtle.seth(45) # d\u00c3\u00a9finit la direction de la tortuebksl-nlturtle.pd()bksl-nlbksl-nldessinerpy-undplante(['X'], 10)bksl-nlbksl-nlturtle.update()bksl-nlturtle.exitonclick()bksl-nlbksl-nl import turtle bksl-nlbksl-nlbksl-nldef dessinerpy-undplante(tableau, longueur):bksl-nlbksl-nl positionpy-undenpy-undm\u00c3\u00a9moire = []bksl-nl directionpy-undenpy-undm\u00c3\u00a9moire = []bksl-nlbksl-nl for lettre in tableau:bksl-nl if(lettre == '-'): turtle.left(25)bksl-nl elif(lettre == '+'): turtle.right(25)bksl-nl elif(lettre == 'F') : turtle.forward(longueur)bksl-nl elif(lettre == '[') : bksl-nl positionpy-undenpy-undm\u00c3\u00a9moire.append(turtle.pos())bksl-nl directionpy-undenpy-undm\u00c3\u00a9moire.append(turtle.heading())bksl-nl elif(lettre == ']') :bksl-nl anciennepy-undposition = positionpy-undenpy-undm\u00c3\u00a9moire.pop(-1)bksl-nl anciennepy-unddirection = directionpy-undenpy-undm\u00c3\u00a9moire.pop(-1)bksl-nl turtle.penup()bksl-nl turtle.seth(anciennepy-unddirection)bksl-nl turtle.setpos(anciennepy-undposition)bksl-nl turtle.pendown()bksl-nl return Nonebksl-nlbksl-nlbksl-nl# turtle.tracer(0) # trac\u00c3\u00a9 instantan\u00c3\u00a9bksl-nlturtle.ht()bksl-nlturtle.pu()bksl-nlturtle.screensize(1000,2000)bksl-nlturtle.setpos(-300,-300) # place la tortuebksl-nlturtle.seth(45) # d\u00c3\u00a9finit la direction de la tortuebksl-nlturtle.pd()bksl-nlbksl-nldessinerpy-undplante(['X'], 10)bksl-nlbksl-nlturtle.update()bksl-nlturtle.exitonclick()bksl-nlbksl-nl Aide Pour obtenir : la position actuelle de la tortue, on fait turtle . pos () ; la direction actuelle de la tortue, on fait turtle . heading () . Pour donner : une position \u00e0 la tortue, on fait turtle . setpos ( position_\u00e0_donner ) ; une direction \u00e0 la tortue, on fait turtle . seth ( direction_\u00e0_donner ) . On pensera \u00e0 lever le stylo avec turtle . penup () avant de replacer la tortue \u00e0 son ancien emplacement, puis \u00e0 le baisser avec turtle . pendown () . Dessiner des plantes fractales et amusez-vous !","title":"La plante fractale"},{"location":"projet2/#projet-une-plante-fractale","text":"But Le but de ce projet d'une dur\u00e9e de deux heures est d'obtenir le dessin d'une plante fractale comme celui ci-dessous. Pour cela, nous utiliserons le formalisme dit de Lindenmayer (dit L-syst\u00e8me ). Important Le travail est d\u00e9compos\u00e9 en plusieurs exercices corrig\u00e9s. Au fur et \u00e0 mesure de votre avanc\u00e9e, v\u00e9rifier votre travail gr\u00e2ce au petit gendarme (\u00e0 droite de la fl\u00e8che de t\u00e9l\u00e9versement) ; copier vos fonctions sur Thonny ; faites la partie Turtle sur Thonny.","title":"Projet : Une plante fractale"},{"location":"projet2/#presentation-du-projet","text":"Pour cr\u00e9er des fractales avec un syst\u00e8me de Lindenmayer, on part d'un tableau contenant un ensemble de lettre. appel\u00e9e axiome. Pour une plante fractale, l'axiome est \"X\". \u00c0 partir de cet axiome et en appliquant de r\u00e8gles de transformation , on construit un tableau de lettres de plus en plus grand. Pour une plante fractale, les r\u00e8gles sont : \"X\" devient \"F+[[X]-X]-F[-FX]+X\" \"F\" devient \"FF\" n'importe quelle autre caract\u00e8re est inchang\u00e9e. \u00c0 titre d'exemple, si on prend pour axiome [ 'F' , 'X' , 'A' ] , le code devient : \u00e9tape 1: [ 'F' , 'X' , 'A' ] \u00e9tape 2: [ 'F' , 'F' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , 'A' ] \u00e9tape 3: [ 'F' , 'F' , 'F' , 'F' , 'F' , 'F' , '+' , '[' , '[' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , ']' , '-' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , ']' , '-' , 'F' , 'F' , '[' , '-' , 'F' , 'F' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , ']' , '+' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , 'A' ] Ce tableau va permettre de donner des instructions Turtle permettant de dessiner la plante fractale. Ainsi : si on lit un \"+\", on tourne \u00e0 droite de 25\u00b0 ; si on lit un \"-\", on tourne \u00e0 gauche de 25\u00b0 ; si on lit un \"F\", on avance de 10 pixels ; si on lit un \"[\", on enregistre dans un tableau la position et l'angle actuel de la tortue ; si on lit un \"]\", on r\u00e9cup\u00e8re \u00e0 partir du tableau la position et l'angle de la tortue pr\u00e9c\u00e9demment enregistr\u00e9.","title":"Pr\u00e9sentation du projet"},{"location":"projet2/#partie-1-creation-du-tableau","text":"Exercice 1 En vous aidant des commentaires, \u00e9crire la fonction ajouter_lettre qui prend en param\u00e8tres : un tableau de lettres T de taille len ( T ) ; une lettre lettre . Cette fonction renvoie un tableau de lettres T de taille len ( T ) + 1 . Par exemple : ajouter_lettre ([ 'X' , 'X' , 'X' ] , '+' ) renvoie [ 'X' , 'X' , 'X' , '+' ] Lancer b1 = (\"ajouterpy-undlettre(['a','b'], 'c') == ['a','b','c']\", \"ajouterpy-undlettre([], 'a') == ['a']\", \"ajouterpy-undlettre(['a']py-str3, 'b') == ['a', 'a', 'a', 'b']\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def ajouterpy-undlettre(T, lettre):bksl-nl taille = len(T)bksl-nl # cr\u00c3\u00a9er un nouveau tableau de taille len(T) + 1bksl-nl # rempli de 0bksl-nlbksl-nl # remplir ce tableau gr\u00c3\u00a2ce \u00c3 un parcours de Tbksl-nl # sur les indicesbksl-nlbksl-nl # rajouter la lettre \u00c3 la derni\u00c3\u00a8re position bksl-nl # dans le nouveau tableau (len(T))bksl-nlbksl-nl # renvoyer le nouveaupy-undtableaubksl-nl passbksl-nlbksl-nlT1 = ['X', 'F', '+']bksl-nllettre = '+'bksl-nlT2 = ajouterpy-undlettre(T1, lettre)bksl-nlprint(T2)bksl-nl def ajouterpy-undlettre(T, lettre):bksl-nl taille = len(T)bksl-nl nouveaupy-undtableau = [0] py-str (taille+1)bksl-nl bksl-nl for i in range(taille): nouveaupy-undtableau[i] = T[i]bksl-nl nouveaupy-undtableau[len(T)] = lettrebksl-nl bksl-nl return nouveaupy-undtableaubksl-nlbksl-nlT1 = ['X', 'F', '+']bksl-nllettre = '+'bksl-nlT2 = ajouterpy-undlettre(T1, lettre)bksl-nlprint(T2)bksl-nl Exercice 2 Maintenant que nous pouvons ajouter une lettre \u00e0 un tableau, nous devons cr\u00e9er une fonction permettant d'en ajouter plusieurs. \u00c9crire une fonction s'appelant ajouter_expression qui prend en param\u00e8tres : un tableau de lettres T de taille len ( T ) ; une expression expression compos\u00e9e de plusieurs lettres. Cette fonction parcourt et ajoute tous les caract\u00e8res contenus au sein d'une expression dans un tableau. Elle renvoie un tableau de lettres T de taille len ( T ) + len ( expression ) . Par exemple : ajouter_expression ([ 'X' , 'X' , 'X' ] , '+XF' ) renvoie [ 'X' , 'X' , 'X' , '+' , 'X' , 'F' ] Lancer b1 = (\"ajouterpy-undexpression(['a','b'], 'c') == ['a','b','c']\", \"ajouterpy-undexpression(['a', 'b'], 'cd') == ['a','b','c','d']\", \"ajouterpy-undexpression( [],'abc') == ['a','b','c']\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def ajouterpy-undexpression(T, expression):bksl-nl taille = len(T)bksl-nl # pensez \u00c3 appeler la fonction ajouterpy-undlettrebksl-nl passbksl-nlbksl-nlT1 = ['X', 'F', '+']bksl-nlexpression = 'ABC'bksl-nlT2 = ajouterpy-undexpression(T1, expression)bksl-nlprint(T2)bksl-nl def ajouterpy-undlettre(T, lettre):bksl-nl taille = len(T)bksl-nl nouveaupy-undtableau = [0] py-str (taille+1)bksl-nl bksl-nl for i in range(taille): nouveaupy-undtableau[i] = T[i]bksl-nl nouveaupy-undtableau[len(T)] = lettrebksl-nl bksl-nl return nouveaupy-undtableaubksl-nlbksl-nldef ajouterpy-undexpression(tableau, expression):bksl-nl for lettre in expression :bksl-nl tableau = ajouterpy-undlettre(tableau, lettre)bksl-nl return tableaubksl-nlbksl-nlT1 = ['X', 'F', '+']bksl-nlexpression = 'ABC'bksl-nlT2 = ajouterpy-undexpression(T1, expression)bksl-nlprint(T2)bksl-nl Exercice 3 Maintenant que nous savons ajouter une expression \u00e0 un tableau, nous devons cr\u00e9er une fonction permettant de passer d'une \u00e9tape \u00e0 la suivante. Pour cela, il faut cr\u00e9er un nouveau tableau \u00e0 partir du tableau existant. On va par exemple : \u00e0 partir du tableau de l'\u00e9tape 1, cr\u00e9er le tableau de l'\u00e9tape 2 ; \u00e0 partir du tableau de l'\u00e9tape 2, cr\u00e9er le tableau de l'\u00e9tape 3. \u00c9crire une fonction s'appelant g\u00e9n\u00e9rer_nouveau_tableau qui prend en param\u00e8tre : un tableau de lettres T de taille len ( T ) . Cette fonction renvoie le nouveau tableau de lettres. La strat\u00e9gie est la suivante : cette fonction part d'un nouveau tableau nouveau_tableau vide ; elle parcourt un par un tous les \u00e9l\u00e9ments du tableau : si l'\u00e9l\u00e9ment est un 'X' , on ajoute l'expression \"F+[[X]-X]-F[-FX]+X\" \u00e0 nouveau_tableau ; si l'\u00e9l\u00e9ment est un 'F' , on ajoute l'expression \"FF\" \u00e0 nouveau_tableau ; si l'\u00e9l\u00e9ment est un autre caract\u00e8re, on ajoute cette lettre \u00e0 nouveau_tableau . Par exemple : g\u00e9n\u00e9rer_nouveau_tableau ([ 'X' ]) renvoie [ 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' ] Lancer b1 = (\"g\u00c3\u00a9n\u00c3\u00a9rerpy-undnouveaupy-undtableau(['a','b'], 'c') == ['a','b','c']\", \"ajouterpy-undexpression(['a', 'b'], 'cd') == ['a','b','c','d']\", \"ajouterpy-undexpression( [],'abc') == ['a','b','c']\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def g\u00c3\u00a9n\u00c3\u00a9rerpy-undnouveaupy-undtableau(tableau):bksl-nl bksl-nl passbksl-nlbksl-nlaxiome = ['X']bksl-nlplante = g\u00c3\u00a9n\u00c3\u00a9rerpy-undnouveaupy-undtableau(axiome)bksl-nlprint(plante)bksl-nl def ajouterpy-undlettre(T, lettre):bksl-nl taille = len(T)bksl-nl nouveaupy-undtableau = [0] py-str (taille+1)bksl-nl bksl-nl for i in range(taille): nouveaupy-undtableau[i] = T[i]bksl-nl nouveaupy-undtableau[len(T)] = lettrebksl-nl bksl-nl return nouveaupy-undtableaubksl-nlbksl-nldef ajouterpy-undexpression(tableau, expression):bksl-nl for lettre in expression :bksl-nl tableau = ajouterpy-undlettre(tableau, lettre)bksl-nl return tableaubksl-nlbksl-nldef g\u00c3\u00a9n\u00c3\u00a9rerpy-undnouveaupy-undtableau(tableau):bksl-nl nouveaupy-undtableau = []bksl-nl for lettre in tableau:bksl-nl if lettre == 'X':bksl-nl nouveaupy-undtableau = ajouterpy-undexpression(nouveaupy-undtableau, 'F+[[X]-X]-F[-FX]+X')bksl-nl elif lettre == 'F':bksl-nl nouveaupy-undtableau = ajouterpy-undexpression(nouveaupy-undtableau, 'FF')bksl-nl else :bksl-nl nouveaupy-undtableau = ajouterpy-undexpression(nouveaupy-undtableau, lettre)bksl-nl return nouveaupy-undtableaubksl-nlbksl-nlaxiome = ['X']bksl-nlplante = g\u00c3\u00a9n\u00c3\u00a9rerpy-undnouveaupy-undtableau(axiome)bksl-nlprint(plante)bksl-nl Exercice 4 Finalement, il faut g\u00e9n\u00e9rer la plante \u00e0 un certain degr\u00e9 de finesse. Cela signifie que l'on cherche, \u00e0 partir de l'axiome \u00e0 cr\u00e9er la plante de l'\u00e9tape 4, 5 ou 6. La finesse correspond au num\u00e9ro de l'\u00e9tape. \u00c9crire une fonction s'appelant g\u00e9n\u00e9rer_plante qui prend en param\u00e8tre : un tableau de lettres axiome ; un degr\u00e9 de finesse finesse . Cette fonction renvoie la plante sous forme d'un tableau de lettres \u00e0 un certain degr\u00e9 de finesse. Par exemple : g\u00e9n\u00e9rer_plante ([ 'X' ] , 2 ) renvoie [ 'F' , 'F' , '+' , '[' , '[' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , ']' , '-' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , ']' , '-' , 'F' , 'F' , '[' , '-' , 'F' , 'F' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , ']' , '+' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' ] Lancer b1 = (\"g\u00c3\u00a9n\u00c3\u00a9rerpy-undplante(['X'], 0) == ['X']\", \\bksl-nl \"g\u00c3\u00a9n\u00c3\u00a9rerpy-undplante(['X'], 1) == ['F', '+', '[', '[', 'X', ']', '-', 'X', ']', '-', 'F', '[', '-', 'F', 'X', ']', '+', 'X']\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def g\u00c3\u00a9n\u00c3\u00a9rerpy-undplante(tableau, finesse):bksl-nlbksl-nl passbksl-nlbksl-nltableau = g\u00c3\u00a9n\u00c3\u00a9rerpy-undplante(['X'], 1)bksl-nlprint(tableau)bksl-nl def ajouterpy-undlettre(T, lettre):bksl-nl taille = len(T)bksl-nl nouveaupy-undtableau = [0] py-str (taille+1)bksl-nl bksl-nl for i in range(taille): nouveaupy-undtableau[i] = T[i]bksl-nl nouveaupy-undtableau[len(T)] = lettrebksl-nl bksl-nl return nouveaupy-undtableaubksl-nlbksl-nldef ajouterpy-undexpression(tableau, expression):bksl-nl for lettre in expression :bksl-nl tableau = ajouterpy-undlettre(tableau, lettre)bksl-nl return tableaubksl-nlbksl-nldef g\u00c3\u00a9n\u00c3\u00a9rerpy-undnouveaupy-undtableau(tableau):bksl-nl nouveaupy-undtableau = []bksl-nl for lettre in tableau:bksl-nl if lettre == 'X':bksl-nl nouveaupy-undtableau = ajouterpy-undexpression(nouveaupy-undtableau, 'F+[[X]-X]-F[-FX]+X')bksl-nl elif lettre == 'F':bksl-nl nouveaupy-undtableau = ajouterpy-undexpression(nouveaupy-undtableau, 'FF')bksl-nl else :bksl-nl nouveaupy-undtableau = ajouterpy-undexpression(nouveaupy-undtableau, lettre)bksl-nl return nouveaupy-undtableaubksl-nlbksl-nlbksl-nldef g\u00c3\u00a9n\u00c3\u00a9rerpy-undplante(tableau, finesse):bksl-nl for \u00c3\u00a9tape in range(finesse):bksl-nl tableau = g\u00c3\u00a9n\u00c3\u00a9rerpy-undnouveaupy-undtableau(tableau)bksl-nl return tableaubksl-nlbksl-nltableau = g\u00c3\u00a9n\u00c3\u00a9rerpy-undplante(['X'], 2)bksl-nlprint(tableau)bksl-nl","title":"Partie 1 : cr\u00e9ation du tableau"},{"location":"projet2/#cours","text":"Cours En Python, il est possible de g\u00e9rer les tableaux de mani\u00e8re dynamique, en ajoutant et en retirant des \u00e9l\u00e9ments au tableau courant. Les instructions pour r\u00e9aliser ces op\u00e9rations sont : tableau . append ( \u00e9l\u00e9ment ) ajoute un \u00e9l\u00e9ment \u00e0 la fin d'un tableau ; tableau . pop ( 0 ) retire le premier \u00e9l\u00e9ment d'un tableau et renvoie sa valeur ; tableau . pop ( - 1 ) retire le dernier \u00e9l\u00e9ment d'un tableau et renvoie sa valeur. Exemple Essayez-lez ! Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder tableau = [1, 3, 5, 7]bksl-nlbksl-nl# ajouter l'\u00c3\u00a9l\u00c3\u00a9ment 11 \u00c3 la fin d'un tableau bksl-nltableau.append(11)bksl-nlprint(tableau)bksl-nlbksl-nl# retirer le dernier \u00c3\u00a9l\u00c3\u00a9ment d'un tableaubksl-nl# et le r\u00c3\u00a9cup\u00c3\u00a9rerbksl-nl\u00c3\u00a9l\u00c3\u00a9ment = tableau.pop(-1)bksl-nlprint(tableau, \u00c3\u00a9l\u00c3\u00a9ment)bksl-nlbksl-nl# retirer le premier \u00c3\u00a9l\u00c3\u00a9ment d'un tableaubksl-nl# et le recup\u00c3\u00a9rerbksl-nl\u00c3\u00a9l\u00c3\u00a9ment = tableau.pop(0)bksl-nlprint(tableau, \u00c3\u00a9l\u00c3\u00a9ment)bksl-nlbksl-nlbksl-nl","title":"Cours"},{"location":"projet2/#partie-2-turtle","text":"Cette seconde partie se d\u00e9roule uniquement sur Thonny. Exercice 5 Nous allons maintenant dessiner la plante fractale ! Pour se faire, nous devons int\u00e9grer les lettres pr\u00e9sentes dans notre tableau. Copier le code ci-dessous dans Thonny ; Compl\u00e9ter la fonction dessiner_plante qui prend pour param\u00e8tres : un tableau de lettres tableau g\u00e9n\u00e9rer gr\u00e2ce \u00e0 la fonction g\u00e9n\u00e9rer_plante ; une longueur longueur correspondant \u00e0 la longueur d'un trait. Pour compl\u00e9ter cette fonction, allez voir l'interpr\u00e9tation des lettres en Tortue sur le lien wikip\u00e9dia . On prendra la distance unitaire \u00e9gale \u00e0 10 et l'angle \u00e9gal \u00e0 25\u00b0. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtle bksl-nlbksl-nlbksl-nldef dessinerpy-undplante(tableau, longueur):bksl-nlbksl-nl positionpy-undenpy-undm\u00c3\u00a9moire = []bksl-nl directionpy-undenpy-undm\u00c3\u00a9moire = []bksl-nlbksl-nl passbksl-nlbksl-nlbksl-nl# turtle.tracer(0) # trac\u00c3\u00a9 instantan\u00c3\u00a9bksl-nlturtle.ht()bksl-nlturtle.pu()bksl-nlturtle.screensize(1000,2000)bksl-nlturtle.setpos(-300,-300) # place la tortuebksl-nlturtle.seth(45) # d\u00c3\u00a9finit la direction de la tortuebksl-nlturtle.pd()bksl-nlbksl-nldessinerpy-undplante(['X'], 10)bksl-nlbksl-nlturtle.update()bksl-nlturtle.exitonclick()bksl-nlbksl-nl import turtle bksl-nlbksl-nlbksl-nldef dessinerpy-undplante(tableau, longueur):bksl-nlbksl-nl positionpy-undenpy-undm\u00c3\u00a9moire = []bksl-nl directionpy-undenpy-undm\u00c3\u00a9moire = []bksl-nlbksl-nl for lettre in tableau:bksl-nl if(lettre == '-'): turtle.left(25)bksl-nl elif(lettre == '+'): turtle.right(25)bksl-nl elif(lettre == 'F') : turtle.forward(longueur)bksl-nl elif(lettre == '[') : bksl-nl positionpy-undenpy-undm\u00c3\u00a9moire.append(turtle.pos())bksl-nl directionpy-undenpy-undm\u00c3\u00a9moire.append(turtle.heading())bksl-nl elif(lettre == ']') :bksl-nl anciennepy-undposition = positionpy-undenpy-undm\u00c3\u00a9moire.pop(-1)bksl-nl anciennepy-unddirection = directionpy-undenpy-undm\u00c3\u00a9moire.pop(-1)bksl-nl turtle.penup()bksl-nl turtle.seth(anciennepy-unddirection)bksl-nl turtle.setpos(anciennepy-undposition)bksl-nl turtle.pendown()bksl-nl return Nonebksl-nlbksl-nlbksl-nl# turtle.tracer(0) # trac\u00c3\u00a9 instantan\u00c3\u00a9bksl-nlturtle.ht()bksl-nlturtle.pu()bksl-nlturtle.screensize(1000,2000)bksl-nlturtle.setpos(-300,-300) # place la tortuebksl-nlturtle.seth(45) # d\u00c3\u00a9finit la direction de la tortuebksl-nlturtle.pd()bksl-nlbksl-nldessinerpy-undplante(['X'], 10)bksl-nlbksl-nlturtle.update()bksl-nlturtle.exitonclick()bksl-nlbksl-nl Aide Pour obtenir : la position actuelle de la tortue, on fait turtle . pos () ; la direction actuelle de la tortue, on fait turtle . heading () . Pour donner : une position \u00e0 la tortue, on fait turtle . setpos ( position_\u00e0_donner ) ; une direction \u00e0 la tortue, on fait turtle . seth ( direction_\u00e0_donner ) . On pensera \u00e0 lever le stylo avec turtle . penup () avant de replacer la tortue \u00e0 son ancien emplacement, puis \u00e0 le baisser avec turtle . pendown () . Dessiner des plantes fractales et amusez-vous !","title":"Partie 2 : Turtle"},{"location":"projet3/","text":"Projet : Bitcoin \u2693\ufe0e Cours Code de la s\u00e9ance pr\u00e9c\u00e9dente","title":"Bitcoin"},{"location":"projet3/#projet-bitcoin","text":"Cours Code de la s\u00e9ance pr\u00e9c\u00e9dente","title":"Projet : Bitcoin"},{"location":"projet4/","text":"Projet : Nombres flottants et norme IEEE-754 \u2693\ufe0e Starter Code \u00e0 t\u00e9l\u00e9charger.","title":"Nombres flottants"},{"location":"projet4/#projet-nombres-flottants-et-norme-ieee-754","text":"Starter Code \u00e0 t\u00e9l\u00e9charger.","title":"Projet : Nombres flottants et norme IEEE-754"},{"location":"projet5/","text":"Macro Rendering Error \u2693\ufe0e UndefinedError : 'rue_final' is undefined Traceback (most recent call last): File \"D:\\Python\\Python310\\lib\\site-packages\\mkdocs_macros\\plugin.py\", line 480, in render return md_template.render(**page_variables) File \"D:\\Python\\Python310\\lib\\site-packages\\jinja2\\environment.py\", line 1301, in render self.environment.handle_exception() File \"D:\\Python\\Python310\\lib\\site-packages\\jinja2\\environment.py\", line 936, in handle_exception raise rewrite_traceback_stack(source=source) File \"<template>\", line 12, in top-level template code File \"D:\\Python\\Python310\\lib\\site-packages\\jinja2\\environment.py\", line 485, in getattr return getattr(obj, attribute) jinja2.exceptions.UndefinedError: 'rue_final' is undefined","title":"Cr\u00e9ation d'une rue"},{"location":"projet5/#macro-rendering-error","text":"UndefinedError : 'rue_final' is undefined Traceback (most recent call last): File \"D:\\Python\\Python310\\lib\\site-packages\\mkdocs_macros\\plugin.py\", line 480, in render return md_template.render(**page_variables) File \"D:\\Python\\Python310\\lib\\site-packages\\jinja2\\environment.py\", line 1301, in render self.environment.handle_exception() File \"D:\\Python\\Python310\\lib\\site-packages\\jinja2\\environment.py\", line 936, in handle_exception raise rewrite_traceback_stack(source=source) File \"<template>\", line 12, in top-level template code File \"D:\\Python\\Python310\\lib\\site-packages\\jinja2\\environment.py\", line 485, in getattr return getattr(obj, attribute) jinja2.exceptions.UndefinedError: 'rue_final' is undefined","title":"Macro Rendering Error"},{"location":"projet7/","text":"Projet : pi, nombre univers ? \u2693\ufe0e But BLABLA Pr\u00e9sentation du projet \u2693\ufe0e BLABLA Contraintes \u2693\ufe0e BLABLA Travail \u00e0 r\u00e9aliser \u2693\ufe0e BLABLA","title":"pi, nombre univers ?"},{"location":"projet7/#projet-pi-nombre-univers","text":"But BLABLA","title":"Projet : pi, nombre univers ?"},{"location":"projet7/#presentation-du-projet","text":"BLABLA","title":"Pr\u00e9sentation du projet"},{"location":"projet7/#contraintes","text":"BLABLA","title":"Contraintes"},{"location":"projet7/#travail-a-realiser","text":"BLABLA","title":"Travail \u00e0 r\u00e9aliser"},{"location":"projet8/","text":"Projet : Cr\u00e9ation site web \u2693\ufe0e But BLBLA Pr\u00e9sentation du projet \u2693\ufe0e OBLBLA Contraintes \u2693\ufe0e BLBLA Travail \u00e0 r\u00e9aliser \u2693\ufe0e PBLBLA","title":"Projet : Cr\u00e9ation site web"},{"location":"projet8/#projet-creation-site-web","text":"But BLBLA","title":"Projet : Cr\u00e9ation site web"},{"location":"projet8/#presentation-du-projet","text":"OBLBLA","title":"Pr\u00e9sentation du projet"},{"location":"projet8/#contraintes","text":"BLBLA","title":"Contraintes"},{"location":"projet8/#travail-a-realiser","text":"PBLBLA","title":"Travail \u00e0 r\u00e9aliser"},{"location":"python1/","text":"Variables \u2693\ufe0e Terminal, console et \u00e9diteur de code \u2693\ufe0e Un terminal est une invite de commandes permettant \u00e0 l'homme et \u00e0 la machine de communiquer de mani\u00e8re interactive. Pour programmer, il existe deux grands types d'outils : la console (aussi appel\u00e9 interpr\u00e9teur) permet de r\u00e9aliser des calculs, des tests rapides ainsi que des programmes courts. On ne sauvegarde pas son travail ; l'\u00e9diteur de code permet d'\u00e9crire un programme complexe dans un langage donn\u00e9 et de sauvegarder son travail. Il est souvent combin\u00e9 \u00e0 un interpr\u00e9teur afin d'ex\u00e9cuter le programme et de le rendre compr\u00e9hensible par l'ordinateur. Exemple Une console Un \u00e9diteur de code Calculez la somme de 134 et de 5677 dans la console. Pour valider, appuyez sur Enter . Faites \u00e9galement leur multiplication \u00e0 l'aide de l'op\u00e9rateur * . >>> Lancez le script \u00e0 l'aide de la fl\u00e8che. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder # \u00c3\u20ac gauche, l'\u00c3\u00a9diteur de code !bksl-nlprint('\u00c3\u20ac droite, la console')bksl-nl Au fur et \u00e0 mesure de votre apprentissage, vous utiliserez des \u00e9diteurs de code de plus en plus perfectionn\u00e9s : ce site web ; Thonny ; VSCodium. Hello World ! \u2693\ufe0e Premiers pas Si votre console contient trop d'\u00e9l\u00e9ments, tapez clear pour tout effacer. L'historique sera conserv\u00e9. Exercice 1 Exercice 2 Exercice 3 Cr\u00e9ons tout de suite notre premier programme 1 . Dans la console ci-dessous, tapez : print ( \"Hello world !\" ) et appuyez sur Enter . Que se passe-t-il ? Dans la console, affichez la phrase \"Bonjour le monde !\". Aide Avez-vous bien utilis\u00e9 des guillemets comme dans l'exercice pr\u00e9c\u00e9dent ? Dans la console ci-dessous, r\u00e9alisez la soustraction de 956 et de 649. Utilisez l'instruction print pour afficher \u00e0 nouveau le r\u00e9sultat de cette op\u00e9ration. Aide On ne peut pas soustraire un affichage avec print . Pas de guillemets ici. Voyez-vous quelle est la diff\u00e9rence fondamentale entre la soustraction et les phrases des exercices 1 et 2 ? >>> Important Vous obtenez le m\u00eame affichage que vous fassiez 45 * 4 ou print ( 45 * 4 ) . On aurait pu aussi taper >>> \"Hello World !\" sans print . Cela fonctionne car la console \u00e9value des expressions Python puis affiche le r\u00e9sultat de l'\u00e9valuation. print sera principalement utilis\u00e9e pour afficher la valeur r\u00e9f\u00e9renc\u00e9e par une variable dans des programmes complexes. Notion de variable \u2693\ufe0e Nous \u00e9voquons ci-dessous la notion de variable. Celle-ci sera revue en cours en activit\u00e9 d\u00e9branch\u00e9e. Cours Une variable repr\u00e9sente une zone de stockage dans la m\u00e9moire de l'ordinateur. Elle permet donc \u00e0 l'humain d'acc\u00e9der \u00e0 des valeurs num\u00e9riques, du texte ou des tableaux de nombres stock\u00e9s dans l'ordinateur \u00e0 une adresse pr\u00e9cise. Une variable contient une r\u00e9f\u00e9rence (une sorte d'adresse) vers un objet contenant une valeur. Un humain acc\u00e8de \u00e0 ces valeurs gr\u00e2ce \u00e0 un nom de variable . L'instruction x = 2 permet de relier un nom de variable x avec une valeur 2 . Le nom de variable x contient donc l'adresse de la valeur enti\u00e8re 2 . Ce lien = ne fonctionne que dans un sens : de la droite vers la gauche ou \u2190 . annee = 2010 # Ligne 1 envol = annee # Ligne 2 annee = annee + 1 # Ligne 3 # Ligne 1 : la variable nomm\u00e9e \"annee\", est associ\u00e9e \u00e0 une valeur (ici 2010) # Ligne 2 : la variable nomm\u00e9e \"envol\" contient la m\u00eame adresse que la variable nomm\u00e9e \"annee\". # Elle r\u00e9f\u00e9rence donc la m\u00eame valeur (ici 2010). # Ligne 3 : On ajoute 1 \u00e0 la valeur pr\u00e9c\u00e9demment r\u00e9f\u00e9renc\u00e9e par la variable nomm\u00e9e \"annee\". # Une nouvelle zone m\u00e9moire est r\u00e9serv\u00e9e. \"annee\" contient une nouvelle adresse, # associ\u00e9e \u00e0 la valeur 2011. %%{init:{'theme': 'dark' }}%% flowchart TD subgraph Apr\u00e8s la ligne 3 . . . . _ ______________ direction LR p[envol]-->A21 q[annee]-.->|X|A21 q[annee]-->A41 subgraph t[Variables] style t fill:#29f,stroke:#333,stroke-width:2px direction LR q[annee] p[envol] end subgraph id2[M\u00e9moire] style id2 fill:#29f,stroke:#333,stroke-width:2px subgraph pml[Adresses] direction RL A21[ #56] A41[ #691] A51[ ...] end subgraph iop[Valeurs] B111[2010] B11[2011] end A21---B111 A41---B11 end end subgraph Avant . . . . . _ ______________ direction LR envol-->A2 annee-->A2 subgraph Variables style Variables fill:#29f,stroke:#333,stroke-width:2px direction LR annee envol end subgraph id[M\u00e9moire] style id fill:#29f,stroke:#333,stroke-width:2px subgraph Adresses direction RL A2[#56] A3[...] A4[#691] A5[...] end subgraph Valeur B[2010] end A2---B end end Vocabulaire D\u00e9claration Initialisation Affectation Incr\u00e9mentation Une d\u00e9claration indique l'existence d'une entit\u00e9 informatique poss\u00e9dant certaines caract\u00e9ristiques. Exemple En Fortran 90, on d\u00e9clare des variables pi et entier ainsi : real :: pi integer :: entier Pour aller plus loin Dans de nombreux langages de programmation, la d\u00e9claration permet de d\u00e9finir le nombre d'octets \u00e0 r\u00e9server en m\u00e9moire, sa repr\u00e9sentation interne, l'ensemble des valeurs admissibles et l'ensemble des op\u00e9rateurs qui peuvent lui \u00eatre appliqu\u00e9s. Une initialisation est l'association initiale d'un contenu (une valeur) avec une variable d\u00e9clar\u00e9e pr\u00e9alablement. Exemple On initialise les variables pi et entier : pi = 3.141592 entier = 42 Une affectation est l'association d'un contenu (une valeur) avec une variable d\u00e9j\u00e0 initialis\u00e9e . Exemple On affecte de nouvelles valeurs aux variables pi et entier : pi = 6.283184 entier = 42 * 8 Une incr\u00e9mentation est l'augmentation r\u00e9guli\u00e8re de la valeur associ\u00e9e \u00e0 une variable. Exemple pi = pi + 2 # la variable pi est reli\u00e9e \u00e0 l'ancienne valeur de pi augment\u00e9e de 2. Pour aller plus loin Ce symbole = n'a rien \u00e0 voir avec le \u00e9gal math\u00e9matique. a = a + 2 a un sens en Python mais est une proposition logique fausse en Maths. Cours En Python, la d\u00e9claration et l'initialisation se font en m\u00eame temps. On appelle cela le typage dynamique . Lorsque Python voit x = 2 : il comprend qu'un entier arrive et r\u00e9serve l'espace en m\u00e9moire pour stocker cet entier (d\u00e9claration); il comprend que la variable nomm\u00e9e x r\u00e9f\u00e9rence la valeur 2 (initialisation). Pour aller plus loin En Python, le typage dynamique permet la modification du type r\u00e9f\u00e9renc\u00e9 par la variable x . Par exemple, x = 'Bonjour' permet de r\u00e9f\u00e9rencer le mot 'Bonjour' plut\u00f4t que l'entier 2 . En Python, ces changements de types (passage d'un mot \u00e0 un entier) se font via le duck typing . Pour faire simple, le duck typing permet de faire cela : Cr\u00e9er des variables Exercice 4 Exercice 5 Exercice 6 Exercice 7 Exercice 8 Dans la console ci-dessous, cr\u00e9ez une variable enti\u00e8re nomm\u00e9e m repr\u00e9sentant la valeur 7. Affichez ensuite la valeur r\u00e9f\u00e9renc\u00e9e par cette variable. Dans la console ci-dessous, cr\u00e9ez une variable r\u00e9elle nomm\u00e9e vitesse_initiale repr\u00e9sentant la valeur 12.7 . Affichez ensuite la valeur r\u00e9f\u00e9renc\u00e9e par cette variable . Dans la console ci-dessous, cr\u00e9ez une variable de type mot nomm\u00e9e 3l3ment repr\u00e9sentant la valeur \"D\u00e9buter en Python\" . Affichez ensuite cette variable dans la console. Aide Une erreur apparait. Il est interdit de commencer des noms de variables avec des chiffres. Renommez-l\u00e0 ! Dans la console ci-dessous, cr\u00e9ez deux variables enti\u00e8res nomm\u00e9es p et q repr\u00e9sentant les valeurs 77 et 5. Affichez d'abord p, puis q dans la console. Comment feriez-vous pour afficher p et q simultan\u00e9ment ? Astuce En Python, on peut d\u00e9clarer et initialiser deux variables (ou plus) simultan\u00e9ment. Pour cr\u00e9er a et b , on ferait : a , b = 4 , 5 . Dans la console ci-dessous, cr\u00e9ez trois variables nomm\u00e9es nb_passager , vitesse_moyenne_avion et nom_compagnie repr\u00e9sentant les valeurs 237, 977.3, \"Air France\". Affichez simultan\u00e9ment les trois valeurs dans la console ci-dessous. >>> Nommage \u2693\ufe0e Dans les exercices pr\u00e9c\u00e9dents, vous avez du remarquer que les variables : ne peuvent pas porter n'importe quel nom ; pointent vers diff\u00e9rents types de donn\u00e9es. Cours En Python, le nom d'une variable doit \u00eatre choisi parmi les lettres de l'alphabet (minuscule et majuscule \u00e9tant consid\u00e9r\u00e9es comme diff\u00e9rentes), les chiffres et le symbole _ . Les espaces ne sont pas autoris\u00e9es : on utilisera donc le tiret bas _ (appel\u00e9 aussi underscore ) pour les variables dont le nom est long. Le nom d'une variable doit \u00eatre choisi de fa\u00e7on \u00e0 \u00eatre facilement compr\u00e9hensible par un humain (ni trop court, ni trop d\u00e9taill\u00e9). Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder moyennepy-undmaths, moyennepy-undfran\u00c3\u00a7ais = 14, 12bksl-nlmoyennepy-undhistoire, moyennepy-undemc = 11, 18bksl-nlbksl-nlmoyennepy-undtotal = (moyennepy-undmaths + moyennepy-undhistoire + moyennepy-undfran\u00c3\u00a7ais + moyennepy-undemc) / 4bksl-nlprint(moyennepy-undtotal)bksl-nl Pour aller plus loin Cette convention de nommage s'appelle le snake case et est pr\u00e9conis\u00e9e pour Python. On \u00e9crira donc nombre_op\u00e9rations_par_seconde plut\u00f4t que NombreOp\u00e9rationParSeconde . Vrai/Faux sur le nommage des variables Cocher les identifiants valides. Question Solution pas Roi 2ame v413t dix n'\u0153uf huit S\u00e8te carte_six _5 %4 quatre-moins-un 2! _ pas Roi ; non conforme au snake case mais valide. 2ame ; interdit de commencer par un chiffre. v413t dix n'\u0153uf ; interdit d'utiliser ' huit S\u00e8te ; non conforme au snake case mais valide. carte_six ; tr\u00e8s bon choix ! _5 ; tr\u00e8s mal choisi mais valide. %4 ; interdit d'utiliser % quatre-moins-un ; interdit d'utiliser - 2! ; interdit d'utiliser ! _ Choisir des noms de variables Exercice 9 Exercice 10 Exercice 11 Dans la console ci-dessous, cr\u00e9ez une variable enti\u00e8re repr\u00e9sentant le nombre de briques de lait stock\u00e9es dans un entrepot. On l'initialisera \u00e0 10000 briques. Cr\u00e9ez \u00e0 pr\u00e9sent une variable r\u00e9elle repr\u00e9sentant le volume total de toutes ces briques de lait. Pour l'initialiser, on consid\u00e9rera qu'une brique contient 0.75 L de lait. Solution nb_briques_lait est le meilleur nom. nombre_briques , nb_briques , ou n_briques_lait sont des noms corrects. nombrebriques , nBriquesLait ou nombre_de_briques_de_lait_dans_entrepot ne respectent pas le snake case ou sont trop longs. volume_total_lait est le meilleur nom. volume_total_briques ou vol_tot_briques sont corrects. Dans la console ci-dessous, cr\u00e9ez deux variables enti\u00e8res repr\u00e9sentant les coordonn\u00e9es d'un point A du plan. On initialisera ces variables \u00e0 - 4 et 2 . Cr\u00e9ez \u00e0 pr\u00e9sent deux variables repr\u00e9sentant les coordonn\u00e9es d'un vecteur \\(\\vec{u}\\) du plan. On initialisera ces variables \u00e0 2 et - 1 . Solution x et y sont appropri\u00e9s s'il n'y a qu'un seul point. x_A et y_A sont \u00e9galement convenables. vec_x et vec_y sont appropri\u00e9s s'il n'y a qu'un seul vecteur. vec_u_x et vec_u_y sont \u00e9galement convenables. Par contre, vecX , VEC_Y ou abscisse_vecteur_u sont \u00e0 \u00e9viter. Dans la console ci-dessous, cr\u00e9ez une variable de type tableau repr\u00e9sentant l'ensemble des temp\u00e9ratures du lac L\u00e9man relev\u00e9es sur 4 jours. On initialisera notre variable gr\u00e2ce au tableau Python [ 17.7 , 18.1 , 18.2 , 18.8 ] . Solution temp_lac ou temp_lac_l\u00e9man sont appropri\u00e9s. temp pourrait \u00eatre correct mais est trop vague et temp\u00e9rature_lac_l\u00e9man_4jours est trop long. >>> Types de variables \u2693\ufe0e Depuis le d\u00e9but du cours, vous avez du remarquer que les variables que l'on manipule ne repr\u00e9sentent pas toujours le m\u00eame objet (des entiers, des mots, des nombres \u00e0 virgules). Dans un langage de programmation, les objets r\u00e9f\u00e9renc\u00e9s par les variables sont typ\u00e9es : ce sont des entiers, des r\u00e9els , des tableaux etc. Ce type est d\u00e9fini au moment de la d\u00e9claration. Cours Les types principaux en Python sont : les entiers (relatifs) : type int ; les flottants (approximation des nombres r\u00e9els par des d\u00e9cimaux) : type float ; les chaines de caract\u00e8res (mots ou texte) : type str ; les bool\u00e9ens ( True ou False ) : type bool . Les bool\u00e9ens sont des variables n'ayant que deux valeurs possibles : Vrai ou Faux. Pour aller plus loin Nous aurons rapidement besoin d'autres types permettant de d\u00e9crire des ensembles de donn\u00e9es : les n-uplets : type tuple ; les tableaux : type list ; les dictionnaires : type dict . Exercice 12 En vous aidant des exercices pr\u00e9c\u00e9dents, d\u00e9terminez les types des variables ci-dessous : Question Solution Types int float str bool p = 8 nom = \"Von Neumann\" e = 2.7172 p = 8.0 huit = \"8\" r = 0 r = - 120000 arriv\u00e9 = True huit = \"8.0\" mort = \"False\" Types int float str bool explication p = 8 nom = \"Von Neumann\" e = 2.7172 Le s\u00e9parateur d\u00e9cimal est un point. p = 8.0 Le s\u00e9parateur d\u00e9cimal est un point. huit = \"8\" Les guillemets indiquent un str . r = 0 0 est un entier. r = - 120000 r est un entier n\u00e9gatif donc relatif. arriv\u00e9 = True True et False sont des mots r\u00e9serv\u00e9s. huit = \"8.0\" Les guillemets indiquent un str . mort = \"False\" Pour aller plus loin Pour connaitre le type r\u00e9f\u00e9renc\u00e9e par une variable, on utilise l'instruction type ( ...... ) . Par exemple, type ( 6100 ) renvoie < class ' int '> . >>> Cours Les entiers int se remarquent par l'absence de virgules. Pour les grands nombres, il est possible de s\u00e9parer les diff\u00e9rents chiffres avec un tiret bas : 123_456_789 correspond au nombre \\(123456789\\) . Les flottants float sont \u00e9crits avec un point en guise de virgule : 3.1415 est le nombre \u00e9gal \u00e0 \\(3,1415\\) . Les chaines de caract\u00e8res str peuvent \u00eatre \u00e9crites de trois mani\u00e8res : guillemets simples ou doubles : 'une chaine' ou \"de caract\u00e8res\" guillemets doubles si pr\u00e9sence d'un guillemet simple dans la chaine de caract\u00e8res : \"l'oiseau\" trois guillemets doubles si pr\u00e9sence de guillemets simples et doubles dans la chaine de caract\u00e8res : \"\"\"L'oiseau dit : \"tu ne m'auras pas\".\"\"\" Manipuler des types simples Exercice 13 Exercice 14 Dans le terminal ci-dessous, initialiser les variables a , b , c , d , e , f \u00e0 100; -8; 9,99; 8 290 753 123; Vrai; \"Bonjour\". V\u00e9rifier vos r\u00e9ponses en affichant la variable et son type dans le terminal. Exemple : z = 99 z , type ( z ) Voici une discussion entre \u00e9l\u00e8ves : - Bonjour. Que fais-tu? - Salut, j'apprends Python. - Pas facile ! Mais Guido a dit : \"Ca va \u00eatre tellement utile\". Dans le terminal ci-dessous, initialiser les variables phrase_1 , phrase_2 , phrase_3 \u00e0 ces trois phrases. Aide Relisez le cours sur les trois m\u00e9thodes permettant d'initialiser des chaines de caract\u00e8res. >>> On peut convertir un objet d'un certain type en un autre type. Par exemple, on peut convertir une valeur r\u00e9f\u00e9renc\u00e9e par une variable 2 : en entier en utilisant int ( variable ) ; en flottant en utilisant float ( variable ) ; en chaine de caract\u00e8res en utilisant str ( variable ) . x = 1 # Ligne 1 y = float ( x ) # Ligne 2 : y r\u00e9f\u00e9rence maintenant un str x = y # Ligne 3 %%{init:{'theme': 'dark' }}%% flowchart TD subgraph Ligne 3 . . . ..____________________ direction LR p2[x]-.->|X|A3 p2[x]-->A4 q2[y]-->A4 subgraph t2[Variables] style t2 fill:#29f,stroke:#333,stroke-width:2px direction LR p2[x] q2[y] end subgraph id2[M\u00e9moire] style id2 fill:#29f,stroke:#333,stroke-width:2px subgraph pml2[Adresses] direction RL A3[ #89] A4[ #719] end subgraph iop2[Valeur] B3[1] B4[1.0] end A3---B3 A4---B4 end end subgraph Ligne 2 . .. . . . . . ..________________ direction LR p1[x]-->A1 q1[y]-->A2 subgraph t1[Variables] style t1 fill:#29f,stroke:#333,stroke-width:2px direction LR p1[x] q1[y] end subgraph id1[M\u00e9moire] style id1 fill:#29f,stroke:#333,stroke-width:2px subgraph pml1[Adresses] direction RL A1[ #89] A2[ #719] end subgraph iop1[Valeur] B1[1] B2[1.0] end A1---B1 A2---B2 end end subgraph Ligne 1 . .. . . . . . ...____________ direction LR p[x]-->A subgraph t[Variables] style t fill:#29f,stroke:#333,stroke-width:2px direction LR p[x] end subgraph id[M\u00e9moire] style id fill:#29f,stroke:#333,stroke-width:2px subgraph pml[Adresses] direction RL A[ #89] end subgraph iop[Valeur] B[1] end A---B end end Exercice 15 Sur une feuille de papier, dessiner les deux sch\u00e9mas correspondant aux deux \u00e9tapes : x = 3.1415 x = str ( x ) \u00c0 quoi \u00e7a sert ? Le transtypage sera particuli\u00e8rement important lorsque nous lirons des fichiers externes en mode texte. Toutes leurs donn\u00e9es seront en effet consid\u00e9r\u00e9es comme du texte que nous devrons convertir, au besoin, en donn\u00e9es num\u00e9riques. Op\u00e9rations simples \u2693\ufe0e Op\u00e9rations sur les types num\u00e9riques \u2693\ufe0e Cours En Python, pour les types int et float : les quatre op\u00e9rations math\u00e9matiques de base sont obtenues avec + , - , * , / ; les puissances sont obtenues avec ** ; les priorit\u00e9s op\u00e9ratoires usuelles sont respect\u00e9es, l'utilisation des parenth\u00e8ses () est possible. Les crochets ou accolades sont interdits ! Les flottants sont plus g\u00e9n\u00e9raux que les entiers. Ainsi, si on additionne un int avec un float , nous obtiendrons un float . La division donne toujours un float . Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder n = 100bksl-nla = n + 10 # additionbksl-nlb = n - 10 # soustractionbksl-nlc = n py-str 10 # multiplicationbksl-nld = n / 10 # divisionbksl-nle = npy-strpy-str10 # puissancebksl-nlprint(a, b, c, d, e)bksl-nl Op\u00e9rations Exercice 16 Exercice 17 Exercice 18 Exercice 19 Exercice 20 Exercice 21 On pose \\(n = 2\\) . Multiplier \\(n\\) par lui-m\u00eame 5 fois. Multiplier \\(n\\) par lui-m\u00eame 10 fois. Multiplier \\(n\\) par lui-m\u00eame 67 fois. Solution >>> n = 2 >>> n * n * n * n * n # n**5 32 >>> n ** 10 1024 >>> n ** 67 147573952589676412928 On pose \\(x = 12.5\\) . R\u00e9aliser le programme de calcul suivant : multiplier \\(x\\) par 4 ajouter 10 au r\u00e9sultat diviser le r\u00e9sultat par 6 Faites ce calcul en une ligne en utilisant des parenth\u00e8ses. Solution >>> x = 12.5 >>> 4 * x 50 >>> 50 + 10 60 >>> 60 / 6 10.0 En une ligne : ( 4 * x + 10 ) / 6 . On pose \\(p = 3\\) . On va modifier la valeur r\u00e9f\u00e9renc\u00e9e par la variable \\(p\\) . R\u00e9aliser le programme de calcul suivant : \\(p \\leftarrow p+3\\) (la nouvelle valeur de \\(p\\) est \u00e9gale \u00e0 l'ancienne valeur de \\(p\\) augment\u00e9e de 3) \\(p \\leftarrow p \\times 3\\) (la nouvelle valeur de \\(p\\) est \u00e9gale \u00e0 l'ancienne valeur de \\(p\\) multipli\u00e9e par 3) \\(p \\leftarrow \\dfrac{p}{1.5}\\) (la nouvelle valeur de \\(p\\) est \u00e9gale \u00e0 l'ancienne valeur de \\(p\\) divis\u00e9e par 1.5) Faites ce calcul en une ligne gr\u00e2ce aux parenth\u00e8ses. Solution Vous devez trouver 12.0 . Dans la variable dur\u00e9e_heure , on donne une dur\u00e9e en heure. Par exemple, dur\u00e9e_heure = 2900 . \u00c9crire les op\u00e9rations permettant de convertir cette dur\u00e9e en jour et en semaine. On stockera ces dur\u00e9es dans les variables flottantes dur\u00e9e_jour et dur\u00e9e_semaine . Solution Vous devez trouver dur\u00e9e_jour = dur\u00e9e_heure / 24 et dur\u00e9e_semaine = dur\u00e9e_heure / 24 / 7 . On choisit deux nombres entiers \\(a = 88\\) et \\(b=12\\) . On va calculer le quotient \\(q\\) et le reste \\(r\\) de la division euclidienne de \\(a\\) par \\(b\\) . On rappelle que le quotient est la partie enti\u00e8re (avant la virgule) de \\(\\dfrac{a}{b}\\) et que \\(a = b\\times q+r\\) . Exemple \\(8/3 \\approx 2.66666\\) donc le quotient de la division euclidienne de \\(8\\) par \\(3\\) vaut 2. Calculez \\(q \\leftarrow \\dfrac{a}{b}\\) Convertissez \\(q\\) en entier avec int ( ... ) . \u00c0 partir de \\(a, b, q\\) , calculez la valeur de \\(r\\) . Aide En deux \u00e9tapes, on fait : q = a / b q = int ( q ) ou en une \u00e9tape : q = int ( a / b ) . Solution q = 7 et r = 4 . On reprend l'exercice pr\u00e9c\u00e9dent mais on souhaite calculer le quotient \\(q\\) et le reste \\(r\\) en une seule ligne ! Aide Pour initialiser plusieurs variables sur une ligne, on utilise var1 , var2 , var3 , ... = 1 , 'avion' , 3.5 , ... . Solution q , r = int ( a / b ), a - b * int ( a / b ) . >>> En informatique, on calcule r\u00e9guli\u00e8rement des quotients et des restes. Plut\u00f4t que d'utiliser les formules complexes trouv\u00e9es \u00e0 l'exercice pr\u00e9c\u00e9dent, on utilise : a // b pour calculer le quotient d'une division euclidienne ; a % b pour calculer le reste d'une division euclidienne. Exercice 22 Question Solution Calculez le quotient et le reste de la division euclidienne de : 9 et 2 ; 81 et 3 ; 102 et 10 ; 21.7 et 7 ; 21.7 et 7.3 . Calculez le quotient et le reste de la division euclidienne de : q , r = 9 // 2 , 9 % 2 donne : q , r = 4 , 1 ; q , r = 81 // 3 , 81 % 3 donne : q , r = 27 , 0 ; q , r = 102 // 10 , 102 % 10 donne : q , r = 10 , 2 ; q , r = 21.7 // 7 , 21.7 % 7 donne : q , r = 3.0 , 0.6999999999999993 (Bizarre ce reste...); q , r = 21.7 // 7.3 , 21.7 % 7.3 donne : q , r = 2.0 , 7.1 . // et % fonctionnent entre flottants. >>> Op\u00e9rations sur les chaines de caract\u00e8res (mots) \u2693\ufe0e Dans un langage humain, le processus d'\u00e9criture consiste en l' ajout de mots les uns \u00e0 la suite des autres. On peut se r\u00e9p\u00e9ter en multipliant nos propos. Cours En Python, pour le type str : l'addition de mots s'obtient avec + ; la r\u00e9p\u00e9tition de mots s'obtient avec * ; Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder mot = \"Salut \"bksl-nlphrase = mot + \"\u00c3 tous ! \"bksl-nlprint(phrase)bksl-nlbksl-nlphrasepy-undr\u00c3\u00a9p\u00c3\u00a9t\u00c3\u00a9e = phrase py-str 3bksl-nlprint(phrasepy-undr\u00c3\u00a9p\u00c3\u00a9t\u00c3\u00a9e)bksl-nlbksl-nl# Ajoutez les lignes permettant d'afficher bksl-nl# Salut Salut Salut \u00c3 tous !bksl-nl Paroles She's crazy like a fool What about it Daddy Cool I'm crazy like a fool What about it Daddy Cool Daddy, Daddy Cool Daddy, Daddy Cool Daddy, Daddy Cool Daddy, Daddy Cool She's crazy like a fool What about it Daddy Cool I'm crazy like a fool What about it Daddy Cool Daddy, Daddy Cool Daddy, Daddy Cool Daddy, Daddy Cool Daddy, Daddy Cool Exercice 23 Question Solution En utilisant le moins de lignes possibles, reproduisez les paroles de cette c\u00e9l\u00e8bre chanson. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder sujet1 = \"She's \" # On peut mettre un guillemet ' dans des \"\"bksl-nlsujet2 = \"I'm \"bksl-nlnom = \" Cool \\n\" # \"\\n\" force un retour \u00c3 la lignebksl-nltitre = \"Daddy\"bksl-nlphrase1 = \"crazy like a fool \\n\" # \"\\n\" force un retour \u00c3 la lignebksl-nlphrase2 = \"What about it \"bksl-nlbksl-nlprint(sujet1 + phrase1)bksl-nl sujet1 = \"She's \" # On peut mettre un guillemet ' dans des \"\"bksl-nlsujet2 = \"I'm \"bksl-nlnom = \" Cool \\n\"bksl-nltitre = \"Daddy\"bksl-nlphrase1 = \"crazy like a fool \\n\" # \\n force un retour \u00c3 la lignebksl-nlphrase2 = \"What about it \"bksl-nlphrase3 = phrase2 + titre + nom # \"What about it\" + \"Daddy\" + \"Cool\"bksl-nlbksl-nlrefrain = sujet1 + phrase1 + phrase3 + sujet2 + phrase1 + phrase3bksl-nl# on prend le refrain d'avant, on saute une ligne et r\u00c3\u00a9p\u00c3\u00a8te 4 fois \"Daddy, Daddy Cool\"bksl-nl# on r\u00c3\u00a9p\u00c3\u00a8te deux fois le m\u00c3\u00aame bloc \"She's crazy....\" et \"Daddy, Daddy Cool\"bksl-nlchanson = (refrain + \"\\n\" + (titre + \", \" + titre + nom) py-str 4 + \"\\n\") py-str 2bksl-nlprint(chanson)bksl-nl Une solution possible : Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder Op\u00e9rations interdites \u2693\ufe0e Certaines op\u00e9rations sont interdites. L'interpr\u00e9teur Python va alors vous avertir avec un message d'erreur : il faut apprendre \u00e0 lire ces messages qui souvent vous expliquent ce qui ne fonctionne pas. Exemples Exemple 1 Exemple 2 >>> 4 + '4' Traceback ( most recent call last ): File \"<console>\" , line 1 , in < module > TypeError : unsupported operand type ( s ) for + : 'int' and 'str' Python nous avertit que l'op\u00e9rateur + ne peut \u00eatre appliqu\u00e9 entre deux op\u00e9randes de type int et de type str , ce qui est logique : on n'ajoute que des nombres entre eux ou que des mots entre eux. Pas de m\u00e9lange ! >>> 'Coucou' * 1.2 Traceback ( most recent call last ): File \"<console>\" , line 1 , in < module > TypeError : cannot multiply sequence by non - int of type 'float' Python nous avertit qu'un str ne peut pas \u00eatre multipli\u00e9 par un float (un non- int .), ce qui est logique : la multiplication est la r\u00e9p\u00e9tition de mots. Exercice 24 Expliquez l'erreur que vous obtenez quand vous tapez : \"4\" - 2 ; \"Allo ?\" ** 10 ; \"8\" * 10 / 2 . >>> Exercice 25 Question Solution Essayez de pr\u00e9dire le r\u00e9sultat de chacune des instructions suivantes, puis v\u00e9rifiez-le dans la console : Expression R\u00e9sultat 1 R\u00e9sultat 2 R\u00e9sultat 3 R\u00e9sultat 4 ( 1 + 3 ) * 4 16 16.0 13 unsupported operand type ( s ) for + : 'int' and 'int' 5 / 2 2 2.5 1 2.0 \"Six\" + 3 \"Six3\" 63 9 unsupported operand type ( s ) for + : 'str' and 'int' 'adf' + 'bce' \"abcdef\" 'adfbce' \"adfbce\" unsupported operand type ( s ) for + : 'str' and 'str' ( \"La\" + \"Li\" ) * 3 \"LaLiLiLi\" \"LaLiLaLiLaLi\" \"LaLi\" * 3 cannot multiply sequence by non - int of type 'float' 70 / 7 + 1 11.0 11 8.75 10 + 1 \"(1 + 3)\" * 2 \"44\" 8 \"(1+3)(1+3)\" unsupported operand type ( s ) for * : 'str' and 'int' \"Ba\" * 4 / 2 \"BaBa\" \"Ba2\" \"BaBaBa\" unsupported operand type ( s ) for / : 'str' and 'int' \"Ba\" * ( 4 / 2 ) \"BaBa\" BaBa \"BaBaBaBa\" cannott multiply sequence by non - int of type 'float' 89 % 2 1 True 44 1.0 Utilisez le cours et la console pour comprendre la correction ci-dessous. Expression R\u00e9sultat 1 R\u00e9sultat 2 R\u00e9sultat 3 R\u00e9sultat 4 ( 1 + 3 ) * 4 16 16.0 13 unsupported operand type ( s ) for + : 'int' and 'int' 5 / 2 2 2.5 1 2.0 \"Six\" + 3 \"Six3\" 63 9 unsupported operand type ( s ) for + : 'str' and 'int' 'adf' + 'bce' \"abcdef\" 'adfbce' \"adfbce\" unsupported operand type ( s ) for + : 'str' and 'str' ( \"La\" + \"Li\" ) * 3 \"LaLiLiLi\" \"LaLiLaLiLaLi\" \"LaLi\" * 3 cannot multiply sequence by non - int of type 'float' 70 / 7 + 1 11.0 11 8.75 10 + 1 \"(1 + 3)\" * 2 \"44\" 8 \"(1+3)(1+3)\" unsupported operand type ( s ) for * : 'str' and 'int' \"Ba\" * 4 / 2 \"BaBa\" \"Ba2\" \"BaBaBa\" unsupported operand type ( s ) for / : 'str' and 'int' \"Ba\" * ( 4 / 2 ) \"BaBa\" BaBa \"BaBaBaBa\" cannot multiply sequence by non - int of type 'float' 89 % 2 1 True 44 1.0 >>> R\u00e9sum\u00e9 \u2693\ufe0e R\u00e9sum\u00e9 Dans ce chapitre, j'ai appris : ce qu'est une variable (nom, valeur) comment nommer une variable correctement (snake_case) qu'une variable est typ\u00e9e ( int , float , bool , str ) qu'on ne peut pas effectuer n'importe quelle op\u00e9ration sur n'importe quel type de variable \u00e0 comprendre (un peu) les messages d'erreur la tradition d\u2019utiliser hello world comme premier programme de test a \u00e9t\u00e9 initi\u00e9e par le livre The C Programming Language de Brian Kernighan et Dennis Ritchie, publi\u00e9 en 1978. \u21a9 Ce changement de type est appel\u00e9 transtypage ou casting . \u21a9","title":"Variables"},{"location":"python1/#variables","text":"","title":"Variables"},{"location":"python1/#terminal-console-et-editeur-de-code","text":"Un terminal est une invite de commandes permettant \u00e0 l'homme et \u00e0 la machine de communiquer de mani\u00e8re interactive. Pour programmer, il existe deux grands types d'outils : la console (aussi appel\u00e9 interpr\u00e9teur) permet de r\u00e9aliser des calculs, des tests rapides ainsi que des programmes courts. On ne sauvegarde pas son travail ; l'\u00e9diteur de code permet d'\u00e9crire un programme complexe dans un langage donn\u00e9 et de sauvegarder son travail. Il est souvent combin\u00e9 \u00e0 un interpr\u00e9teur afin d'ex\u00e9cuter le programme et de le rendre compr\u00e9hensible par l'ordinateur. Exemple Une console Un \u00e9diteur de code Calculez la somme de 134 et de 5677 dans la console. Pour valider, appuyez sur Enter . Faites \u00e9galement leur multiplication \u00e0 l'aide de l'op\u00e9rateur * . >>> Lancez le script \u00e0 l'aide de la fl\u00e8che. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder # \u00c3\u20ac gauche, l'\u00c3\u00a9diteur de code !bksl-nlprint('\u00c3\u20ac droite, la console')bksl-nl Au fur et \u00e0 mesure de votre apprentissage, vous utiliserez des \u00e9diteurs de code de plus en plus perfectionn\u00e9s : ce site web ; Thonny ; VSCodium.","title":"Terminal, console et \u00e9diteur de code"},{"location":"python1/#hello-world","text":"Premiers pas Si votre console contient trop d'\u00e9l\u00e9ments, tapez clear pour tout effacer. L'historique sera conserv\u00e9. Exercice 1 Exercice 2 Exercice 3 Cr\u00e9ons tout de suite notre premier programme 1 . Dans la console ci-dessous, tapez : print ( \"Hello world !\" ) et appuyez sur Enter . Que se passe-t-il ? Dans la console, affichez la phrase \"Bonjour le monde !\". Aide Avez-vous bien utilis\u00e9 des guillemets comme dans l'exercice pr\u00e9c\u00e9dent ? Dans la console ci-dessous, r\u00e9alisez la soustraction de 956 et de 649. Utilisez l'instruction print pour afficher \u00e0 nouveau le r\u00e9sultat de cette op\u00e9ration. Aide On ne peut pas soustraire un affichage avec print . Pas de guillemets ici. Voyez-vous quelle est la diff\u00e9rence fondamentale entre la soustraction et les phrases des exercices 1 et 2 ? >>> Important Vous obtenez le m\u00eame affichage que vous fassiez 45 * 4 ou print ( 45 * 4 ) . On aurait pu aussi taper >>> \"Hello World !\" sans print . Cela fonctionne car la console \u00e9value des expressions Python puis affiche le r\u00e9sultat de l'\u00e9valuation. print sera principalement utilis\u00e9e pour afficher la valeur r\u00e9f\u00e9renc\u00e9e par une variable dans des programmes complexes.","title":"Hello World !"},{"location":"python1/#notion-de-variable","text":"Nous \u00e9voquons ci-dessous la notion de variable. Celle-ci sera revue en cours en activit\u00e9 d\u00e9branch\u00e9e. Cours Une variable repr\u00e9sente une zone de stockage dans la m\u00e9moire de l'ordinateur. Elle permet donc \u00e0 l'humain d'acc\u00e9der \u00e0 des valeurs num\u00e9riques, du texte ou des tableaux de nombres stock\u00e9s dans l'ordinateur \u00e0 une adresse pr\u00e9cise. Une variable contient une r\u00e9f\u00e9rence (une sorte d'adresse) vers un objet contenant une valeur. Un humain acc\u00e8de \u00e0 ces valeurs gr\u00e2ce \u00e0 un nom de variable . L'instruction x = 2 permet de relier un nom de variable x avec une valeur 2 . Le nom de variable x contient donc l'adresse de la valeur enti\u00e8re 2 . Ce lien = ne fonctionne que dans un sens : de la droite vers la gauche ou \u2190 . annee = 2010 # Ligne 1 envol = annee # Ligne 2 annee = annee + 1 # Ligne 3 # Ligne 1 : la variable nomm\u00e9e \"annee\", est associ\u00e9e \u00e0 une valeur (ici 2010) # Ligne 2 : la variable nomm\u00e9e \"envol\" contient la m\u00eame adresse que la variable nomm\u00e9e \"annee\". # Elle r\u00e9f\u00e9rence donc la m\u00eame valeur (ici 2010). # Ligne 3 : On ajoute 1 \u00e0 la valeur pr\u00e9c\u00e9demment r\u00e9f\u00e9renc\u00e9e par la variable nomm\u00e9e \"annee\". # Une nouvelle zone m\u00e9moire est r\u00e9serv\u00e9e. \"annee\" contient une nouvelle adresse, # associ\u00e9e \u00e0 la valeur 2011. %%{init:{'theme': 'dark' }}%% flowchart TD subgraph Apr\u00e8s la ligne 3 . . . . _ ______________ direction LR p[envol]-->A21 q[annee]-.->|X|A21 q[annee]-->A41 subgraph t[Variables] style t fill:#29f,stroke:#333,stroke-width:2px direction LR q[annee] p[envol] end subgraph id2[M\u00e9moire] style id2 fill:#29f,stroke:#333,stroke-width:2px subgraph pml[Adresses] direction RL A21[ #56] A41[ #691] A51[ ...] end subgraph iop[Valeurs] B111[2010] B11[2011] end A21---B111 A41---B11 end end subgraph Avant . . . . . _ ______________ direction LR envol-->A2 annee-->A2 subgraph Variables style Variables fill:#29f,stroke:#333,stroke-width:2px direction LR annee envol end subgraph id[M\u00e9moire] style id fill:#29f,stroke:#333,stroke-width:2px subgraph Adresses direction RL A2[#56] A3[...] A4[#691] A5[...] end subgraph Valeur B[2010] end A2---B end end Vocabulaire D\u00e9claration Initialisation Affectation Incr\u00e9mentation Une d\u00e9claration indique l'existence d'une entit\u00e9 informatique poss\u00e9dant certaines caract\u00e9ristiques. Exemple En Fortran 90, on d\u00e9clare des variables pi et entier ainsi : real :: pi integer :: entier Pour aller plus loin Dans de nombreux langages de programmation, la d\u00e9claration permet de d\u00e9finir le nombre d'octets \u00e0 r\u00e9server en m\u00e9moire, sa repr\u00e9sentation interne, l'ensemble des valeurs admissibles et l'ensemble des op\u00e9rateurs qui peuvent lui \u00eatre appliqu\u00e9s. Une initialisation est l'association initiale d'un contenu (une valeur) avec une variable d\u00e9clar\u00e9e pr\u00e9alablement. Exemple On initialise les variables pi et entier : pi = 3.141592 entier = 42 Une affectation est l'association d'un contenu (une valeur) avec une variable d\u00e9j\u00e0 initialis\u00e9e . Exemple On affecte de nouvelles valeurs aux variables pi et entier : pi = 6.283184 entier = 42 * 8 Une incr\u00e9mentation est l'augmentation r\u00e9guli\u00e8re de la valeur associ\u00e9e \u00e0 une variable. Exemple pi = pi + 2 # la variable pi est reli\u00e9e \u00e0 l'ancienne valeur de pi augment\u00e9e de 2. Pour aller plus loin Ce symbole = n'a rien \u00e0 voir avec le \u00e9gal math\u00e9matique. a = a + 2 a un sens en Python mais est une proposition logique fausse en Maths. Cours En Python, la d\u00e9claration et l'initialisation se font en m\u00eame temps. On appelle cela le typage dynamique . Lorsque Python voit x = 2 : il comprend qu'un entier arrive et r\u00e9serve l'espace en m\u00e9moire pour stocker cet entier (d\u00e9claration); il comprend que la variable nomm\u00e9e x r\u00e9f\u00e9rence la valeur 2 (initialisation). Pour aller plus loin En Python, le typage dynamique permet la modification du type r\u00e9f\u00e9renc\u00e9 par la variable x . Par exemple, x = 'Bonjour' permet de r\u00e9f\u00e9rencer le mot 'Bonjour' plut\u00f4t que l'entier 2 . En Python, ces changements de types (passage d'un mot \u00e0 un entier) se font via le duck typing . Pour faire simple, le duck typing permet de faire cela : Cr\u00e9er des variables Exercice 4 Exercice 5 Exercice 6 Exercice 7 Exercice 8 Dans la console ci-dessous, cr\u00e9ez une variable enti\u00e8re nomm\u00e9e m repr\u00e9sentant la valeur 7. Affichez ensuite la valeur r\u00e9f\u00e9renc\u00e9e par cette variable. Dans la console ci-dessous, cr\u00e9ez une variable r\u00e9elle nomm\u00e9e vitesse_initiale repr\u00e9sentant la valeur 12.7 . Affichez ensuite la valeur r\u00e9f\u00e9renc\u00e9e par cette variable . Dans la console ci-dessous, cr\u00e9ez une variable de type mot nomm\u00e9e 3l3ment repr\u00e9sentant la valeur \"D\u00e9buter en Python\" . Affichez ensuite cette variable dans la console. Aide Une erreur apparait. Il est interdit de commencer des noms de variables avec des chiffres. Renommez-l\u00e0 ! Dans la console ci-dessous, cr\u00e9ez deux variables enti\u00e8res nomm\u00e9es p et q repr\u00e9sentant les valeurs 77 et 5. Affichez d'abord p, puis q dans la console. Comment feriez-vous pour afficher p et q simultan\u00e9ment ? Astuce En Python, on peut d\u00e9clarer et initialiser deux variables (ou plus) simultan\u00e9ment. Pour cr\u00e9er a et b , on ferait : a , b = 4 , 5 . Dans la console ci-dessous, cr\u00e9ez trois variables nomm\u00e9es nb_passager , vitesse_moyenne_avion et nom_compagnie repr\u00e9sentant les valeurs 237, 977.3, \"Air France\". Affichez simultan\u00e9ment les trois valeurs dans la console ci-dessous. >>>","title":"Notion de variable"},{"location":"python1/#nommage","text":"Dans les exercices pr\u00e9c\u00e9dents, vous avez du remarquer que les variables : ne peuvent pas porter n'importe quel nom ; pointent vers diff\u00e9rents types de donn\u00e9es. Cours En Python, le nom d'une variable doit \u00eatre choisi parmi les lettres de l'alphabet (minuscule et majuscule \u00e9tant consid\u00e9r\u00e9es comme diff\u00e9rentes), les chiffres et le symbole _ . Les espaces ne sont pas autoris\u00e9es : on utilisera donc le tiret bas _ (appel\u00e9 aussi underscore ) pour les variables dont le nom est long. Le nom d'une variable doit \u00eatre choisi de fa\u00e7on \u00e0 \u00eatre facilement compr\u00e9hensible par un humain (ni trop court, ni trop d\u00e9taill\u00e9). Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder moyennepy-undmaths, moyennepy-undfran\u00c3\u00a7ais = 14, 12bksl-nlmoyennepy-undhistoire, moyennepy-undemc = 11, 18bksl-nlbksl-nlmoyennepy-undtotal = (moyennepy-undmaths + moyennepy-undhistoire + moyennepy-undfran\u00c3\u00a7ais + moyennepy-undemc) / 4bksl-nlprint(moyennepy-undtotal)bksl-nl Pour aller plus loin Cette convention de nommage s'appelle le snake case et est pr\u00e9conis\u00e9e pour Python. On \u00e9crira donc nombre_op\u00e9rations_par_seconde plut\u00f4t que NombreOp\u00e9rationParSeconde . Vrai/Faux sur le nommage des variables Cocher les identifiants valides. Question Solution pas Roi 2ame v413t dix n'\u0153uf huit S\u00e8te carte_six _5 %4 quatre-moins-un 2! _ pas Roi ; non conforme au snake case mais valide. 2ame ; interdit de commencer par un chiffre. v413t dix n'\u0153uf ; interdit d'utiliser ' huit S\u00e8te ; non conforme au snake case mais valide. carte_six ; tr\u00e8s bon choix ! _5 ; tr\u00e8s mal choisi mais valide. %4 ; interdit d'utiliser % quatre-moins-un ; interdit d'utiliser - 2! ; interdit d'utiliser ! _ Choisir des noms de variables Exercice 9 Exercice 10 Exercice 11 Dans la console ci-dessous, cr\u00e9ez une variable enti\u00e8re repr\u00e9sentant le nombre de briques de lait stock\u00e9es dans un entrepot. On l'initialisera \u00e0 10000 briques. Cr\u00e9ez \u00e0 pr\u00e9sent une variable r\u00e9elle repr\u00e9sentant le volume total de toutes ces briques de lait. Pour l'initialiser, on consid\u00e9rera qu'une brique contient 0.75 L de lait. Solution nb_briques_lait est le meilleur nom. nombre_briques , nb_briques , ou n_briques_lait sont des noms corrects. nombrebriques , nBriquesLait ou nombre_de_briques_de_lait_dans_entrepot ne respectent pas le snake case ou sont trop longs. volume_total_lait est le meilleur nom. volume_total_briques ou vol_tot_briques sont corrects. Dans la console ci-dessous, cr\u00e9ez deux variables enti\u00e8res repr\u00e9sentant les coordonn\u00e9es d'un point A du plan. On initialisera ces variables \u00e0 - 4 et 2 . Cr\u00e9ez \u00e0 pr\u00e9sent deux variables repr\u00e9sentant les coordonn\u00e9es d'un vecteur \\(\\vec{u}\\) du plan. On initialisera ces variables \u00e0 2 et - 1 . Solution x et y sont appropri\u00e9s s'il n'y a qu'un seul point. x_A et y_A sont \u00e9galement convenables. vec_x et vec_y sont appropri\u00e9s s'il n'y a qu'un seul vecteur. vec_u_x et vec_u_y sont \u00e9galement convenables. Par contre, vecX , VEC_Y ou abscisse_vecteur_u sont \u00e0 \u00e9viter. Dans la console ci-dessous, cr\u00e9ez une variable de type tableau repr\u00e9sentant l'ensemble des temp\u00e9ratures du lac L\u00e9man relev\u00e9es sur 4 jours. On initialisera notre variable gr\u00e2ce au tableau Python [ 17.7 , 18.1 , 18.2 , 18.8 ] . Solution temp_lac ou temp_lac_l\u00e9man sont appropri\u00e9s. temp pourrait \u00eatre correct mais est trop vague et temp\u00e9rature_lac_l\u00e9man_4jours est trop long. >>>","title":"Nommage"},{"location":"python1/#types-de-variables","text":"Depuis le d\u00e9but du cours, vous avez du remarquer que les variables que l'on manipule ne repr\u00e9sentent pas toujours le m\u00eame objet (des entiers, des mots, des nombres \u00e0 virgules). Dans un langage de programmation, les objets r\u00e9f\u00e9renc\u00e9s par les variables sont typ\u00e9es : ce sont des entiers, des r\u00e9els , des tableaux etc. Ce type est d\u00e9fini au moment de la d\u00e9claration. Cours Les types principaux en Python sont : les entiers (relatifs) : type int ; les flottants (approximation des nombres r\u00e9els par des d\u00e9cimaux) : type float ; les chaines de caract\u00e8res (mots ou texte) : type str ; les bool\u00e9ens ( True ou False ) : type bool . Les bool\u00e9ens sont des variables n'ayant que deux valeurs possibles : Vrai ou Faux. Pour aller plus loin Nous aurons rapidement besoin d'autres types permettant de d\u00e9crire des ensembles de donn\u00e9es : les n-uplets : type tuple ; les tableaux : type list ; les dictionnaires : type dict . Exercice 12 En vous aidant des exercices pr\u00e9c\u00e9dents, d\u00e9terminez les types des variables ci-dessous : Question Solution Types int float str bool p = 8 nom = \"Von Neumann\" e = 2.7172 p = 8.0 huit = \"8\" r = 0 r = - 120000 arriv\u00e9 = True huit = \"8.0\" mort = \"False\" Types int float str bool explication p = 8 nom = \"Von Neumann\" e = 2.7172 Le s\u00e9parateur d\u00e9cimal est un point. p = 8.0 Le s\u00e9parateur d\u00e9cimal est un point. huit = \"8\" Les guillemets indiquent un str . r = 0 0 est un entier. r = - 120000 r est un entier n\u00e9gatif donc relatif. arriv\u00e9 = True True et False sont des mots r\u00e9serv\u00e9s. huit = \"8.0\" Les guillemets indiquent un str . mort = \"False\" Pour aller plus loin Pour connaitre le type r\u00e9f\u00e9renc\u00e9e par une variable, on utilise l'instruction type ( ...... ) . Par exemple, type ( 6100 ) renvoie < class ' int '> . >>> Cours Les entiers int se remarquent par l'absence de virgules. Pour les grands nombres, il est possible de s\u00e9parer les diff\u00e9rents chiffres avec un tiret bas : 123_456_789 correspond au nombre \\(123456789\\) . Les flottants float sont \u00e9crits avec un point en guise de virgule : 3.1415 est le nombre \u00e9gal \u00e0 \\(3,1415\\) . Les chaines de caract\u00e8res str peuvent \u00eatre \u00e9crites de trois mani\u00e8res : guillemets simples ou doubles : 'une chaine' ou \"de caract\u00e8res\" guillemets doubles si pr\u00e9sence d'un guillemet simple dans la chaine de caract\u00e8res : \"l'oiseau\" trois guillemets doubles si pr\u00e9sence de guillemets simples et doubles dans la chaine de caract\u00e8res : \"\"\"L'oiseau dit : \"tu ne m'auras pas\".\"\"\" Manipuler des types simples Exercice 13 Exercice 14 Dans le terminal ci-dessous, initialiser les variables a , b , c , d , e , f \u00e0 100; -8; 9,99; 8 290 753 123; Vrai; \"Bonjour\". V\u00e9rifier vos r\u00e9ponses en affichant la variable et son type dans le terminal. Exemple : z = 99 z , type ( z ) Voici une discussion entre \u00e9l\u00e8ves : - Bonjour. Que fais-tu? - Salut, j'apprends Python. - Pas facile ! Mais Guido a dit : \"Ca va \u00eatre tellement utile\". Dans le terminal ci-dessous, initialiser les variables phrase_1 , phrase_2 , phrase_3 \u00e0 ces trois phrases. Aide Relisez le cours sur les trois m\u00e9thodes permettant d'initialiser des chaines de caract\u00e8res. >>> On peut convertir un objet d'un certain type en un autre type. Par exemple, on peut convertir une valeur r\u00e9f\u00e9renc\u00e9e par une variable 2 : en entier en utilisant int ( variable ) ; en flottant en utilisant float ( variable ) ; en chaine de caract\u00e8res en utilisant str ( variable ) . x = 1 # Ligne 1 y = float ( x ) # Ligne 2 : y r\u00e9f\u00e9rence maintenant un str x = y # Ligne 3 %%{init:{'theme': 'dark' }}%% flowchart TD subgraph Ligne 3 . . . ..____________________ direction LR p2[x]-.->|X|A3 p2[x]-->A4 q2[y]-->A4 subgraph t2[Variables] style t2 fill:#29f,stroke:#333,stroke-width:2px direction LR p2[x] q2[y] end subgraph id2[M\u00e9moire] style id2 fill:#29f,stroke:#333,stroke-width:2px subgraph pml2[Adresses] direction RL A3[ #89] A4[ #719] end subgraph iop2[Valeur] B3[1] B4[1.0] end A3---B3 A4---B4 end end subgraph Ligne 2 . .. . . . . . ..________________ direction LR p1[x]-->A1 q1[y]-->A2 subgraph t1[Variables] style t1 fill:#29f,stroke:#333,stroke-width:2px direction LR p1[x] q1[y] end subgraph id1[M\u00e9moire] style id1 fill:#29f,stroke:#333,stroke-width:2px subgraph pml1[Adresses] direction RL A1[ #89] A2[ #719] end subgraph iop1[Valeur] B1[1] B2[1.0] end A1---B1 A2---B2 end end subgraph Ligne 1 . .. . . . . . ...____________ direction LR p[x]-->A subgraph t[Variables] style t fill:#29f,stroke:#333,stroke-width:2px direction LR p[x] end subgraph id[M\u00e9moire] style id fill:#29f,stroke:#333,stroke-width:2px subgraph pml[Adresses] direction RL A[ #89] end subgraph iop[Valeur] B[1] end A---B end end Exercice 15 Sur une feuille de papier, dessiner les deux sch\u00e9mas correspondant aux deux \u00e9tapes : x = 3.1415 x = str ( x ) \u00c0 quoi \u00e7a sert ? Le transtypage sera particuli\u00e8rement important lorsque nous lirons des fichiers externes en mode texte. Toutes leurs donn\u00e9es seront en effet consid\u00e9r\u00e9es comme du texte que nous devrons convertir, au besoin, en donn\u00e9es num\u00e9riques.","title":"Types de variables"},{"location":"python1/#operations-simples","text":"","title":"Op\u00e9rations simples"},{"location":"python1/#operations-sur-les-types-numeriques","text":"Cours En Python, pour les types int et float : les quatre op\u00e9rations math\u00e9matiques de base sont obtenues avec + , - , * , / ; les puissances sont obtenues avec ** ; les priorit\u00e9s op\u00e9ratoires usuelles sont respect\u00e9es, l'utilisation des parenth\u00e8ses () est possible. Les crochets ou accolades sont interdits ! Les flottants sont plus g\u00e9n\u00e9raux que les entiers. Ainsi, si on additionne un int avec un float , nous obtiendrons un float . La division donne toujours un float . Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder n = 100bksl-nla = n + 10 # additionbksl-nlb = n - 10 # soustractionbksl-nlc = n py-str 10 # multiplicationbksl-nld = n / 10 # divisionbksl-nle = npy-strpy-str10 # puissancebksl-nlprint(a, b, c, d, e)bksl-nl Op\u00e9rations Exercice 16 Exercice 17 Exercice 18 Exercice 19 Exercice 20 Exercice 21 On pose \\(n = 2\\) . Multiplier \\(n\\) par lui-m\u00eame 5 fois. Multiplier \\(n\\) par lui-m\u00eame 10 fois. Multiplier \\(n\\) par lui-m\u00eame 67 fois. Solution >>> n = 2 >>> n * n * n * n * n # n**5 32 >>> n ** 10 1024 >>> n ** 67 147573952589676412928 On pose \\(x = 12.5\\) . R\u00e9aliser le programme de calcul suivant : multiplier \\(x\\) par 4 ajouter 10 au r\u00e9sultat diviser le r\u00e9sultat par 6 Faites ce calcul en une ligne en utilisant des parenth\u00e8ses. Solution >>> x = 12.5 >>> 4 * x 50 >>> 50 + 10 60 >>> 60 / 6 10.0 En une ligne : ( 4 * x + 10 ) / 6 . On pose \\(p = 3\\) . On va modifier la valeur r\u00e9f\u00e9renc\u00e9e par la variable \\(p\\) . R\u00e9aliser le programme de calcul suivant : \\(p \\leftarrow p+3\\) (la nouvelle valeur de \\(p\\) est \u00e9gale \u00e0 l'ancienne valeur de \\(p\\) augment\u00e9e de 3) \\(p \\leftarrow p \\times 3\\) (la nouvelle valeur de \\(p\\) est \u00e9gale \u00e0 l'ancienne valeur de \\(p\\) multipli\u00e9e par 3) \\(p \\leftarrow \\dfrac{p}{1.5}\\) (la nouvelle valeur de \\(p\\) est \u00e9gale \u00e0 l'ancienne valeur de \\(p\\) divis\u00e9e par 1.5) Faites ce calcul en une ligne gr\u00e2ce aux parenth\u00e8ses. Solution Vous devez trouver 12.0 . Dans la variable dur\u00e9e_heure , on donne une dur\u00e9e en heure. Par exemple, dur\u00e9e_heure = 2900 . \u00c9crire les op\u00e9rations permettant de convertir cette dur\u00e9e en jour et en semaine. On stockera ces dur\u00e9es dans les variables flottantes dur\u00e9e_jour et dur\u00e9e_semaine . Solution Vous devez trouver dur\u00e9e_jour = dur\u00e9e_heure / 24 et dur\u00e9e_semaine = dur\u00e9e_heure / 24 / 7 . On choisit deux nombres entiers \\(a = 88\\) et \\(b=12\\) . On va calculer le quotient \\(q\\) et le reste \\(r\\) de la division euclidienne de \\(a\\) par \\(b\\) . On rappelle que le quotient est la partie enti\u00e8re (avant la virgule) de \\(\\dfrac{a}{b}\\) et que \\(a = b\\times q+r\\) . Exemple \\(8/3 \\approx 2.66666\\) donc le quotient de la division euclidienne de \\(8\\) par \\(3\\) vaut 2. Calculez \\(q \\leftarrow \\dfrac{a}{b}\\) Convertissez \\(q\\) en entier avec int ( ... ) . \u00c0 partir de \\(a, b, q\\) , calculez la valeur de \\(r\\) . Aide En deux \u00e9tapes, on fait : q = a / b q = int ( q ) ou en une \u00e9tape : q = int ( a / b ) . Solution q = 7 et r = 4 . On reprend l'exercice pr\u00e9c\u00e9dent mais on souhaite calculer le quotient \\(q\\) et le reste \\(r\\) en une seule ligne ! Aide Pour initialiser plusieurs variables sur une ligne, on utilise var1 , var2 , var3 , ... = 1 , 'avion' , 3.5 , ... . Solution q , r = int ( a / b ), a - b * int ( a / b ) . >>> En informatique, on calcule r\u00e9guli\u00e8rement des quotients et des restes. Plut\u00f4t que d'utiliser les formules complexes trouv\u00e9es \u00e0 l'exercice pr\u00e9c\u00e9dent, on utilise : a // b pour calculer le quotient d'une division euclidienne ; a % b pour calculer le reste d'une division euclidienne. Exercice 22 Question Solution Calculez le quotient et le reste de la division euclidienne de : 9 et 2 ; 81 et 3 ; 102 et 10 ; 21.7 et 7 ; 21.7 et 7.3 . Calculez le quotient et le reste de la division euclidienne de : q , r = 9 // 2 , 9 % 2 donne : q , r = 4 , 1 ; q , r = 81 // 3 , 81 % 3 donne : q , r = 27 , 0 ; q , r = 102 // 10 , 102 % 10 donne : q , r = 10 , 2 ; q , r = 21.7 // 7 , 21.7 % 7 donne : q , r = 3.0 , 0.6999999999999993 (Bizarre ce reste...); q , r = 21.7 // 7.3 , 21.7 % 7.3 donne : q , r = 2.0 , 7.1 . // et % fonctionnent entre flottants. >>>","title":"Op\u00e9rations sur les types num\u00e9riques"},{"location":"python1/#operations-sur-les-chaines-de-caracteres-mots","text":"Dans un langage humain, le processus d'\u00e9criture consiste en l' ajout de mots les uns \u00e0 la suite des autres. On peut se r\u00e9p\u00e9ter en multipliant nos propos. Cours En Python, pour le type str : l'addition de mots s'obtient avec + ; la r\u00e9p\u00e9tition de mots s'obtient avec * ; Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder mot = \"Salut \"bksl-nlphrase = mot + \"\u00c3 tous ! \"bksl-nlprint(phrase)bksl-nlbksl-nlphrasepy-undr\u00c3\u00a9p\u00c3\u00a9t\u00c3\u00a9e = phrase py-str 3bksl-nlprint(phrasepy-undr\u00c3\u00a9p\u00c3\u00a9t\u00c3\u00a9e)bksl-nlbksl-nl# Ajoutez les lignes permettant d'afficher bksl-nl# Salut Salut Salut \u00c3 tous !bksl-nl Paroles She's crazy like a fool What about it Daddy Cool I'm crazy like a fool What about it Daddy Cool Daddy, Daddy Cool Daddy, Daddy Cool Daddy, Daddy Cool Daddy, Daddy Cool She's crazy like a fool What about it Daddy Cool I'm crazy like a fool What about it Daddy Cool Daddy, Daddy Cool Daddy, Daddy Cool Daddy, Daddy Cool Daddy, Daddy Cool Exercice 23 Question Solution En utilisant le moins de lignes possibles, reproduisez les paroles de cette c\u00e9l\u00e8bre chanson. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder sujet1 = \"She's \" # On peut mettre un guillemet ' dans des \"\"bksl-nlsujet2 = \"I'm \"bksl-nlnom = \" Cool \\n\" # \"\\n\" force un retour \u00c3 la lignebksl-nltitre = \"Daddy\"bksl-nlphrase1 = \"crazy like a fool \\n\" # \"\\n\" force un retour \u00c3 la lignebksl-nlphrase2 = \"What about it \"bksl-nlbksl-nlprint(sujet1 + phrase1)bksl-nl sujet1 = \"She's \" # On peut mettre un guillemet ' dans des \"\"bksl-nlsujet2 = \"I'm \"bksl-nlnom = \" Cool \\n\"bksl-nltitre = \"Daddy\"bksl-nlphrase1 = \"crazy like a fool \\n\" # \\n force un retour \u00c3 la lignebksl-nlphrase2 = \"What about it \"bksl-nlphrase3 = phrase2 + titre + nom # \"What about it\" + \"Daddy\" + \"Cool\"bksl-nlbksl-nlrefrain = sujet1 + phrase1 + phrase3 + sujet2 + phrase1 + phrase3bksl-nl# on prend le refrain d'avant, on saute une ligne et r\u00c3\u00a9p\u00c3\u00a8te 4 fois \"Daddy, Daddy Cool\"bksl-nl# on r\u00c3\u00a9p\u00c3\u00a8te deux fois le m\u00c3\u00aame bloc \"She's crazy....\" et \"Daddy, Daddy Cool\"bksl-nlchanson = (refrain + \"\\n\" + (titre + \", \" + titre + nom) py-str 4 + \"\\n\") py-str 2bksl-nlprint(chanson)bksl-nl Une solution possible : Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder","title":"Op\u00e9rations sur les chaines de caract\u00e8res (mots)"},{"location":"python1/#operations-interdites","text":"Certaines op\u00e9rations sont interdites. L'interpr\u00e9teur Python va alors vous avertir avec un message d'erreur : il faut apprendre \u00e0 lire ces messages qui souvent vous expliquent ce qui ne fonctionne pas. Exemples Exemple 1 Exemple 2 >>> 4 + '4' Traceback ( most recent call last ): File \"<console>\" , line 1 , in < module > TypeError : unsupported operand type ( s ) for + : 'int' and 'str' Python nous avertit que l'op\u00e9rateur + ne peut \u00eatre appliqu\u00e9 entre deux op\u00e9randes de type int et de type str , ce qui est logique : on n'ajoute que des nombres entre eux ou que des mots entre eux. Pas de m\u00e9lange ! >>> 'Coucou' * 1.2 Traceback ( most recent call last ): File \"<console>\" , line 1 , in < module > TypeError : cannot multiply sequence by non - int of type 'float' Python nous avertit qu'un str ne peut pas \u00eatre multipli\u00e9 par un float (un non- int .), ce qui est logique : la multiplication est la r\u00e9p\u00e9tition de mots. Exercice 24 Expliquez l'erreur que vous obtenez quand vous tapez : \"4\" - 2 ; \"Allo ?\" ** 10 ; \"8\" * 10 / 2 . >>> Exercice 25 Question Solution Essayez de pr\u00e9dire le r\u00e9sultat de chacune des instructions suivantes, puis v\u00e9rifiez-le dans la console : Expression R\u00e9sultat 1 R\u00e9sultat 2 R\u00e9sultat 3 R\u00e9sultat 4 ( 1 + 3 ) * 4 16 16.0 13 unsupported operand type ( s ) for + : 'int' and 'int' 5 / 2 2 2.5 1 2.0 \"Six\" + 3 \"Six3\" 63 9 unsupported operand type ( s ) for + : 'str' and 'int' 'adf' + 'bce' \"abcdef\" 'adfbce' \"adfbce\" unsupported operand type ( s ) for + : 'str' and 'str' ( \"La\" + \"Li\" ) * 3 \"LaLiLiLi\" \"LaLiLaLiLaLi\" \"LaLi\" * 3 cannot multiply sequence by non - int of type 'float' 70 / 7 + 1 11.0 11 8.75 10 + 1 \"(1 + 3)\" * 2 \"44\" 8 \"(1+3)(1+3)\" unsupported operand type ( s ) for * : 'str' and 'int' \"Ba\" * 4 / 2 \"BaBa\" \"Ba2\" \"BaBaBa\" unsupported operand type ( s ) for / : 'str' and 'int' \"Ba\" * ( 4 / 2 ) \"BaBa\" BaBa \"BaBaBaBa\" cannott multiply sequence by non - int of type 'float' 89 % 2 1 True 44 1.0 Utilisez le cours et la console pour comprendre la correction ci-dessous. Expression R\u00e9sultat 1 R\u00e9sultat 2 R\u00e9sultat 3 R\u00e9sultat 4 ( 1 + 3 ) * 4 16 16.0 13 unsupported operand type ( s ) for + : 'int' and 'int' 5 / 2 2 2.5 1 2.0 \"Six\" + 3 \"Six3\" 63 9 unsupported operand type ( s ) for + : 'str' and 'int' 'adf' + 'bce' \"abcdef\" 'adfbce' \"adfbce\" unsupported operand type ( s ) for + : 'str' and 'str' ( \"La\" + \"Li\" ) * 3 \"LaLiLiLi\" \"LaLiLaLiLaLi\" \"LaLi\" * 3 cannot multiply sequence by non - int of type 'float' 70 / 7 + 1 11.0 11 8.75 10 + 1 \"(1 + 3)\" * 2 \"44\" 8 \"(1+3)(1+3)\" unsupported operand type ( s ) for * : 'str' and 'int' \"Ba\" * 4 / 2 \"BaBa\" \"Ba2\" \"BaBaBa\" unsupported operand type ( s ) for / : 'str' and 'int' \"Ba\" * ( 4 / 2 ) \"BaBa\" BaBa \"BaBaBaBa\" cannot multiply sequence by non - int of type 'float' 89 % 2 1 True 44 1.0 >>>","title":"Op\u00e9rations interdites"},{"location":"python1/#resume","text":"R\u00e9sum\u00e9 Dans ce chapitre, j'ai appris : ce qu'est une variable (nom, valeur) comment nommer une variable correctement (snake_case) qu'une variable est typ\u00e9e ( int , float , bool , str ) qu'on ne peut pas effectuer n'importe quelle op\u00e9ration sur n'importe quel type de variable \u00e0 comprendre (un peu) les messages d'erreur la tradition d\u2019utiliser hello world comme premier programme de test a \u00e9t\u00e9 initi\u00e9e par le livre The C Programming Language de Brian Kernighan et Dennis Ritchie, publi\u00e9 en 1978. \u21a9 Ce changement de type est appel\u00e9 transtypage ou casting . \u21a9","title":"R\u00e9sum\u00e9"},{"location":"python2/","text":"Structures de contr\u00f4le : conditionnelles \u2693\ufe0e Principe \u2693\ufe0e On peut imaginer qu'un programme est une suite finie de choix, permettant de s'adapter aux situations rencontr\u00e9es. Ce type de choix s'appelle un branchement conditionnel 1 . Cours Graphe de contr\u00f4le %%{init:{'theme': 'dark' }}%% graph TD; A[d\u00e9but du programme]-->p(\"#60;condition \u00e0 remplir#62;\"); p-->|Vrai|B; p-->|Faux|C; B-->D[suite du programme]; C-->D[suite du programme]; class p if; Une conditionnelle permet d'effectuer une action si une certaine condition est v\u00e9rifi\u00e9e. On peut repr\u00e9senter une telle situation dans un graphe de contr\u00f4le (voir sch\u00e9ma ci-contre). Comprendre les conditionnelles Dans les exercices ci-dessous, sur une feuille, dessinez le graphe de contr\u00f4le correspondant au programme propos\u00e9. Exercice 1 Exercice 2 Exercice 3 Exercice 4 Exercice 5 Un site de vente en ligne propose la livraison gratuite au-del\u00e0 de 90\u20ac d'achats. Voici le programme \u00e9crit en Fran\u00e7ais. 1 2 3 4 5 6 7 prix \u2190 prix du panier si prix <= 90\u20ac alors : frais_port \u2190 7\u20ac sinon : frais_port \u2190 0\u20ac prix_total \u2190 prix + frais_port afficher prix_total Solution 2 en fin de cours On donne une autre proposition pour le programme de l'exercice 1. Voici le programme \u00e9crit en Fran\u00e7ais. 1 2 3 4 5 6 frais_port \u2190 0\u20ac prix \u2190 prix du panier si prix <= 90\u20ac alors : frais_port \u2190 7\u20ac prix_total \u2190 prix + frais_port afficher prix_total Solution 3 en fin de cours Un thermostat permet de r\u00e9guler la temp\u00e9rature d'un r\u00e9frig\u00e9rateur \u00e0 5\u00b0C. Voici le programme \u00e9crit en Anglais. 1 2 3 4 5 6 temperature \u2190 measuring the inside temperature of the fridge if temperature > 5\u00b0C then : temperature \u2190 temperature - 0.1\u00b0C else: temperature \u2190 temperature + 0.1\u00b0C go back to the beginning of the program Solution 4 en fin de cours Voici un programme \u00e9crit en Python. Remarquez que les instructions sont presque les m\u00eames qu'en Anglais. 1 2 3 4 5 6 age_client = 15 if age_client <= 12 : prix = 5 else : prix = 10 print ( prix ) Solution 5 en fin de cours Voici un programme \u00e9crit en Python. Vous pouvez modifier la valeur de nombre pour vous aider \u00e0 comprendre le fonctionnement du programme. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder nombre = 48bksl-nldiviseur = 1bksl-nlbksl-nlif nombre % 2 == 0 : # si le reste de la division du nombre par 2 \u00c3\u00a9gal 0bksl-nl if nombre % 3 == 0 :bksl-nl diviseur = 2 py-str 3bksl-nl else :bksl-nl diviseur = 2bksl-nlelse :bksl-nl if nombre % 3 == 0 :bksl-nl diviseur = 3bksl-nlbksl-nlprint(diviseur)bksl-nl Solution 6 en fin de cours Conditionnelle if / else \u2693\ufe0e Cours Graphe de contr\u00f4le %%{init:{'theme': 'dark' }}%% graph TD; A[d\u00e9but code]-->p(\"condition\"); p-->|Vrai|B[bloc code B]; p-->|Faux|C[bloc code C]; B-->D[suite code]; C-->D; class p if; En Python, la syntaxe des instructions conditionnelles est la suivante : d\u00e9but code if condition : bloc code B else : bloc code C suite code Trois d\u00e9tails importants comme en Anglais, le test conditionnel est r\u00e9alis\u00e9 avec if / else ; \u00e0 la fin d'une ligne contenant if / else , on ajoute deux-points : ; tout le bloc de code B (ou C) doit \u00eatre indent\u00e9 avec une tabulation Tab . Choisissez la syntaxe correcte Question R\u00e9ponse Proposition 1 if nombre_points == 20 : niveau = niveau + 1 Proposition 2 if nombre_points = 20 : niveau = niveau + 1 Proposition 3 if nombre_points == 20 niveau = niveau + 1 Proposition 4 if nombre_points == 20 : niveau = niveau + 1 Proposition 1 : correcte ! if nombre_points == 20 : niveau = niveau + 1 Proposition 2 : attention au double \u00e9gal. if nombre_points = 20 : niveau = niveau + 1 Proposition 3 : attention aux deux-points manquants. if nombre_points == 20 niveau = niveau + 1 Proposition 4 : attention \u00e0 la tabulation qui est obligatoire. if nombre_points == 20 : niveau = niveau + 1 \u00c9crire des conditionnelles Exercice 6 Exercice 7 Exercice 8 Exercice 9 Dans l'\u00e9diteur ci-dessous, \u00e9crire un programme qui, selon la valeur d'un nombre r\u00e9el \\(n\\) : affiche \"Strictement positif\" si \\(n\\) est strictement sup\u00e9rieur \u00e0 0 ; affiche \"N\u00e9gatif ou nul\" sinon. On propose le d\u00e9but du programme avec la valeur de \\(n\\) que l'on peut faire varier. n = - 12 # valeur donn\u00e9e par l'utilisateur if n >= 0 : # condition print ( \"Strictement positif\" ) # affichage Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder n = -12bksl-nlbksl-nl n = -12bksl-nlif n >= 0:bksl-nl print(\"Strictement positif\")bksl-nlelse: bksl-nl print(\"N\u00c3\u00a9gatif ou nul\")bksl-nl Dans l'\u00e9diteur ci-dessous, \u00e9crire un programme qui, selon la valeur d'un nombre r\u00e9el \\(a\\) : affiche 'Pair' si \\(a\\) est divisible par \\(2\\) ; affiche 'Impair' sinon. On propose le d\u00e9but du programme avec la valeur de \\(a\\) que l'on peut faire varier. a = 100 # valeur donn\u00e9e par l'utilisateur if ... : ... else : ... Aide 1 On rappelle qu'un nombre \\(a\\) est divisible par un nombre \\(b\\) si le reste de la division euclidienne de \\(a\\) par \\(b\\) est \u00e9gal \u00e0 \\(0\\) . Aide 2 En Python, le reste de la division euclidienne de \\(a\\) par \\(b\\) s'obtient avec a % b . On teste si un nombre \\(p\\) est \u00e9gal \u00e0 0 avec un double \u00e9gal : p == 0 . Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder a = 100bksl-nl a = 100bksl-nlif a % 2 == 0:bksl-nl print(\"Pair\")bksl-nlelse:bksl-nl print(\"Impair\")bksl-nl L'envoi d'un colis d'un poids compris entre \\(1\\) et \\(6,2\\) kg coute \\(1,4\\) \u20ac le kilo. Dans l'\u00e9diteur ci-dessous, \u00e9crire un programme qui, selon la valeur d'un nombre r\u00e9el positif poids_colis : affiche 'Trop lourd' si poids_colis est strictement sup\u00e9rieur \u00e0 \\(6,2\\) kg ; affiche 'Trop l\u00e9ger' si poids_colis est inf\u00e9rieur ou \u00e9gal \u00e0 \\(1,0\\) kg ; calcule et affiche le prix d'envoi du colis sinon. Tester votre programme en modifiant la valeur de poids_colis . Une fois termin\u00e9, t\u00e9l\u00e9charger votre programme \u00e0 l'aide de l'ic\u00f4ne Down . Aide 1 Voir le graphe de contr\u00f4le 7 en fin de cours. Aide 2 En langage naturel, le programme va s'\u00e9crire : prix_au_kg = 1,4 poids_colis = 4 si poids_colis > 6,2 alors : afficher(\"Trop lourd\") sinon : si poids_colis < 1.0 alors : afficher(\"Trop l\u00e9ger\") sinon : prix_envoi = prix_au_kilo * poids_colis afficher(prix_envoi) Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder poidspy-undcolis = 4bksl-nlprixpy-undaupy-undkg = 1.4bksl-nl poidspy-undcolis = 4bksl-nlprixpy-undaupy-undkg = 1.4bksl-nlbksl-nlif poidspy-undcolis > 6.2:bksl-nl print(\"Trop lourd\")bksl-nlelse:bksl-nl if poidspy-undcolis <= 1:bksl-nl print(\"Trop l\u00c3\u00a9ger\")bksl-nl else:bksl-nl prix = prixpy-undaupy-undkg py-str poidspy-undcolisbksl-nl print(prix)bksl-nl Retournons \u00e0 la poste : l'envoi d'un colis r\u00e9pond maintenant au tableau ci-dessous. Gamme de poids (en kg) Prix au kilo \\([0; 1]\\) 0,55\u20ac/kg \\(]1; 6,2]\\) 1,4\u20ac/kg \\(]6,2; +\\infty[\\) 2,2\u20ac/kg Dans l'\u00e9diteur ci-dessous, t\u00e9l\u00e9verser le programme de l'exercice pr\u00e9c\u00e9dent gr\u00e2ce \u00e0 l'aide de l'ic\u00f4ne Up ; Modifier votre programme afin qu'il calcule et affiche le prix d'envoi d'un colis, selon la valeur du nombre r\u00e9el positif poids_colis ; Tester votre programme en modifiant la valeur de poids_colis . Aide 1 On rappelle le programme corrig\u00e9 de l'exercice pr\u00e9c\u00e9dent. Aide 2 Le prix au kilo est maintenant variable : modifiez la valeur r\u00e9f\u00e9renc\u00e9e par la variable prix_au_kilo en fonction de poids_colis . Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder poidspy-undcolis = 4bksl-nl poidspy-undcolis = 4bksl-nlbksl-nlif poidspy-undcolis > 6.2:bksl-nl prixpy-undaupy-undkg = 2.2bksl-nlelse:bksl-nl if poidspy-undcolis <= 1:bksl-nl prixpy-undaupy-undkg = 0.55bksl-nl else:bksl-nl prixpy-undaupy-undkg = 1.4bksl-nlbksl-nlprix = prixpy-undaupy-undkg py-str poidspy-undcolisbksl-nlprint(prix)bksl-nl La clause sinon ( else ) n'est pas obligatoire. Si elle n'est pas pr\u00e9cis\u00e9e, le bloc code C n'est pas d\u00e9fini et on passe directement \u00e0 la suite du code (voir exercice 2). Lorsque plusieurs conditions sont imbriqu\u00e9es les unes dans les autres, la syntaxe devient tr\u00e8s lourde. Pour faciliter l'\u00e9criture et le maintien des programmes, de nombreux langages font appel \u00e0 des mots-cl\u00e9s alternatifs. En Python, il s'agit de elif qui permet de cr\u00e9er un nouveau branchement. Cours Graphe de contr\u00f4le %%{init:{'theme': 'dark' }}%% graph TD; A[d\u00e9but code]-->p1(\"condition_1\"); p1-->|Vrai|B_1[bloc code B_1]; p1-->|Faux|p2(\"condition_2\"); p2-->|Vrai|B_2[bloc code B_2]; p2-->|Faux|pn1[...]; pn1-->|Vrai|pn(\"condition_n\"); pn-->|Vrai|B_n[bloc code B_n]; pn-->|Faux|C[bloc code C]; B_1-->D[suite code]; B_2-->D; B_n-->D; C-->D; class p1,p2,pn if; Lorsque plusieurs conditions sont imbriqu\u00e9es, la syntaxe ci-dessous est utilis\u00e9e : Syntaxe lisible Syntaxe illisible d\u00e9but code if condition_1 : bloc code B_1 elif condition_2 : bloc code B_2 [ ... ] elif condition_n : bloc code B_n else : bloc code C suite code d\u00e9but code if condition_1 : bloc code B_1 else : if condition_2 : bloc code B_2 else : [ ... ] if condition_n : bloc code B_n else : bloc code C suite code Si la condition_1 n'est pas v\u00e9rifi\u00e9e, alors on passe \u00e0 la condition_2 , Si la condition_2 n'est pas v\u00e9rifi\u00e9e, alors on passe \u00e0 la condition_3 , etc. Les conditions sont donc effectu\u00e9es les unes apr\u00e8s les autres et le else final n'est effectu\u00e9 que si toutes les autres conditions ne sont pas v\u00e9rifi\u00e9es. Les conditionnelles imbriqu\u00e9es Exercice 10 Exercice 11 Exercice 12 Exercice 13 On vous donne le programme de l'exercice 9. En utilisant l'instruction elif , modifier ce programme afin de le rendre plus lisible. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder poidspy-undcolis = 4bksl-nlbksl-nlif poidspy-undcolis > 6.2:bksl-nl prixpy-undaupy-undkg = 2.2bksl-nlelse:bksl-nl if poidspy-undcolis <= 1:bksl-nl prixpy-undaupy-undkg = 0.55bksl-nl else:bksl-nl prixpy-undaupy-undkg = 1.4bksl-nlbksl-nlprix = prixpy-undaupy-undkg py-str poidspy-undcolisbksl-nlprint(prix)bksl-nl poidspy-undcolis = 4bksl-nlbksl-nlif poidspy-undcolis > 6.2:bksl-nl prixpy-undaupy-undkg = 2.2bksl-nlelif poidspy-undcolis <= 1:bksl-nl prixpy-undaupy-undkg = 0.55bksl-nlelse:bksl-nl prixpy-undaupy-undkg = 1.4bksl-nlbksl-nlprix = prixpy-undaupy-undkg py-str poidspy-undcolisbksl-nlprint(prix)bksl-nl Dans l'\u00e9diteur ci-dessous, \u00e9crire un programme qui, selon la valeur d'un nombre r\u00e9el \\(n\\) : affiche \"Strictement positif\" si \\(n\\) est strictement sup\u00e9rieur \u00e0 0 ; affiche \"N\u00e9gatif\" si \\(n\\) est strictement inf\u00e9rieur \u00e0 0 ; affiche \"Nul\" si \\(n\\) est \u00e9gal \u00e0 0. n = - 12 # valeur donn\u00e9e par l'utilisateur if ... : # condition print ( ... ) # affichage Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder n = -12bksl-nlbksl-nlbksl-nlbksl-nlbksl-nl n = -12bksl-nlbksl-nlif n > 0:bksl-nl print(\"Strictement positif\")bksl-nlelif n < 0:bksl-nl print(\"Strictement n\u00c3\u00a9gatif\")bksl-nlelse:bksl-nl print(\"Nul\")bksl-nl On choisit une ann\u00e9e annee . Dans l'\u00e9diteur ci-dessous, \u00e9crire un programme qui, gr\u00e2ce \u00e0 un affichage, indique \u00e0 l'utilisateur si cette ann\u00e9e est bissextile (366 jours sur l'ann\u00e9e). On rappelle qu'une ann\u00e9e est bissextile : si elle est divisible par 400. si elle n'est pas divisible par 100 ; si elle est divisible par 4 ; Quelques exemples : 2000 est bissextile mais 1700 ne l'est pas. Par contre 1712 est bissextile. Aide 1 On rappelle qu'un nombre \\(a\\) est divisible par un nombre \\(b\\) si le reste de la division euclidienne de \\(a\\) par \\(b\\) est \u00e9gal \u00e0 \\(0\\) . Aide 2 En Python, le reste de la division euclidienne de \\(a\\) par \\(b\\) s'obtient avec a % b . Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder n = 1492bksl-nlbksl-nlbksl-nlbksl-nlbksl-nl n = 1492bksl-nlbksl-nlif n % 400 == 0:bksl-nl print(n, \" est bissextile.\")bksl-nlelif n % 100 == 0:bksl-nl print(n, \" n'est pas bissextile.\")bksl-nlelif n % 4 == 0:bksl-nl print(n, \" est bissextile.\")bksl-nlelse:bksl-nl print(n, \" n'est pas bissextile.\")bksl-nl Voici deux programmes \u00e9crits en Python : Programme 1 Programme 2 if a >= 60 : a = a - 60 elif a >= 30 : a = a - 30 else : a = 0 print ( \"La valeur de a est\" , a ) if a >= 60 : a = a - 60 if a >= 30 : a = a - 30 else : a = 0 print ( \"La valeur de a est\" , a ) Tableau a = 130 a=45 a=15 Programme 1 Programme 2 Dessiner les graphes de contr\u00f4le de ces programmes. En utilisant ces graphes, recopier et compl\u00e9ter le tableau ci-contre, pr\u00e9sentant les r\u00e9sultats du programme 1 et du programme 2 si : a = 130 ; a = 45 ; a = 15 . V\u00e9rifiez votre r\u00e9ponse en \u00e9crivant les programmes dans l'\u00e9diteur ci-dessous : Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder Solution a = 130 a=45 a=15 Programme 1 70 15 0 Programme 2 40 15 0 Dans le programme 1, le test a >= 30 n'est r\u00e9alis\u00e9 que si a < 60 . Il est impossible de faire deux soustractions. Dans le programme 2, le graphe de contr\u00f4le montre clairement que le test a >= 30 est toujours r\u00e9alis\u00e9. Ainsi, dans le cas o\u00f9 a >= 60 , on retranche 60 \u00e0 a . Si la nouvelle valeur r\u00e9f\u00e9renc\u00e9e par la variable a est alors sup\u00e9rieure ou \u00e9gale \u00e0 30 a >= 30 , on retranche \u00e0 nouveau 30. On a donc retranch\u00e9 90. Bool\u00e9ens \u2693\ufe0e Syntaxe en Python \u2693\ufe0e La nature des bool\u00e9ens Situation 1 Situation 2 Quelqu'un affirme 4 est \u00e9gal \u00e0 4 . Que lui r\u00e9pondez-vous ? R\u00e9ponse Ben, c'est VRAI ! Quelqu'un affirme 7 est \u00e9gal \u00e0 12 . Que lui r\u00e9pondez-vous ? R\u00e9ponse Ben, c'est FAUX ! Cours Les bool\u00e9ens constituent la r\u00e9ponse logique \u00e0 une affirmation. Cette r\u00e9ponse logique ne peut avoir que deux valeurs : en Python, elles se notent True ou False . Pour \u00e9crire une affirmation, on utilise les symboles math\u00e9matiques : < , <= , > , >= , != et == . Affirmation Symbole Exemple 1 Exemple 2 a est strictement plus petit que b a < b 38 < 23 est \u00e9gal \u00e0 False 'a' < 'z' est \u00e9gal \u00e0 True (ordre du dictionnaire) a est plus petit ou \u00e9gal \u00e0 b a <= b 23 <= 23 est \u00e9gal \u00e0 True 'a' <= 'A' est \u00e9gal \u00e0 False (voir exercices ci-dessous) a est strictement plus grand que b a > b 5.3 > 5.3 est \u00e9gal \u00e0 False 'abc' > 'aab' est \u00e9gal \u00e0 True a est plus grand ou \u00e9gal \u00e0 b a >= b 5.3 >= 6 / 2 est \u00e9gal \u00e0 True '712' >= '1560' est \u00e9gal \u00e0 True ( '7' >= '1' ) a est diff\u00e9rent de b a != b 12 != 12 est \u00e9gal \u00e0 False 'Vive le 01!' != 'Vive le 75!' est \u00e9gal \u00e0 True ( '0' != '7' ) a est \u00e9gal \u00e0 b a == b 5 == 12 est \u00e9gal \u00e0 False 'Hello' == 'Hello!' est \u00e9gal \u00e0 False Attention En Python, on aime coder avec style : PEP8 stipule qu'il convient de laisser un espace avant et apr\u00e8s chaque op\u00e9rateur. Notez bien qu'on teste l'\u00e9galit\u00e9 avec un double \u00e9gal et la diff\u00e9rence avec point d'exclamation \u00e9gal . Comme nous le verrons dans le chapitre sur les nombres flottants, l'\u00e9galit\u00e9 ou la diff\u00e9rence ne s'utilise jamais avec des nombres \u00e0 virgule (type float ). Ordre lexicographique L'ordre du dictionnaire est aussi appel\u00e9 l'ordre lexicographique. Pour ranger dans l'ordre lexicographique, on compare les deux premiers caract\u00e8res de chaque texte. S'ils sont \u00e9gaux, on compare le deuxi\u00e8me, etc. Exemple L'affirmation oiseau < oisif est-elle vraie ou fausse? En effet : la premi\u00e8re lettre o est la m\u00eame pour chaque cha\u00eene de caract\u00e8res. De m\u00eame pour la deuxi\u00e8me et la troisi\u00e8me lettre. On compare la quatri\u00e8me lettre : e < i . On conclue que la question oiseau < oisif est True . Toutefois, les caract\u00e8res peuvent aussi \u00eatre sp\u00e9ciaux. Que fait-on avec \"1\", \"A\", \"!\" ou . Dans ce cas, on compare leur code Unicode que nous \u00e9tudierons en classe. Exercice Cocher la case si le bool\u00e9en est True . \u00c9nonc\u00e9 Solution 8 == 7 7 != 12 \"abc\" < \"abe\" \"abc\" <= \"abcd\" 65 = 65 - 12 < 9.0 12 <= \"nsi\" 4 + 8 > 12 \"abc\" * 3 >= \"abcabcabc\" 8 == 7 : l'expression est clairement fausse False . 7 != 12 \"abc\" < \"abe\" : \"c\" est avant \"e\" dans l'alphabet donc l'expression est True . \"abc\" <= \"abcd\" : la deuxi\u00e8me expression est plus longue que la premi\u00e8re donc \"inf\u00e9rieure\" 65 = 65 : ce n'est pas un bool\u00e9en ! Un \u00e9gal simple est une affectation. - 12 < 9.0 12 <= \"nsi\" : cette expression renvoie : TypeError : '<=' not supported between instances of 'int' and 'str' . 4 + 8 > 12 : 12 est \u00e9gal \u00e0 12. \"abc\" * 3 >= \"abcabcabc\" : #!python \"abc\"*3 r\u00e9p\u00e8te trois fois la phrase #!python \"abc\" donc #!python \"abcabcabc\"`. Cours Il est tout \u00e0 fait possible d'affecter une valeur bool\u00e9enne \u00e0 une variable. On parle alors de variable bool\u00e9enne. Pour des raisons de clart\u00e9 et de lisibilit\u00e9, il est recommand\u00e9 de mettre des parenth\u00e8ses autour des expressions bool\u00e9ennes lors d'une telle affectation. Exemple entr\u00e9e_autoris\u00e9e = age >= 18 est tout \u00e0 fait correct mais, entr\u00e9e_autoris\u00e9e = ( age >= 18 ) est beaucoup plus facile \u00e0 comprendre. Subtilit\u00e9s bool\u00e9ennes \u2693\ufe0e Introduction Avec les mots-cl\u00e9s dont nous disposons actuellement, certaines conditions logiquement simples sont complexes \u00e0 \u00e9crire. Prenons l'exemple d'un site de rencontres. Si l'utilisateur est un homme et s'il a plus de 18 ans, alors il doit payer. Si l'utilisatrice est une femme et si elle a plus de 18 ans, alors elle ne paie pas. Sinon, l'inscription n'est pas autoris\u00e9e. Voici le programme correspondant : inscription_non_autoris\u00e9e = False if genre == \"homme\" : if age > 18 : inscription_payante = True else : inscription_non_autoris\u00e9e = True else : if age > 18 : inscription_payante = False else : inscription_non_autoris\u00e9e = True Ce serait bien de pouvoir connecter les deux expressions bool\u00e9ennes : l'utilisateur est homme et il a plus de 18 ans ! Le chapitre 3 sur la logique bool\u00e9enne a introduit trois op\u00e9rateurs logiques : le non : \\(\\bar A\\) le et : \\(A \\cdot B\\) le ou : \\(A + B\\) . Ces trois op\u00e9rateurs peuvent simplifier grandement l'\u00e9criture de certaines conditions. Cours Soit deux expressions bool\u00e9ennes c1 et c2 . En accord avec la logique bool\u00e9enne, en Python, il est possible d'utiliser les op\u00e9rateurs bool\u00e9ens suivant : Op\u00e9rateur Nom Effet Exemple and conjonction c1 and c2 est True si c1 et c2 sont simultan\u00e9ment True . 4 <= 8 and 8 <= 12 est True or union c1 or c2 est True si au moins une condition est True . 4 <= 8 or 7 == 12 est True not n\u00e9gation not c1 est True si c1 est False. not ( 1 + 1 == 3 ) est True car 1 + 1 == 3 est False . Priorit\u00e9 op\u00e9ratoire Les r\u00e8gles de priorit\u00e9 sont les m\u00eames qu'en logique bool\u00e9nne. La n\u00e9gation est prioritaire sur la conjonction qui est prioritaire sur l' union . Exemple a or b and not c and d est \u00e9quivalent \u00e0 a or ( b and ( not c ) and d ) car la n\u00e9gation est prioritaire sur la conjonction. Privil\u00e9giez les expressions bool\u00e9ennes simples et l'utilisation de parenth\u00e8ses ! Pour aller plus loin En Python, l'\u00e9valuation des expressions bool\u00e9ennes est dite paresseuse. Dans une expression avec deux expressions bool\u00e9ennes telle que c1 and c2 , Python va d'abord \u00e9valuer c1 . Si cette expression est False , Python s'arr\u00eate et \u00e9value c1 and c2 \u00e0 False . En effet, c1 and c2 est vraie si les deux expressions sont simultan\u00e9ment True . C'est un comportement int\u00e9ressant dans la gestion de cas limites, susceptibles de g\u00e9n\u00e9rer des erreurs. Exemple Testez ces expressions ou programme dans le terminal ci-dessous : 1 / 0 == 2 8 == 3 and 1 / 0 == 2 a = 0 if a == 0 or ( 1 / a > 1e6 ): print ( \"Underflow\" ) >>> Retour sur l'exemple introductif Dans l'\u00e9diteur ci-dessous, on rappelle le programme propos\u00e9 pour le site de rencontre. Un affichage a \u00e9t\u00e9 ajout\u00e9. Expliquer \u00e0 quoi sert la ligne 16. Tester ce programme avec pour valeurs initiales genre , age = \"homme\" , 14 et genre , age = \"homme\" , 34 . Simplifier ce programme \u00e0 l'aide des op\u00e9rateurs bool\u00e9ens (n\u00e9gation not , conjonction and , union or ). Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder genre, age = \"femme\", 21bksl-nlbksl-nlinscriptionpy-undnonpy-undautoris\u00c3\u00a9e = Falsebksl-nlif genre == \"homme\":bksl-nl if age > 18:bksl-nl inscriptionpy-undpayante = Truebksl-nl else:bksl-nl inscriptionpy-undnonpy-undautoris\u00c3\u00a9e = Truebksl-nlelse:bksl-nl if age > 18: bksl-nl inscriptionpy-undpayante = Falsebksl-nl else:bksl-nl inscriptionpy-undnonpy-undautoris\u00c3\u00a9e = Truebksl-nlbksl-nlprint(f\"Interdit : {inscriptionpy-undnonpy-undautoris\u00c3\u00a9e}\")bksl-nlif not inscriptionpy-undnonpy-undautoris\u00c3\u00a9e:bksl-nl print(f\"Payant : {inscriptionpy-undpayante}\")bksl-nl genre, age = \"femme\", 21bksl-nlbksl-nlinscriptionpy-undnonpy-undautoris\u00c3\u00a9e = Falsebksl-nlif age > 18 and genre == \"homme\":bksl-nl inscriptionpy-undpayante = Truebksl-nlelif age > 18 and genre == \"femme\":bksl-nl inscriptionpy-undpayante = Falsebksl-nlelse:bksl-nl inscriptionpy-undnonpy-undautoris\u00c3\u00a9e = Truebksl-nlbksl-nlprint(f\"Interdit : {inscriptionpy-undnonpy-undautoris\u00c3\u00a9e}\")bksl-nlif not inscriptionpy-undnonpy-undautoris\u00c3\u00a9e:bksl-nl print(f\"Payant : {inscriptionpy-undpayante}\")bksl-nl Rappel Pour voir la correction, appuyez sur l'icone gendarme cinq fois de suite. Exercices autour des bool\u00e9ens Exercice 15 Exercice 16 Exercice 17 Exercice 18 Soit a et b deux variables bool\u00e9ennes. \u00c9crire la table de v\u00e9rit\u00e9 (voir Chapitre 2 du cours) correspondant au bool\u00e9en ci-dessous. var_bool\u00e9enne = not a and b Solution \\(a\\) \\(b\\) \\(\\overline a\\) \\(\\bar a \\cdot b\\) 0 0 1 0 0 1 1 1 1 0 0 0 1 1 0 0 L'op\u00e9rateur \"Union exclusive\" \\(\\oplus\\) peut \u00eatre \u00e9crit comme une combinaison d'autres op\u00e9rateurs bool\u00e9ens. Pour deux variables bool\u00e9ennes \\(a\\) et \\(b\\) , on \u00e9crit \\(a \\oplus b = \\overline a \\cdot b + a \\cdot \\overline b\\) . Compl\u00e9ter le programme permettant d'afficher la valeur bool\u00e9enne de \\(a \\oplus b\\) . Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder a, b = True, False # \u00c3 modifier lors des testsbksl-nlvarpy-undbool\u00c3\u00a9enne = () # \u00c3 compl\u00c3\u00a9terbksl-nlbksl-nlprint(varpy-undbool\u00c3\u00a9enne)bksl-nl a, b = True, False # \u00c3 modifier lors des testsbksl-nlvarpy-undbool\u00c3\u00a9enne = (not(a) and b) or (a and not b)bksl-nlbksl-nlprint(varpy-undbool\u00c3\u00a9enne)bksl-nl Soit a, b et c trois variables bool\u00e9ennes. En testant dans l'\u00e9diteur ci-dessous pour diff\u00e9rentes valeurs de a, b et c, dire si ces deux programmes sont \u00e9quivalents. Programme 1 Programme 2 if ( not a and b ) and c : print ( True ) else : print ( False ) if ( not a and b ): print ( True ) elif c : print ( True ) else : print ( False ) Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder Solution Dans ce corrig\u00e9, on prend pour convention : 1 = True ; 0 = False. Dans le programme 1, le seul ensemble de valeurs renvoyant True est \\((a=0, b=1, c=1)\\) . Dans le programme 2, il y a plusieurs ensembles de valeurs qui renvoyant True . Par exemple \\((a=0, b=1, c=1)\\) ou \\((a=0, b=1, c=0)\\) ou \\((a=0, b=1, c=1)\\) . Les programmes ne sont donc pas \u00e9quivalents. Soit a, b et c trois variables bool\u00e9ennes. En testant dans l'\u00e9diteur ci-dessous pour diff\u00e9rentes valeurs de a, b et c, dire si ces deux programmes sont \u00e9quivalents. Programme 1 Programme 2 if ( not a and b ) or c : print ( True ) else : print ( False ) if ( not a and b ): print ( True ) elif c : print ( True ) else : print ( False ) Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder Solution Dans ce corrig\u00e9, on prend pour convention : 1 = True ; 0 = False. Dans le programme 1, d\u00e8s que \\(c=1\\) , le programme renvoie True . Il reste donc \u00e0 ajouter \\((a=0, b=1, c=0)\\) . Dans le programme 2, le premier branchement ne concerne pas c. Il renvoie donc True si \\((a=0, b=1, c=0)\\) ou \\((a=0, b=1, c=1)\\) . Sinon, on arrive au second branchement testant c : si \\(c=1\\) , on renvoie True . Cela correspond \u00e0 \\((a=0, b=0, c=1)\\) ou \\((a=1, b=0, c=1)\\) ou \\((a=1, b=1, c=1)\\) . En r\u00e9sum\u00e9, les valeurs renvoyant True dans le programme 2 correspondent \u00e0 celles du programme 1 : les programmes sont \u00e9quivalents... Mais que c'est d\u00e9sagr\u00e9able \u00e0 analyser ! Cours Dans le cadre d'in\u00e9galit\u00e9s entre nombres (entiers ou flottants), plut\u00f4t que d'utiliser des connecteurs logiques and ou or , il est possible de combiner n'importe quel op\u00e9rateur : 3 < 5 < 7 est \u00e9quivalent \u00e0 3 < 5 and 5 < 7 . Le r\u00e9sultat est True . 8 > 5 >= 7 est \u00e9quivalent \u00e0 8 > 5 and 5 >= 7 . Le r\u00e9sultat est False . 3 < 5 != 7 est \u00e9quivalent \u00e0 3 < 5 and 5 != 7 . Le r\u00e9sultat est True . Attention S'il est possible de combiner n'importe quel op\u00e9rateur, il faut \u00e9viter de faire n'importe quoi pour des questions de lisibilit\u00e9. En particulier, on \u00e9vitera : les in\u00e9galit\u00e9s contre nature tel 12 > 5 < 7 qui est True . les longues expressions tel 6 != 12 < 5 != 7 == 7 qui est False car 12 < 5 est False . Bonnes pratiques \u2693\ufe0e Cours L'indentation est tr\u00e8s importante et vous devez \u00eatre tr\u00e8s rigoureux sur ce point. Toute instruction non indent\u00e9e ne fera pas partie de votre conditionnelle. Pour vous en convaincre, ex\u00e9cutez ces deux exemples de code : Version correcte Version incorrecte La ligne 8 est ex\u00e9cut\u00e9e uniquement si le mot Titanic n'appara\u00eet pas dans la phrase : elle ne s'affiche donc pas. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder phrase = \"Le Titanic sombra rapidement.\"bksl-nlbksl-nlif \"Titanic\" in phrase:bksl-nl print(\"Ce fut un drame ;\")bksl-nl print(\"m\u00c3\u00aame si l'orchestre continua de jouer.\")bksl-nlelse:bksl-nl print(\"Ce ne fut pas un drame ;\")bksl-nl print(\"et l'orchestre continua de jouer.\")bksl-nl La ligne 8 n'est pas inclue dans la clause else : elle s'affiche donc toujours. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder phrase = \"Le Titanic sombra rapidement.\"bksl-nlbksl-nlif \"Titanic\" in phrase:bksl-nl print(\"Ce fut un drame ;\")bksl-nl print(\"m\u00c3\u00aame si l'orchestre continua de jouer.\")bksl-nlelse:bksl-nl print(\"Ce ne fut pas un drame ;\")bksl-nlprint(\"et l'orchestre continua de jouer.\")bksl-nl Si, dans une instruction conditionnelle, vous faites appel \u00e0 une variable bool\u00e9enne var_bool , il est important de ne pas \u00e9crire if var_bool == True : . En effet, var_bool est d\u00e9j\u00e0 un bool\u00e9en dont la valeur est soit True ; soit False . Version correcte Version lourde souquez_les_artibuses = ( nombre_artibuses > 42 ) if souquez_les_artibuses : # si souquez_les_artibuses est True, \u00e0 l'attaque print ( \"\u00c0 l'attaque\" ) else : print ( \"Demi-tour\" ) souquez_les_artibuses = ( nombre_artibuses > 42 ) if souquez_les_artibuses == True : # si souquez_les_artibuses, qui vaut d\u00e9j\u00e0 True, est \u00e9gal \u00e0 True, \u00e0 l'attaque print ( \"\u00c0 l'attaque\" ) else : print ( \"Demi-tour\" ) Exercices r\u00e9capitulatifs Exercice 19 Exercice 20 L'utilisation d'une grille est la m\u00e9thode la plus r\u00e9pandue pour faire des simulations num\u00e9riques de ph\u00e9nom\u00e8nes physiques. Dans cette m\u00e9thode, le plan est divis\u00e9e en cellules carr\u00e9es dans lesquelles \u00e9voluent des particules de mati\u00e8re. Ces particules peuvent se d\u00e9placer dans n'importe quel sens et sont rep\u00e9r\u00e9es par leurs coordonn\u00e9es \\((x, y)\\) . Le plan simul\u00e9 ne pouvant pas \u00eatre infini, il est courant d'imposer des conditions p\u00e9riodiques au bord du carr\u00e9 de simulation. Ainsi, si l'abscisse et l'ordonn\u00e9e d'une particule d\u00e9passe la taille du carr\u00e9, on leur retranche (ou on leur ajoute) le c\u00f4t\u00e9 du carr\u00e9. On se place ici dans un carr\u00e9 de c\u00f4t\u00e9 10. Expliquer ce qui ne convient pas avec le programme ci-dessous. Proposez une simple modification. Quel op\u00e9rateur permettrait d'\u00e9viter l'utilisation des conditionnelles ? if x >= 10 : x = x - 10 elif y >= 10 : y = y - 10 if x < 0 : x = x + 10 elif y < 0 : y = y + 10 Solution Dans ce programme, si x et y sont simultan\u00e9ment sup\u00e9rieurs \u00e0 10, seul x est ramen\u00e9 entre 0 et 10. Il faut simplement changer tous les elif en if . Une astuce consiste \u00e0 utiliser l'op\u00e9rateur modulo % . Par exemple x = 11.1 % 10 est \u00e9gal \u00e0 1.1 . Le programme propos\u00e9 ci-dessous g\u00e9n\u00e8re al\u00e9atoirement deux entiers, compris entre 1 et 6. Si la somme de ces nombres est sup\u00e9rieure ou \u00e9gale \u00e0 10, alors vous devez payer une taxe sp\u00e9ciale (36 pi\u00e8ces). Sinon, vous payez deux fois la somme des nombres. Si vous \u00eates chanceux et que la somme est strictement inf\u00e9rieure \u00e0 4, vous n'avez rien \u00e0 payer. Votre programme devra afficher selon le cas le texte Taxe sp\u00e9ciale ! , Taxe r\u00e9guli\u00e8re , ou Pas de taxe suivi de la somme \u00e0 payer (sans indiquer l'unit\u00e9). Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import randombksl-nlde1 = random.randint(1,6)bksl-nlde2 = random.randint(1,6)bksl-nlprint(f\"La valeur du d\u00c3\u00a9 1 est {de1} et celle du d\u00c3\u00a9 2 est {de2}.\")bksl-nl# Programme \u00c3 commencer ici #bksl-nlbksl-nl import randombksl-nlde1 = random.randint(1,6)bksl-nlde2 = random.randint(1,6)bksl-nlprint(f\"La valeur du d\u00c3\u00a9 1 est {de1} et celle du d\u00c3\u00a9 2 est {de2}.\")bksl-nl# Programme \u00c3 commencer ici #bksl-nlsomme = de1 + de2bksl-nlif somme >= 10:bksl-nl print('Taxe sp\u00c3\u00a9ciale !', 36)bksl-nlelif 4 <= somme < 10:bksl-nl print('Taxe r\u00c3\u00a9guli\u00c3\u00a8re', somme py-str 2)bksl-nlelse :bksl-nl print('Pas de taxe', 0)bksl-nl R\u00e9sum\u00e9 \u2693\ufe0e R\u00e9sum\u00e9 Dans ce chapitre, j'ai appris : ce qu'\u00e9tait un branchement conditionnel ; la syntaxe des branchements conditionnels en Python ; l'importance de la logique bool\u00e9enne et la mani\u00e8re de l'utiliser en Python ; les bonnes pratiques avec les branchements conditionnels. Il existe \u00e9galement des branchements inconditionnels qui ont lieu sans qu'aucune condition soit v\u00e9rifi\u00e9e (voir sch\u00e9ma ci-dessous o\u00f9 on passe directement de l'instruction 1 \u00e0 l'instruction n). Nous utiliserons de tels branchements lorsque nous travaillerons sur l'assembleur. Sachez toutefois que ces branchements sont \u00e0 proscrire en programmation de haut niveau. %%{init:{'theme': 'dark' }}%% graph TD; A[instruction 1]-->B(\"saut vers l'instruction n\"); C[instruction 2]-->D[instruction 3] D-->|\"...\"|E B---->E[instruction n]; class B if; \u21a9 Cliquez sur la fl\u00e8che pour revenir au cours %%{init:{'theme': 'dark' }}%% graph TD; A[\"prix \u2190 prix du panier\"]-->p(\"prix < = 90\u20ac\"); p-->|Vrai|B[\"frais_port \u2190 7\u20ac\"]; p-->|Faux|C[\"frais_port \u2190 0\u20ac\"]; B-->D[\"prix_total \u2190 prix + frais_port afficher prix_total\"]; C-->D; class p if; \u21a9 Cliquez sur la fl\u00e8che pour revenir au cours. On passe directement \u00e0 la suite du code si la condition est fausse. %%{init:{'theme': 'dark' }}%% graph TD; A[\"frais_port \u2190 0\u20ac prix \u2190 prix du panier\"]-->p(\"prix < = 90\u20ac\"); p-->|Vrai|B[\"frais_port \u2190 7\u20ac\"]; p-->|Faux|D; B-->D[\"prix_total \u2190 prix + frais_port afficher prix_total\"]; class p if; \u21a9 Cliquez sur la fl\u00e8che pour revenir au cours %%{init:{'theme': 'dark' }}%% graph TD; A[\"temperature \u2190 measuring the inside temp...\"]-->p(\"temperature > 5\u00b0C\"); p-->|Vrai|B[\"temperature \u2190 temperature - 0.1\u00b0C\"]; p-->|Faux|C[\"temperature \u2190 temperature + 0.1\u00b0C\"]; B-->D[go back]; C-->D[go back]; D-..->A; class p if; \u21a9 Cliquez sur la fl\u00e8che pour revenir au cours %%{init:{'theme': 'dark' }}%% graph TD; A[\"age_client = 15\"]-->p(\"age_client < = 12\"); p-->|Vrai|B[\"prix = 5\"]; p-->|Faux|C[\"prix = 10\"]; B-->D[\"print(prix)\"]; C-->D; class p if; \u21a9 Cliquez sur la fl\u00e8che pour revenir au cours %%{init:{'theme': 'dark' }}%% graph TD; A[\"nombre = 48 diviseur = 1\"]-->p1(\"nombre % 2 == 0\"); p1-->|Vrai|p2(\"nombre % 3 == 0\"); p2-->|Vrai|B[\"diviseur = 6\"]-->p4[\"print(diviseur)\"]; p2-->|Faux|C[\"diviseur = 2\"]-->p4; p1-->|Faux|p3(\"nombre % 3 == 0\"); p3-->|Vrai|D[\"diviseur = 3\"]-->p4; p3--->|Faux|p4; class p1,p2,p3 if; \u21a9 Appuyez sur la fl\u00e8che pour revenir \u00e0 l'exercice. %%{init:{'theme': 'dark' }}%% graph TD; A[\"prix_au_kg = 1,4 \u20ac poids_colis = 4 kg\"]-->p(\"poids_colis strictement sup\u00e9rieur \u00e0 6,2 kg\"); p-->|Vrai|B[\"affiche 'Trop lourd'\"]; p-->|Faux|p1(\"poids_colis inf\u00e9rieur ou \u00e9gal \u00e0 1,0 kg\"); p1-->|Vrai|C[\"affiche 'Trop l\u00e9ger'\"]; p1-->|Faux|p2[\"calcule et affiche le prix d'envoi du colis.\"]; class p,p1 if; \u21a9","title":"Conditionnelles"},{"location":"python2/#structures-de-controle-conditionnelles","text":"","title":"Structures de contr\u00f4le : conditionnelles"},{"location":"python2/#principe","text":"On peut imaginer qu'un programme est une suite finie de choix, permettant de s'adapter aux situations rencontr\u00e9es. Ce type de choix s'appelle un branchement conditionnel 1 . Cours Graphe de contr\u00f4le %%{init:{'theme': 'dark' }}%% graph TD; A[d\u00e9but du programme]-->p(\"#60;condition \u00e0 remplir#62;\"); p-->|Vrai|B; p-->|Faux|C; B-->D[suite du programme]; C-->D[suite du programme]; class p if; Une conditionnelle permet d'effectuer une action si une certaine condition est v\u00e9rifi\u00e9e. On peut repr\u00e9senter une telle situation dans un graphe de contr\u00f4le (voir sch\u00e9ma ci-contre). Comprendre les conditionnelles Dans les exercices ci-dessous, sur une feuille, dessinez le graphe de contr\u00f4le correspondant au programme propos\u00e9. Exercice 1 Exercice 2 Exercice 3 Exercice 4 Exercice 5 Un site de vente en ligne propose la livraison gratuite au-del\u00e0 de 90\u20ac d'achats. Voici le programme \u00e9crit en Fran\u00e7ais. 1 2 3 4 5 6 7 prix \u2190 prix du panier si prix <= 90\u20ac alors : frais_port \u2190 7\u20ac sinon : frais_port \u2190 0\u20ac prix_total \u2190 prix + frais_port afficher prix_total Solution 2 en fin de cours On donne une autre proposition pour le programme de l'exercice 1. Voici le programme \u00e9crit en Fran\u00e7ais. 1 2 3 4 5 6 frais_port \u2190 0\u20ac prix \u2190 prix du panier si prix <= 90\u20ac alors : frais_port \u2190 7\u20ac prix_total \u2190 prix + frais_port afficher prix_total Solution 3 en fin de cours Un thermostat permet de r\u00e9guler la temp\u00e9rature d'un r\u00e9frig\u00e9rateur \u00e0 5\u00b0C. Voici le programme \u00e9crit en Anglais. 1 2 3 4 5 6 temperature \u2190 measuring the inside temperature of the fridge if temperature > 5\u00b0C then : temperature \u2190 temperature - 0.1\u00b0C else: temperature \u2190 temperature + 0.1\u00b0C go back to the beginning of the program Solution 4 en fin de cours Voici un programme \u00e9crit en Python. Remarquez que les instructions sont presque les m\u00eames qu'en Anglais. 1 2 3 4 5 6 age_client = 15 if age_client <= 12 : prix = 5 else : prix = 10 print ( prix ) Solution 5 en fin de cours Voici un programme \u00e9crit en Python. Vous pouvez modifier la valeur de nombre pour vous aider \u00e0 comprendre le fonctionnement du programme. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder nombre = 48bksl-nldiviseur = 1bksl-nlbksl-nlif nombre % 2 == 0 : # si le reste de la division du nombre par 2 \u00c3\u00a9gal 0bksl-nl if nombre % 3 == 0 :bksl-nl diviseur = 2 py-str 3bksl-nl else :bksl-nl diviseur = 2bksl-nlelse :bksl-nl if nombre % 3 == 0 :bksl-nl diviseur = 3bksl-nlbksl-nlprint(diviseur)bksl-nl Solution 6 en fin de cours","title":"Principe"},{"location":"python2/#conditionnelle-ifelse","text":"Cours Graphe de contr\u00f4le %%{init:{'theme': 'dark' }}%% graph TD; A[d\u00e9but code]-->p(\"condition\"); p-->|Vrai|B[bloc code B]; p-->|Faux|C[bloc code C]; B-->D[suite code]; C-->D; class p if; En Python, la syntaxe des instructions conditionnelles est la suivante : d\u00e9but code if condition : bloc code B else : bloc code C suite code Trois d\u00e9tails importants comme en Anglais, le test conditionnel est r\u00e9alis\u00e9 avec if / else ; \u00e0 la fin d'une ligne contenant if / else , on ajoute deux-points : ; tout le bloc de code B (ou C) doit \u00eatre indent\u00e9 avec une tabulation Tab . Choisissez la syntaxe correcte Question R\u00e9ponse Proposition 1 if nombre_points == 20 : niveau = niveau + 1 Proposition 2 if nombre_points = 20 : niveau = niveau + 1 Proposition 3 if nombre_points == 20 niveau = niveau + 1 Proposition 4 if nombre_points == 20 : niveau = niveau + 1 Proposition 1 : correcte ! if nombre_points == 20 : niveau = niveau + 1 Proposition 2 : attention au double \u00e9gal. if nombre_points = 20 : niveau = niveau + 1 Proposition 3 : attention aux deux-points manquants. if nombre_points == 20 niveau = niveau + 1 Proposition 4 : attention \u00e0 la tabulation qui est obligatoire. if nombre_points == 20 : niveau = niveau + 1 \u00c9crire des conditionnelles Exercice 6 Exercice 7 Exercice 8 Exercice 9 Dans l'\u00e9diteur ci-dessous, \u00e9crire un programme qui, selon la valeur d'un nombre r\u00e9el \\(n\\) : affiche \"Strictement positif\" si \\(n\\) est strictement sup\u00e9rieur \u00e0 0 ; affiche \"N\u00e9gatif ou nul\" sinon. On propose le d\u00e9but du programme avec la valeur de \\(n\\) que l'on peut faire varier. n = - 12 # valeur donn\u00e9e par l'utilisateur if n >= 0 : # condition print ( \"Strictement positif\" ) # affichage Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder n = -12bksl-nlbksl-nl n = -12bksl-nlif n >= 0:bksl-nl print(\"Strictement positif\")bksl-nlelse: bksl-nl print(\"N\u00c3\u00a9gatif ou nul\")bksl-nl Dans l'\u00e9diteur ci-dessous, \u00e9crire un programme qui, selon la valeur d'un nombre r\u00e9el \\(a\\) : affiche 'Pair' si \\(a\\) est divisible par \\(2\\) ; affiche 'Impair' sinon. On propose le d\u00e9but du programme avec la valeur de \\(a\\) que l'on peut faire varier. a = 100 # valeur donn\u00e9e par l'utilisateur if ... : ... else : ... Aide 1 On rappelle qu'un nombre \\(a\\) est divisible par un nombre \\(b\\) si le reste de la division euclidienne de \\(a\\) par \\(b\\) est \u00e9gal \u00e0 \\(0\\) . Aide 2 En Python, le reste de la division euclidienne de \\(a\\) par \\(b\\) s'obtient avec a % b . On teste si un nombre \\(p\\) est \u00e9gal \u00e0 0 avec un double \u00e9gal : p == 0 . Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder a = 100bksl-nl a = 100bksl-nlif a % 2 == 0:bksl-nl print(\"Pair\")bksl-nlelse:bksl-nl print(\"Impair\")bksl-nl L'envoi d'un colis d'un poids compris entre \\(1\\) et \\(6,2\\) kg coute \\(1,4\\) \u20ac le kilo. Dans l'\u00e9diteur ci-dessous, \u00e9crire un programme qui, selon la valeur d'un nombre r\u00e9el positif poids_colis : affiche 'Trop lourd' si poids_colis est strictement sup\u00e9rieur \u00e0 \\(6,2\\) kg ; affiche 'Trop l\u00e9ger' si poids_colis est inf\u00e9rieur ou \u00e9gal \u00e0 \\(1,0\\) kg ; calcule et affiche le prix d'envoi du colis sinon. Tester votre programme en modifiant la valeur de poids_colis . Une fois termin\u00e9, t\u00e9l\u00e9charger votre programme \u00e0 l'aide de l'ic\u00f4ne Down . Aide 1 Voir le graphe de contr\u00f4le 7 en fin de cours. Aide 2 En langage naturel, le programme va s'\u00e9crire : prix_au_kg = 1,4 poids_colis = 4 si poids_colis > 6,2 alors : afficher(\"Trop lourd\") sinon : si poids_colis < 1.0 alors : afficher(\"Trop l\u00e9ger\") sinon : prix_envoi = prix_au_kilo * poids_colis afficher(prix_envoi) Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder poidspy-undcolis = 4bksl-nlprixpy-undaupy-undkg = 1.4bksl-nl poidspy-undcolis = 4bksl-nlprixpy-undaupy-undkg = 1.4bksl-nlbksl-nlif poidspy-undcolis > 6.2:bksl-nl print(\"Trop lourd\")bksl-nlelse:bksl-nl if poidspy-undcolis <= 1:bksl-nl print(\"Trop l\u00c3\u00a9ger\")bksl-nl else:bksl-nl prix = prixpy-undaupy-undkg py-str poidspy-undcolisbksl-nl print(prix)bksl-nl Retournons \u00e0 la poste : l'envoi d'un colis r\u00e9pond maintenant au tableau ci-dessous. Gamme de poids (en kg) Prix au kilo \\([0; 1]\\) 0,55\u20ac/kg \\(]1; 6,2]\\) 1,4\u20ac/kg \\(]6,2; +\\infty[\\) 2,2\u20ac/kg Dans l'\u00e9diteur ci-dessous, t\u00e9l\u00e9verser le programme de l'exercice pr\u00e9c\u00e9dent gr\u00e2ce \u00e0 l'aide de l'ic\u00f4ne Up ; Modifier votre programme afin qu'il calcule et affiche le prix d'envoi d'un colis, selon la valeur du nombre r\u00e9el positif poids_colis ; Tester votre programme en modifiant la valeur de poids_colis . Aide 1 On rappelle le programme corrig\u00e9 de l'exercice pr\u00e9c\u00e9dent. Aide 2 Le prix au kilo est maintenant variable : modifiez la valeur r\u00e9f\u00e9renc\u00e9e par la variable prix_au_kilo en fonction de poids_colis . Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder poidspy-undcolis = 4bksl-nl poidspy-undcolis = 4bksl-nlbksl-nlif poidspy-undcolis > 6.2:bksl-nl prixpy-undaupy-undkg = 2.2bksl-nlelse:bksl-nl if poidspy-undcolis <= 1:bksl-nl prixpy-undaupy-undkg = 0.55bksl-nl else:bksl-nl prixpy-undaupy-undkg = 1.4bksl-nlbksl-nlprix = prixpy-undaupy-undkg py-str poidspy-undcolisbksl-nlprint(prix)bksl-nl La clause sinon ( else ) n'est pas obligatoire. Si elle n'est pas pr\u00e9cis\u00e9e, le bloc code C n'est pas d\u00e9fini et on passe directement \u00e0 la suite du code (voir exercice 2). Lorsque plusieurs conditions sont imbriqu\u00e9es les unes dans les autres, la syntaxe devient tr\u00e8s lourde. Pour faciliter l'\u00e9criture et le maintien des programmes, de nombreux langages font appel \u00e0 des mots-cl\u00e9s alternatifs. En Python, il s'agit de elif qui permet de cr\u00e9er un nouveau branchement. Cours Graphe de contr\u00f4le %%{init:{'theme': 'dark' }}%% graph TD; A[d\u00e9but code]-->p1(\"condition_1\"); p1-->|Vrai|B_1[bloc code B_1]; p1-->|Faux|p2(\"condition_2\"); p2-->|Vrai|B_2[bloc code B_2]; p2-->|Faux|pn1[...]; pn1-->|Vrai|pn(\"condition_n\"); pn-->|Vrai|B_n[bloc code B_n]; pn-->|Faux|C[bloc code C]; B_1-->D[suite code]; B_2-->D; B_n-->D; C-->D; class p1,p2,pn if; Lorsque plusieurs conditions sont imbriqu\u00e9es, la syntaxe ci-dessous est utilis\u00e9e : Syntaxe lisible Syntaxe illisible d\u00e9but code if condition_1 : bloc code B_1 elif condition_2 : bloc code B_2 [ ... ] elif condition_n : bloc code B_n else : bloc code C suite code d\u00e9but code if condition_1 : bloc code B_1 else : if condition_2 : bloc code B_2 else : [ ... ] if condition_n : bloc code B_n else : bloc code C suite code Si la condition_1 n'est pas v\u00e9rifi\u00e9e, alors on passe \u00e0 la condition_2 , Si la condition_2 n'est pas v\u00e9rifi\u00e9e, alors on passe \u00e0 la condition_3 , etc. Les conditions sont donc effectu\u00e9es les unes apr\u00e8s les autres et le else final n'est effectu\u00e9 que si toutes les autres conditions ne sont pas v\u00e9rifi\u00e9es. Les conditionnelles imbriqu\u00e9es Exercice 10 Exercice 11 Exercice 12 Exercice 13 On vous donne le programme de l'exercice 9. En utilisant l'instruction elif , modifier ce programme afin de le rendre plus lisible. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder poidspy-undcolis = 4bksl-nlbksl-nlif poidspy-undcolis > 6.2:bksl-nl prixpy-undaupy-undkg = 2.2bksl-nlelse:bksl-nl if poidspy-undcolis <= 1:bksl-nl prixpy-undaupy-undkg = 0.55bksl-nl else:bksl-nl prixpy-undaupy-undkg = 1.4bksl-nlbksl-nlprix = prixpy-undaupy-undkg py-str poidspy-undcolisbksl-nlprint(prix)bksl-nl poidspy-undcolis = 4bksl-nlbksl-nlif poidspy-undcolis > 6.2:bksl-nl prixpy-undaupy-undkg = 2.2bksl-nlelif poidspy-undcolis <= 1:bksl-nl prixpy-undaupy-undkg = 0.55bksl-nlelse:bksl-nl prixpy-undaupy-undkg = 1.4bksl-nlbksl-nlprix = prixpy-undaupy-undkg py-str poidspy-undcolisbksl-nlprint(prix)bksl-nl Dans l'\u00e9diteur ci-dessous, \u00e9crire un programme qui, selon la valeur d'un nombre r\u00e9el \\(n\\) : affiche \"Strictement positif\" si \\(n\\) est strictement sup\u00e9rieur \u00e0 0 ; affiche \"N\u00e9gatif\" si \\(n\\) est strictement inf\u00e9rieur \u00e0 0 ; affiche \"Nul\" si \\(n\\) est \u00e9gal \u00e0 0. n = - 12 # valeur donn\u00e9e par l'utilisateur if ... : # condition print ( ... ) # affichage Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder n = -12bksl-nlbksl-nlbksl-nlbksl-nlbksl-nl n = -12bksl-nlbksl-nlif n > 0:bksl-nl print(\"Strictement positif\")bksl-nlelif n < 0:bksl-nl print(\"Strictement n\u00c3\u00a9gatif\")bksl-nlelse:bksl-nl print(\"Nul\")bksl-nl On choisit une ann\u00e9e annee . Dans l'\u00e9diteur ci-dessous, \u00e9crire un programme qui, gr\u00e2ce \u00e0 un affichage, indique \u00e0 l'utilisateur si cette ann\u00e9e est bissextile (366 jours sur l'ann\u00e9e). On rappelle qu'une ann\u00e9e est bissextile : si elle est divisible par 400. si elle n'est pas divisible par 100 ; si elle est divisible par 4 ; Quelques exemples : 2000 est bissextile mais 1700 ne l'est pas. Par contre 1712 est bissextile. Aide 1 On rappelle qu'un nombre \\(a\\) est divisible par un nombre \\(b\\) si le reste de la division euclidienne de \\(a\\) par \\(b\\) est \u00e9gal \u00e0 \\(0\\) . Aide 2 En Python, le reste de la division euclidienne de \\(a\\) par \\(b\\) s'obtient avec a % b . Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder n = 1492bksl-nlbksl-nlbksl-nlbksl-nlbksl-nl n = 1492bksl-nlbksl-nlif n % 400 == 0:bksl-nl print(n, \" est bissextile.\")bksl-nlelif n % 100 == 0:bksl-nl print(n, \" n'est pas bissextile.\")bksl-nlelif n % 4 == 0:bksl-nl print(n, \" est bissextile.\")bksl-nlelse:bksl-nl print(n, \" n'est pas bissextile.\")bksl-nl Voici deux programmes \u00e9crits en Python : Programme 1 Programme 2 if a >= 60 : a = a - 60 elif a >= 30 : a = a - 30 else : a = 0 print ( \"La valeur de a est\" , a ) if a >= 60 : a = a - 60 if a >= 30 : a = a - 30 else : a = 0 print ( \"La valeur de a est\" , a ) Tableau a = 130 a=45 a=15 Programme 1 Programme 2 Dessiner les graphes de contr\u00f4le de ces programmes. En utilisant ces graphes, recopier et compl\u00e9ter le tableau ci-contre, pr\u00e9sentant les r\u00e9sultats du programme 1 et du programme 2 si : a = 130 ; a = 45 ; a = 15 . V\u00e9rifiez votre r\u00e9ponse en \u00e9crivant les programmes dans l'\u00e9diteur ci-dessous : Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder Solution a = 130 a=45 a=15 Programme 1 70 15 0 Programme 2 40 15 0 Dans le programme 1, le test a >= 30 n'est r\u00e9alis\u00e9 que si a < 60 . Il est impossible de faire deux soustractions. Dans le programme 2, le graphe de contr\u00f4le montre clairement que le test a >= 30 est toujours r\u00e9alis\u00e9. Ainsi, dans le cas o\u00f9 a >= 60 , on retranche 60 \u00e0 a . Si la nouvelle valeur r\u00e9f\u00e9renc\u00e9e par la variable a est alors sup\u00e9rieure ou \u00e9gale \u00e0 30 a >= 30 , on retranche \u00e0 nouveau 30. On a donc retranch\u00e9 90.","title":"Conditionnelle if/else"},{"location":"python2/#booleens","text":"","title":"Bool\u00e9ens"},{"location":"python2/#syntaxe-en-python","text":"La nature des bool\u00e9ens Situation 1 Situation 2 Quelqu'un affirme 4 est \u00e9gal \u00e0 4 . Que lui r\u00e9pondez-vous ? R\u00e9ponse Ben, c'est VRAI ! Quelqu'un affirme 7 est \u00e9gal \u00e0 12 . Que lui r\u00e9pondez-vous ? R\u00e9ponse Ben, c'est FAUX ! Cours Les bool\u00e9ens constituent la r\u00e9ponse logique \u00e0 une affirmation. Cette r\u00e9ponse logique ne peut avoir que deux valeurs : en Python, elles se notent True ou False . Pour \u00e9crire une affirmation, on utilise les symboles math\u00e9matiques : < , <= , > , >= , != et == . Affirmation Symbole Exemple 1 Exemple 2 a est strictement plus petit que b a < b 38 < 23 est \u00e9gal \u00e0 False 'a' < 'z' est \u00e9gal \u00e0 True (ordre du dictionnaire) a est plus petit ou \u00e9gal \u00e0 b a <= b 23 <= 23 est \u00e9gal \u00e0 True 'a' <= 'A' est \u00e9gal \u00e0 False (voir exercices ci-dessous) a est strictement plus grand que b a > b 5.3 > 5.3 est \u00e9gal \u00e0 False 'abc' > 'aab' est \u00e9gal \u00e0 True a est plus grand ou \u00e9gal \u00e0 b a >= b 5.3 >= 6 / 2 est \u00e9gal \u00e0 True '712' >= '1560' est \u00e9gal \u00e0 True ( '7' >= '1' ) a est diff\u00e9rent de b a != b 12 != 12 est \u00e9gal \u00e0 False 'Vive le 01!' != 'Vive le 75!' est \u00e9gal \u00e0 True ( '0' != '7' ) a est \u00e9gal \u00e0 b a == b 5 == 12 est \u00e9gal \u00e0 False 'Hello' == 'Hello!' est \u00e9gal \u00e0 False Attention En Python, on aime coder avec style : PEP8 stipule qu'il convient de laisser un espace avant et apr\u00e8s chaque op\u00e9rateur. Notez bien qu'on teste l'\u00e9galit\u00e9 avec un double \u00e9gal et la diff\u00e9rence avec point d'exclamation \u00e9gal . Comme nous le verrons dans le chapitre sur les nombres flottants, l'\u00e9galit\u00e9 ou la diff\u00e9rence ne s'utilise jamais avec des nombres \u00e0 virgule (type float ). Ordre lexicographique L'ordre du dictionnaire est aussi appel\u00e9 l'ordre lexicographique. Pour ranger dans l'ordre lexicographique, on compare les deux premiers caract\u00e8res de chaque texte. S'ils sont \u00e9gaux, on compare le deuxi\u00e8me, etc. Exemple L'affirmation oiseau < oisif est-elle vraie ou fausse? En effet : la premi\u00e8re lettre o est la m\u00eame pour chaque cha\u00eene de caract\u00e8res. De m\u00eame pour la deuxi\u00e8me et la troisi\u00e8me lettre. On compare la quatri\u00e8me lettre : e < i . On conclue que la question oiseau < oisif est True . Toutefois, les caract\u00e8res peuvent aussi \u00eatre sp\u00e9ciaux. Que fait-on avec \"1\", \"A\", \"!\" ou . Dans ce cas, on compare leur code Unicode que nous \u00e9tudierons en classe. Exercice Cocher la case si le bool\u00e9en est True . \u00c9nonc\u00e9 Solution 8 == 7 7 != 12 \"abc\" < \"abe\" \"abc\" <= \"abcd\" 65 = 65 - 12 < 9.0 12 <= \"nsi\" 4 + 8 > 12 \"abc\" * 3 >= \"abcabcabc\" 8 == 7 : l'expression est clairement fausse False . 7 != 12 \"abc\" < \"abe\" : \"c\" est avant \"e\" dans l'alphabet donc l'expression est True . \"abc\" <= \"abcd\" : la deuxi\u00e8me expression est plus longue que la premi\u00e8re donc \"inf\u00e9rieure\" 65 = 65 : ce n'est pas un bool\u00e9en ! Un \u00e9gal simple est une affectation. - 12 < 9.0 12 <= \"nsi\" : cette expression renvoie : TypeError : '<=' not supported between instances of 'int' and 'str' . 4 + 8 > 12 : 12 est \u00e9gal \u00e0 12. \"abc\" * 3 >= \"abcabcabc\" : #!python \"abc\"*3 r\u00e9p\u00e8te trois fois la phrase #!python \"abc\" donc #!python \"abcabcabc\"`. Cours Il est tout \u00e0 fait possible d'affecter une valeur bool\u00e9enne \u00e0 une variable. On parle alors de variable bool\u00e9enne. Pour des raisons de clart\u00e9 et de lisibilit\u00e9, il est recommand\u00e9 de mettre des parenth\u00e8ses autour des expressions bool\u00e9ennes lors d'une telle affectation. Exemple entr\u00e9e_autoris\u00e9e = age >= 18 est tout \u00e0 fait correct mais, entr\u00e9e_autoris\u00e9e = ( age >= 18 ) est beaucoup plus facile \u00e0 comprendre.","title":"Syntaxe en Python"},{"location":"python2/#subtilites-booleennes","text":"Introduction Avec les mots-cl\u00e9s dont nous disposons actuellement, certaines conditions logiquement simples sont complexes \u00e0 \u00e9crire. Prenons l'exemple d'un site de rencontres. Si l'utilisateur est un homme et s'il a plus de 18 ans, alors il doit payer. Si l'utilisatrice est une femme et si elle a plus de 18 ans, alors elle ne paie pas. Sinon, l'inscription n'est pas autoris\u00e9e. Voici le programme correspondant : inscription_non_autoris\u00e9e = False if genre == \"homme\" : if age > 18 : inscription_payante = True else : inscription_non_autoris\u00e9e = True else : if age > 18 : inscription_payante = False else : inscription_non_autoris\u00e9e = True Ce serait bien de pouvoir connecter les deux expressions bool\u00e9ennes : l'utilisateur est homme et il a plus de 18 ans ! Le chapitre 3 sur la logique bool\u00e9enne a introduit trois op\u00e9rateurs logiques : le non : \\(\\bar A\\) le et : \\(A \\cdot B\\) le ou : \\(A + B\\) . Ces trois op\u00e9rateurs peuvent simplifier grandement l'\u00e9criture de certaines conditions. Cours Soit deux expressions bool\u00e9ennes c1 et c2 . En accord avec la logique bool\u00e9enne, en Python, il est possible d'utiliser les op\u00e9rateurs bool\u00e9ens suivant : Op\u00e9rateur Nom Effet Exemple and conjonction c1 and c2 est True si c1 et c2 sont simultan\u00e9ment True . 4 <= 8 and 8 <= 12 est True or union c1 or c2 est True si au moins une condition est True . 4 <= 8 or 7 == 12 est True not n\u00e9gation not c1 est True si c1 est False. not ( 1 + 1 == 3 ) est True car 1 + 1 == 3 est False . Priorit\u00e9 op\u00e9ratoire Les r\u00e8gles de priorit\u00e9 sont les m\u00eames qu'en logique bool\u00e9nne. La n\u00e9gation est prioritaire sur la conjonction qui est prioritaire sur l' union . Exemple a or b and not c and d est \u00e9quivalent \u00e0 a or ( b and ( not c ) and d ) car la n\u00e9gation est prioritaire sur la conjonction. Privil\u00e9giez les expressions bool\u00e9ennes simples et l'utilisation de parenth\u00e8ses ! Pour aller plus loin En Python, l'\u00e9valuation des expressions bool\u00e9ennes est dite paresseuse. Dans une expression avec deux expressions bool\u00e9ennes telle que c1 and c2 , Python va d'abord \u00e9valuer c1 . Si cette expression est False , Python s'arr\u00eate et \u00e9value c1 and c2 \u00e0 False . En effet, c1 and c2 est vraie si les deux expressions sont simultan\u00e9ment True . C'est un comportement int\u00e9ressant dans la gestion de cas limites, susceptibles de g\u00e9n\u00e9rer des erreurs. Exemple Testez ces expressions ou programme dans le terminal ci-dessous : 1 / 0 == 2 8 == 3 and 1 / 0 == 2 a = 0 if a == 0 or ( 1 / a > 1e6 ): print ( \"Underflow\" ) >>> Retour sur l'exemple introductif Dans l'\u00e9diteur ci-dessous, on rappelle le programme propos\u00e9 pour le site de rencontre. Un affichage a \u00e9t\u00e9 ajout\u00e9. Expliquer \u00e0 quoi sert la ligne 16. Tester ce programme avec pour valeurs initiales genre , age = \"homme\" , 14 et genre , age = \"homme\" , 34 . Simplifier ce programme \u00e0 l'aide des op\u00e9rateurs bool\u00e9ens (n\u00e9gation not , conjonction and , union or ). Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder genre, age = \"femme\", 21bksl-nlbksl-nlinscriptionpy-undnonpy-undautoris\u00c3\u00a9e = Falsebksl-nlif genre == \"homme\":bksl-nl if age > 18:bksl-nl inscriptionpy-undpayante = Truebksl-nl else:bksl-nl inscriptionpy-undnonpy-undautoris\u00c3\u00a9e = Truebksl-nlelse:bksl-nl if age > 18: bksl-nl inscriptionpy-undpayante = Falsebksl-nl else:bksl-nl inscriptionpy-undnonpy-undautoris\u00c3\u00a9e = Truebksl-nlbksl-nlprint(f\"Interdit : {inscriptionpy-undnonpy-undautoris\u00c3\u00a9e}\")bksl-nlif not inscriptionpy-undnonpy-undautoris\u00c3\u00a9e:bksl-nl print(f\"Payant : {inscriptionpy-undpayante}\")bksl-nl genre, age = \"femme\", 21bksl-nlbksl-nlinscriptionpy-undnonpy-undautoris\u00c3\u00a9e = Falsebksl-nlif age > 18 and genre == \"homme\":bksl-nl inscriptionpy-undpayante = Truebksl-nlelif age > 18 and genre == \"femme\":bksl-nl inscriptionpy-undpayante = Falsebksl-nlelse:bksl-nl inscriptionpy-undnonpy-undautoris\u00c3\u00a9e = Truebksl-nlbksl-nlprint(f\"Interdit : {inscriptionpy-undnonpy-undautoris\u00c3\u00a9e}\")bksl-nlif not inscriptionpy-undnonpy-undautoris\u00c3\u00a9e:bksl-nl print(f\"Payant : {inscriptionpy-undpayante}\")bksl-nl Rappel Pour voir la correction, appuyez sur l'icone gendarme cinq fois de suite. Exercices autour des bool\u00e9ens Exercice 15 Exercice 16 Exercice 17 Exercice 18 Soit a et b deux variables bool\u00e9ennes. \u00c9crire la table de v\u00e9rit\u00e9 (voir Chapitre 2 du cours) correspondant au bool\u00e9en ci-dessous. var_bool\u00e9enne = not a and b Solution \\(a\\) \\(b\\) \\(\\overline a\\) \\(\\bar a \\cdot b\\) 0 0 1 0 0 1 1 1 1 0 0 0 1 1 0 0 L'op\u00e9rateur \"Union exclusive\" \\(\\oplus\\) peut \u00eatre \u00e9crit comme une combinaison d'autres op\u00e9rateurs bool\u00e9ens. Pour deux variables bool\u00e9ennes \\(a\\) et \\(b\\) , on \u00e9crit \\(a \\oplus b = \\overline a \\cdot b + a \\cdot \\overline b\\) . Compl\u00e9ter le programme permettant d'afficher la valeur bool\u00e9enne de \\(a \\oplus b\\) . Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder a, b = True, False # \u00c3 modifier lors des testsbksl-nlvarpy-undbool\u00c3\u00a9enne = () # \u00c3 compl\u00c3\u00a9terbksl-nlbksl-nlprint(varpy-undbool\u00c3\u00a9enne)bksl-nl a, b = True, False # \u00c3 modifier lors des testsbksl-nlvarpy-undbool\u00c3\u00a9enne = (not(a) and b) or (a and not b)bksl-nlbksl-nlprint(varpy-undbool\u00c3\u00a9enne)bksl-nl Soit a, b et c trois variables bool\u00e9ennes. En testant dans l'\u00e9diteur ci-dessous pour diff\u00e9rentes valeurs de a, b et c, dire si ces deux programmes sont \u00e9quivalents. Programme 1 Programme 2 if ( not a and b ) and c : print ( True ) else : print ( False ) if ( not a and b ): print ( True ) elif c : print ( True ) else : print ( False ) Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder Solution Dans ce corrig\u00e9, on prend pour convention : 1 = True ; 0 = False. Dans le programme 1, le seul ensemble de valeurs renvoyant True est \\((a=0, b=1, c=1)\\) . Dans le programme 2, il y a plusieurs ensembles de valeurs qui renvoyant True . Par exemple \\((a=0, b=1, c=1)\\) ou \\((a=0, b=1, c=0)\\) ou \\((a=0, b=1, c=1)\\) . Les programmes ne sont donc pas \u00e9quivalents. Soit a, b et c trois variables bool\u00e9ennes. En testant dans l'\u00e9diteur ci-dessous pour diff\u00e9rentes valeurs de a, b et c, dire si ces deux programmes sont \u00e9quivalents. Programme 1 Programme 2 if ( not a and b ) or c : print ( True ) else : print ( False ) if ( not a and b ): print ( True ) elif c : print ( True ) else : print ( False ) Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder Solution Dans ce corrig\u00e9, on prend pour convention : 1 = True ; 0 = False. Dans le programme 1, d\u00e8s que \\(c=1\\) , le programme renvoie True . Il reste donc \u00e0 ajouter \\((a=0, b=1, c=0)\\) . Dans le programme 2, le premier branchement ne concerne pas c. Il renvoie donc True si \\((a=0, b=1, c=0)\\) ou \\((a=0, b=1, c=1)\\) . Sinon, on arrive au second branchement testant c : si \\(c=1\\) , on renvoie True . Cela correspond \u00e0 \\((a=0, b=0, c=1)\\) ou \\((a=1, b=0, c=1)\\) ou \\((a=1, b=1, c=1)\\) . En r\u00e9sum\u00e9, les valeurs renvoyant True dans le programme 2 correspondent \u00e0 celles du programme 1 : les programmes sont \u00e9quivalents... Mais que c'est d\u00e9sagr\u00e9able \u00e0 analyser ! Cours Dans le cadre d'in\u00e9galit\u00e9s entre nombres (entiers ou flottants), plut\u00f4t que d'utiliser des connecteurs logiques and ou or , il est possible de combiner n'importe quel op\u00e9rateur : 3 < 5 < 7 est \u00e9quivalent \u00e0 3 < 5 and 5 < 7 . Le r\u00e9sultat est True . 8 > 5 >= 7 est \u00e9quivalent \u00e0 8 > 5 and 5 >= 7 . Le r\u00e9sultat est False . 3 < 5 != 7 est \u00e9quivalent \u00e0 3 < 5 and 5 != 7 . Le r\u00e9sultat est True . Attention S'il est possible de combiner n'importe quel op\u00e9rateur, il faut \u00e9viter de faire n'importe quoi pour des questions de lisibilit\u00e9. En particulier, on \u00e9vitera : les in\u00e9galit\u00e9s contre nature tel 12 > 5 < 7 qui est True . les longues expressions tel 6 != 12 < 5 != 7 == 7 qui est False car 12 < 5 est False .","title":"Subtilit\u00e9s bool\u00e9ennes"},{"location":"python2/#bonnes-pratiques","text":"Cours L'indentation est tr\u00e8s importante et vous devez \u00eatre tr\u00e8s rigoureux sur ce point. Toute instruction non indent\u00e9e ne fera pas partie de votre conditionnelle. Pour vous en convaincre, ex\u00e9cutez ces deux exemples de code : Version correcte Version incorrecte La ligne 8 est ex\u00e9cut\u00e9e uniquement si le mot Titanic n'appara\u00eet pas dans la phrase : elle ne s'affiche donc pas. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder phrase = \"Le Titanic sombra rapidement.\"bksl-nlbksl-nlif \"Titanic\" in phrase:bksl-nl print(\"Ce fut un drame ;\")bksl-nl print(\"m\u00c3\u00aame si l'orchestre continua de jouer.\")bksl-nlelse:bksl-nl print(\"Ce ne fut pas un drame ;\")bksl-nl print(\"et l'orchestre continua de jouer.\")bksl-nl La ligne 8 n'est pas inclue dans la clause else : elle s'affiche donc toujours. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder phrase = \"Le Titanic sombra rapidement.\"bksl-nlbksl-nlif \"Titanic\" in phrase:bksl-nl print(\"Ce fut un drame ;\")bksl-nl print(\"m\u00c3\u00aame si l'orchestre continua de jouer.\")bksl-nlelse:bksl-nl print(\"Ce ne fut pas un drame ;\")bksl-nlprint(\"et l'orchestre continua de jouer.\")bksl-nl Si, dans une instruction conditionnelle, vous faites appel \u00e0 une variable bool\u00e9enne var_bool , il est important de ne pas \u00e9crire if var_bool == True : . En effet, var_bool est d\u00e9j\u00e0 un bool\u00e9en dont la valeur est soit True ; soit False . Version correcte Version lourde souquez_les_artibuses = ( nombre_artibuses > 42 ) if souquez_les_artibuses : # si souquez_les_artibuses est True, \u00e0 l'attaque print ( \"\u00c0 l'attaque\" ) else : print ( \"Demi-tour\" ) souquez_les_artibuses = ( nombre_artibuses > 42 ) if souquez_les_artibuses == True : # si souquez_les_artibuses, qui vaut d\u00e9j\u00e0 True, est \u00e9gal \u00e0 True, \u00e0 l'attaque print ( \"\u00c0 l'attaque\" ) else : print ( \"Demi-tour\" ) Exercices r\u00e9capitulatifs Exercice 19 Exercice 20 L'utilisation d'une grille est la m\u00e9thode la plus r\u00e9pandue pour faire des simulations num\u00e9riques de ph\u00e9nom\u00e8nes physiques. Dans cette m\u00e9thode, le plan est divis\u00e9e en cellules carr\u00e9es dans lesquelles \u00e9voluent des particules de mati\u00e8re. Ces particules peuvent se d\u00e9placer dans n'importe quel sens et sont rep\u00e9r\u00e9es par leurs coordonn\u00e9es \\((x, y)\\) . Le plan simul\u00e9 ne pouvant pas \u00eatre infini, il est courant d'imposer des conditions p\u00e9riodiques au bord du carr\u00e9 de simulation. Ainsi, si l'abscisse et l'ordonn\u00e9e d'une particule d\u00e9passe la taille du carr\u00e9, on leur retranche (ou on leur ajoute) le c\u00f4t\u00e9 du carr\u00e9. On se place ici dans un carr\u00e9 de c\u00f4t\u00e9 10. Expliquer ce qui ne convient pas avec le programme ci-dessous. Proposez une simple modification. Quel op\u00e9rateur permettrait d'\u00e9viter l'utilisation des conditionnelles ? if x >= 10 : x = x - 10 elif y >= 10 : y = y - 10 if x < 0 : x = x + 10 elif y < 0 : y = y + 10 Solution Dans ce programme, si x et y sont simultan\u00e9ment sup\u00e9rieurs \u00e0 10, seul x est ramen\u00e9 entre 0 et 10. Il faut simplement changer tous les elif en if . Une astuce consiste \u00e0 utiliser l'op\u00e9rateur modulo % . Par exemple x = 11.1 % 10 est \u00e9gal \u00e0 1.1 . Le programme propos\u00e9 ci-dessous g\u00e9n\u00e8re al\u00e9atoirement deux entiers, compris entre 1 et 6. Si la somme de ces nombres est sup\u00e9rieure ou \u00e9gale \u00e0 10, alors vous devez payer une taxe sp\u00e9ciale (36 pi\u00e8ces). Sinon, vous payez deux fois la somme des nombres. Si vous \u00eates chanceux et que la somme est strictement inf\u00e9rieure \u00e0 4, vous n'avez rien \u00e0 payer. Votre programme devra afficher selon le cas le texte Taxe sp\u00e9ciale ! , Taxe r\u00e9guli\u00e8re , ou Pas de taxe suivi de la somme \u00e0 payer (sans indiquer l'unit\u00e9). Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import randombksl-nlde1 = random.randint(1,6)bksl-nlde2 = random.randint(1,6)bksl-nlprint(f\"La valeur du d\u00c3\u00a9 1 est {de1} et celle du d\u00c3\u00a9 2 est {de2}.\")bksl-nl# Programme \u00c3 commencer ici #bksl-nlbksl-nl import randombksl-nlde1 = random.randint(1,6)bksl-nlde2 = random.randint(1,6)bksl-nlprint(f\"La valeur du d\u00c3\u00a9 1 est {de1} et celle du d\u00c3\u00a9 2 est {de2}.\")bksl-nl# Programme \u00c3 commencer ici #bksl-nlsomme = de1 + de2bksl-nlif somme >= 10:bksl-nl print('Taxe sp\u00c3\u00a9ciale !', 36)bksl-nlelif 4 <= somme < 10:bksl-nl print('Taxe r\u00c3\u00a9guli\u00c3\u00a8re', somme py-str 2)bksl-nlelse :bksl-nl print('Pas de taxe', 0)bksl-nl","title":"Bonnes pratiques"},{"location":"python2/#resume","text":"R\u00e9sum\u00e9 Dans ce chapitre, j'ai appris : ce qu'\u00e9tait un branchement conditionnel ; la syntaxe des branchements conditionnels en Python ; l'importance de la logique bool\u00e9enne et la mani\u00e8re de l'utiliser en Python ; les bonnes pratiques avec les branchements conditionnels. Il existe \u00e9galement des branchements inconditionnels qui ont lieu sans qu'aucune condition soit v\u00e9rifi\u00e9e (voir sch\u00e9ma ci-dessous o\u00f9 on passe directement de l'instruction 1 \u00e0 l'instruction n). Nous utiliserons de tels branchements lorsque nous travaillerons sur l'assembleur. Sachez toutefois que ces branchements sont \u00e0 proscrire en programmation de haut niveau. %%{init:{'theme': 'dark' }}%% graph TD; A[instruction 1]-->B(\"saut vers l'instruction n\"); C[instruction 2]-->D[instruction 3] D-->|\"...\"|E B---->E[instruction n]; class B if; \u21a9 Cliquez sur la fl\u00e8che pour revenir au cours %%{init:{'theme': 'dark' }}%% graph TD; A[\"prix \u2190 prix du panier\"]-->p(\"prix < = 90\u20ac\"); p-->|Vrai|B[\"frais_port \u2190 7\u20ac\"]; p-->|Faux|C[\"frais_port \u2190 0\u20ac\"]; B-->D[\"prix_total \u2190 prix + frais_port afficher prix_total\"]; C-->D; class p if; \u21a9 Cliquez sur la fl\u00e8che pour revenir au cours. On passe directement \u00e0 la suite du code si la condition est fausse. %%{init:{'theme': 'dark' }}%% graph TD; A[\"frais_port \u2190 0\u20ac prix \u2190 prix du panier\"]-->p(\"prix < = 90\u20ac\"); p-->|Vrai|B[\"frais_port \u2190 7\u20ac\"]; p-->|Faux|D; B-->D[\"prix_total \u2190 prix + frais_port afficher prix_total\"]; class p if; \u21a9 Cliquez sur la fl\u00e8che pour revenir au cours %%{init:{'theme': 'dark' }}%% graph TD; A[\"temperature \u2190 measuring the inside temp...\"]-->p(\"temperature > 5\u00b0C\"); p-->|Vrai|B[\"temperature \u2190 temperature - 0.1\u00b0C\"]; p-->|Faux|C[\"temperature \u2190 temperature + 0.1\u00b0C\"]; B-->D[go back]; C-->D[go back]; D-..->A; class p if; \u21a9 Cliquez sur la fl\u00e8che pour revenir au cours %%{init:{'theme': 'dark' }}%% graph TD; A[\"age_client = 15\"]-->p(\"age_client < = 12\"); p-->|Vrai|B[\"prix = 5\"]; p-->|Faux|C[\"prix = 10\"]; B-->D[\"print(prix)\"]; C-->D; class p if; \u21a9 Cliquez sur la fl\u00e8che pour revenir au cours %%{init:{'theme': 'dark' }}%% graph TD; A[\"nombre = 48 diviseur = 1\"]-->p1(\"nombre % 2 == 0\"); p1-->|Vrai|p2(\"nombre % 3 == 0\"); p2-->|Vrai|B[\"diviseur = 6\"]-->p4[\"print(diviseur)\"]; p2-->|Faux|C[\"diviseur = 2\"]-->p4; p1-->|Faux|p3(\"nombre % 3 == 0\"); p3-->|Vrai|D[\"diviseur = 3\"]-->p4; p3--->|Faux|p4; class p1,p2,p3 if; \u21a9 Appuyez sur la fl\u00e8che pour revenir \u00e0 l'exercice. %%{init:{'theme': 'dark' }}%% graph TD; A[\"prix_au_kg = 1,4 \u20ac poids_colis = 4 kg\"]-->p(\"poids_colis strictement sup\u00e9rieur \u00e0 6,2 kg\"); p-->|Vrai|B[\"affiche 'Trop lourd'\"]; p-->|Faux|p1(\"poids_colis inf\u00e9rieur ou \u00e9gal \u00e0 1,0 kg\"); p1-->|Vrai|C[\"affiche 'Trop l\u00e9ger'\"]; p1-->|Faux|p2[\"calcule et affiche le prix d'envoi du colis.\"]; class p,p1 if; \u21a9","title":"R\u00e9sum\u00e9"},{"location":"python3/","text":"Structures de contr\u00f4le : boucles \u2693\ufe0e Principe \u2693\ufe0e En programmation, un principe important est le principe DRY . Cet acronyme signifie D on't R epeat Y ourself. Il sugg\u00e8re qu'un bon programme informatique ne contient pas de r\u00e9p\u00e9titions et \u00e9vite les copier/coller. Si votre programme comporte trop de r\u00e9p\u00e9titions, il faut utiliser de nouvelles structures permettant d'\u00e9viter cela. Utilit\u00e9 des boucles On veut ajouter quatre pi\u00e8ces de 2\u20ac dans une urne. Voici le programme propos\u00e9. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder urne = 0 # urne videbksl-nlurne = urne + 2 # premi\u00c3\u00a8re pi\u00c3\u00a8ce dans l'urnebksl-nlurne = urne + 2 # seconde pi\u00c3\u00a8ce dans l'urnebksl-nlurne = urne + 2bksl-nlurne = urne + 2bksl-nl Affichez le contenu de l'urne dans le terminal. Compl\u00e9tez le programme ci-dessus afin d'ajouter 2 nouvelles pi\u00e8ces de 2\u20ac (total de 6 pi\u00e8ces). Imaginez que l'on veuille maintenant ajouter 5 nouvelles pi\u00e8ces. Compl\u00e9tez le programme ci-dessus. Et pour 7296 nouvelles pi\u00e8ces, comment feriez-vous ? En programmation, on est amen\u00e9 \u00e0 r\u00e9p\u00e9ter de nombreuses fois une m\u00eame instruction ou bloc d'instructions. On introduit donc une nouvelle structure de contr\u00f4le appel\u00e9e boucles . On distingue : les boucles conditionnelles ; les boucles inconditionnelles. D\u00e9finition g\u00e9n\u00e9rale \u2693\ufe0e Cours Graphe de controle graph TD; A[d\u00e9but code]-->p(\"condition\"); p-->|Vrai|B[bloc code A]-->p; p-->|Faux|C[suite code]; class p if; Une boucle est une structure de contr\u00f4le permettant de r\u00e9p\u00e9ter un bloc d'instructions selon une certaine condition. Ce type d'instructions est essentielle \u00e0 tout langage de programmation. Comprendre l'int\u00e9r\u00eat des boucles Exercice 1 Exercice 2 Exercice 3 Exercice 4 Exercice 5 Le programme suivant comporte-t-il une boucle ? 1 2 3 4 Faites fondre le chocolat cass\u00e9 en morceaux avec le beurre. Battez les oeufs avec le sucre jusqu'\u00e0 ce que le m\u00e9lange blanchisse. Ajoutez la farine, le sucre vanill\u00e9, et ajoutez le chocolat. Versez le tout dans un moule, et enfournez \u00e0 180\u00b0C pendant 15 min. Solution Ce programme ne comporte pas de boucle. Chaque instruction est ex\u00e9cut\u00e9e une seule fois. Le programme suivant comporte-t-il une boucle ? 1 2 3 4 5 6 7 Pour multiplier 12 par un nombre entier n, on fait : resultat = 0 # 0 fois resultat = resultat + 12 # 1 fois resultat = resultat + 12 # 2 fois resultat = resultat + 12 # 3 fois ... resultat = resultat + 12 # n fois Solution Ce programme comporte une boucle. Chaque instruction est r\u00e9p\u00e9t\u00e9e n fois ( n peut m\u00eame \u00eatre \u00e9gal \u00e0 0!). La condition est cach\u00e9e. On continue tant que l'addition n'a pas \u00e9t\u00e9 r\u00e9p\u00e9t\u00e9e n fois. Le programme suivant comporte-t-il une boucle ? 1 2 3 4 Mettre l'eau dans le sucre et mettre le plein feu pendant 3 minutes. \u00c0 l'aide d'un thermom\u00e8tre de cuisson, mesurez la temp\u00e9rature. Tant que la temp\u00e9rature n'est pas sup\u00e9rieure \u00e0 127\u00b0C, ajoutez 1 minute de cuisson puis mesurez \u00e0 nouveau la temp\u00e9rature. Une fois la temp\u00e9rature sup\u00e9rieure \u00e0 127\u00b0C, retirez du feu. Solution Ce programme comporte une boucle. Une instruction (la mesure de temp\u00e9rature) doit \u00eatre r\u00e9p\u00e9t\u00e9e autant de fois que n\u00e9cessaire pour d\u00e9passer les 127\u00b0C. La condition est donc temperature >= 127\u00b0C . Le programme suivant comporte-t-il une boucle ? 1 2 3 4 5 6 7 Pensez \u00e0 un nombre entier positif n. Multipliez le nombre 1 par 2, multipliez le nombre obtenu (2) par 3, multipliez le nombre obtenu (6) par 4, etc. multipliez le nombre obtenu par n Vous venez de calculer la factorielle du nombre n ! Solution Ce programme comporte une boucle. On r\u00e9p\u00e8te une instruction (la multiplication par un nombre) un certain nombre de fois. La condition est cach\u00e9e. On continue tant que le nombre par lequel on multiplie est diff\u00e9rent de n . Le programme suivant comporte-t-il une boucle ? 1 2 3 4 Mettre l'eau dans le sucre et mettre le plein feu pendant 3 minutes. \u00c0 l'aide d'un thermom\u00e8tre de cuisson, mesurez la temp\u00e9rature. Si la temp\u00e9rature est sup\u00e9rieure \u00e0 127\u00b0C, ajoutez 50mL d'eau. Mesurez \u00e0 nouveau la temp\u00e9rature puis retirez du feu. Solution Ce programme ne comporte pas de boucle mais une conditionnelle. Chaque instruction est ex\u00e9cut\u00e9e une seule fois : on remarque d'ailleurs que la seconde mesure de temp\u00e9rature ne sert \u00e0 rien ! Boucles conditionnelles while \u2693\ufe0e La structure de contr\u00f4le correspondant le plus au graphe de contr\u00f4le du paragraphe 2 est la boucle conditionnelle. Cours En Python, la syntaxe des boucles conditionnelles est la suivante : d\u00e9but code while condition : bloc code A suite code Exemple Tester le code ci-dessous : Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder i = 0bksl-nlbksl-nlwhile i <= 8:bksl-nl print(i)bksl-nl i = i + 2bksl-nlbksl-nlprint(\"Valeur finale de i :\", i)bksl-nl Pour vous aider \u00e0 mieux comprendre : PythonTutor Une boucle conditionnelle while n\u00e9cessite donc trois \u00e9l\u00e9ments pour fonctionner correctement : initialisation de la variable d'it\u00e9ration avant la boucle (ligne 1). condition (expression bool\u00e9enne) permettant de continuer la boucle ou non (ligne 3). modification de la variable d'it\u00e9ration (appel\u00e9 parfois incr\u00e9mentation) (ligne 5). Pour aller plus loin Dans les langages permettant la sortie anticip\u00e9e de boucle (avec break , return ou goto ), les boucles conditionnelles peuvent \u00eatre vues comme inutiles. Ce n'est pas le cas des langages fonctionnels dont nous parlerons en Terminale : prenez donc l'habitude d'utiliser ces boucles conditionnelles pour ne pas d\u00e9pendre du langage Python en particulier. Manipuler des boucles conditionnelles Exercice 6 Exercice 7 Exercice 8 Exercice 9 Exercice 10 Exercice 11 Exercice 12 Exercice 13 Lire le programme ci-dessous et pr\u00e9dire son fonctionnement. Tester le programme afin de v\u00e9rifier votre pr\u00e9diction. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder i = 1bksl-nlwhile i <= 10:bksl-nl print(i)bksl-nl i = i + 1bksl-nlbksl-nlprint(\"Fini\")bksl-nl Solution Il affiche les nombres de 1 \u00e0 10 inclus. Il affiche un nombre par ligne. \u00c0 l'aide d'une boucle conditionnelle, affichez sur une seule ligne les nombres de 1 \u00e0 10 exclus. On modifiera le programme de l'exercice pr\u00e9c\u00e9dent. On utilisera l' option print ( ... , end = \" \" ) afin d'\u00e9viter qu'un affichage nous ram\u00e8ne \u00e0 la ligne. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder i = 1bksl-nlwhile i <= 10 :bksl-nl print(i)bksl-nl i = ......bksl-nlbksl-nlprint(\"Fini\")bksl-nl i = 1bksl-nlwhile i < 10 :bksl-nl print(i, end = \" \")bksl-nl i = i + 1bksl-nlbksl-nlprint(\"Fini\")bksl-nl \u00c0 l'aide d'une boucle conditionnelle, affichez sur une seule ligne les nombres de 10 \u00e0 1 inclus. On s'inspirera du programme de l'exercice pr\u00e9c\u00e9dent. On utilisera l' option print ( ... , end = \" \" ) afin d'\u00e9viter qu'un affichage nous ram\u00e8ne \u00e0 la ligne. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder i = 10bksl-nlbksl-nlbksl-nlbksl-nlbksl-nlprint(\"Fini\")bksl-nl i = 10bksl-nlwhile i >= 1 :bksl-nl print(i, end = \" \")bksl-nl i = i - 1bksl-nlbksl-nlprint(\"Fini\")bksl-nl Lire le programme ci-dessous et pr\u00e9dire son fonctionnement. Tester le programme afin de v\u00e9rifier votre pr\u00e9diction. R\u00e9aliser une modification simple permettant de supprimer l'instruction conditionnelle. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder i = 1bksl-nlbksl-nlwhile i <= 10:bksl-nl if i % 2 != 0:bksl-nl print(i, end = \" \")bksl-nl i = i + 1bksl-nlbksl-nlprint(\"Fini\")bksl-nl i = 1bksl-nlbksl-nlwhile i <= 10:bksl-nl print(i, end = \" \")bksl-nl i = i + 2bksl-nlbksl-nlprint(\"Fini\")bksl-nlbksl-nl Dans cet exercice, nous souhaitons programmer \u00e0 la main \\(2^n\\) . Remarquons que : \\(2^n = 1 \\times 2 \\times 2 \\times 2 \\times ...\\times 2\\) . Avec des parenth\u00e8ses : \\(2^n = (...(((1 \\times 2) \\times 2) \\times 2) \\times ...\\times 2)\\) Nous devons d'abord calculer la parenth\u00e8se la plus interne ( \\(1 \\times 2\\) ). Pour cela, je d\u00e9cide de prendre une variable appel\u00e9e accumulateur = 1 . En Python, cela s'\u00e9crit : accumulateur * 2 . Nous r\u00e9f\u00e9ren\u00e7ons le r\u00e9sultat dans la variable accumulateur qui vaut \u00e0 pr\u00e9sent 2. La formule devient : \\(2^n = (...((\\text{accumulateur} \\times 2) \\times ...\\times 2)\\) . Nous pouvons r\u00e9it\u00e9rer l'op\u00e9ration et faire : accumulateur * 2 . Nous r\u00e9f\u00e9ren\u00e7ons encore le r\u00e9sultat dans la variable accumulateur qui vaut \u00e0 pr\u00e9sent 4 (= \\(2^2\\) ). Le proc\u00e9d\u00e9 se poursuit jusqu'\u00e0 ce que toutes les multiplications soient r\u00e9alis\u00e9es. Compl\u00e9ter le programme afin qu'il calcule une puissance de 2. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder n = 10bksl-nli = 0bksl-nlaccumulateur = 1bksl-nlbksl-nlwhile ......:bksl-nl i = i + 1bksl-nlbksl-nlbksl-nl print(accumulateur)bksl-nlbksl-nlprint(\"2 puissance n vaut : \", accumulateur)bksl-nl n = 10bksl-nli = 0bksl-nlaccumulateur = 1bksl-nlbksl-nlwhile i < n:bksl-nl i = i + 1bksl-nl accumulateur = accumulateur py-str 2bksl-nlbksl-nl print(accumulateur)bksl-nlbksl-nlprint(\"2 puissance n vaut : \", accumulateur)bksl-nl Dans cet exercice, nous souhaitons programmer \u00e0 la main l'op\u00e9rateur multiplication ! Nous allons nous int\u00e9resser \u00e0 \\(a\\times b\\) , avec b entier. En utilisant la technique de l'accumulateur d\u00e9crite dans l'exercice 10, compl\u00e9ter le programme ci-dessous calculant la multiplication de deux nombres a et b. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder a = 4.2bksl-nlb = 5bksl-nli = 0bksl-nlbksl-nlbksl-nlbksl-nlbksl-nlprint(a, \" \u00e2\u00a8\u2030 \", b, \" = \", accumulateur)bksl-nl a = 4.2bksl-nlb = 5bksl-nli = 0bksl-nlbksl-nlaccumulateur = 0bksl-nlbksl-nlwhile i < b:bksl-nl i = i + 1bksl-nl accumulateur = accumulateur + abksl-nlbksl-nl print(accumulateur)bksl-nlbksl-nlprint(a, \" \u00e2\u00a8\u2030 \", b, \" = \", accumulateur)bksl-nl La suite de Syracuse est une suite d'entiers naturels d\u00e9finie par : \\(u_{n+1}=\\left \\{ \\begin{align} \\frac{u_n}{2} & {\\rm \\quad si}\\ u_n \\rm{ \\ est \\ pair}\\\\ 3u_n +1 & {\\rm \\quad si}\\ u_n \\rm{ \\ est \\ impair}\\\\ \\end{align} \\right .\\) Il existe une hypoth\u00e8se dite conjecture de Collatz affirmant que \"Pour tout nombre entier n choisi, la suite de Syracuse se terminera sur un cycle 4, 2, 1.\" Par exemple, avec \\(u_0 = 6\\) : \\(u_1 = \\dfrac{6}{2} = 3\\) car 6 est pair ; \\(u_2 = 3\\times3+1 = 10\\) car 3 est impair ; \\(u_3 = \\dfrac{10}{2} = 5\\) car 10 est impair ; \\(u_4 = 3\\times 5 + 1 = 16\\) ; \\(u_5 = 8\\) ; \\(u_6 = 4\\) ; \\(u_7 = 2\\) ; \\(u_8 = 1\\) . \u00c9crire un programme permettant de calculer et d'afficher tous les termes de la suite de Syracuse jusqu'\u00e0 la premi\u00e8re apparition d'un 1. Ajouter un compteur permettant de compter le nombre d'\u00e9tapes avant l'apparition d'un 1. Ce compteur est appel\u00e9 le temps de vol. Quel est le temps de vol associ\u00e9 \u00e0 \\(u_0 = 15\\) ? Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder u = 6 # initialisationbksl-nltempspy-undvol = 0bksl-nlbksl-nl# boucle whilebksl-nl# si u divisible par 2:bksl-nl# u prend la nouvelle valeur u/2bksl-nl# sinon:bksl-nl# u prend la valeur 3 py-str u + 1bksl-nl# affichage de ubksl-nlbksl-nlbksl-nl u = 15 # initialisationbksl-nltempspy-undvol = 0bksl-nlbksl-nlwhile u != 1:bksl-nl print(u, tempspy-undvol)bksl-nl if u % 2 == 0:bksl-nl u = u // 2bksl-nl else:bksl-nl u = 3 py-str u + 1bksl-nl tempspy-undvol += 1bksl-nlbksl-nlprint(u, tempspy-undvol)bksl-nlbksl-nl Que fait le programme suivant ? i = 0 while i < 10 : print ( 'Jusque l\u00e0, tout va bien.' ) Solution Ce programme affiche 'Jusque l\u00e0, tout va bien.' mais ne s'arr\u00eate jamais ! En effet, la valeur de la variable de boucle n'est jamais incr\u00e9ment\u00e9e et n'atteint donc jamais 10. Boucles infinies Dans le cadre des boucles conditionnelles, la question de l'arr\u00eat d'un programme se pose. Il faut donc toujours se demander si notre expression bool\u00e9enne sera v\u00e9rifi\u00e9e \u00e0 un moment du programme. Dans un \u00e9diteur de code (Thonny, VSCodium...), vous pouvez n\u00e9anmoins toujours stopper l'ex\u00e9cution d'un script Python \u00e0 l'aide de la combinaison de touches Ctrl \uff0b C . Boucles inconditionnelles for \u2693\ufe0e Cas g\u00e9n\u00e9ral \u2693\ufe0e Cours En Python, la syntaxe des boucles inconditionnelles est la suivante : d\u00e9but code for variable_boucle in it\u00e9rable : bloc code A suite code Qu'est-ce qu'un it\u00e9rable ? Pour nous, il s'agit d'une cha\u00eene de caract\u00e8res ou d'un tableau , car ceux-ci sont compos\u00e9s d'\u00e9l\u00e9ments que l'on peut \u00e9peler : la lettre ou l'\u00e9l\u00e9ment. Exemple 1 (important!) Tester le code ci-dessous. Que fait le code ? Est-ce conforme \u00e0 notre d\u00e9finition d'un it\u00e9rable ? Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder print('Boucle sur une cha\u00c3\u00aene de caract\u00c3\u00a8res')bksl-nlbksl-nlfor lettre in 'PYTHON':bksl-nl print(lettre)bksl-nlbksl-nlprint('Fin de la boucle inconditionnelle')bksl-nl Pour vous aider \u00e0 mieux comprendre : PythonTutor Exemple 2 (important!) Tester le code ci-dessous. Que fait le code ? Est-ce conforme \u00e0 notre d\u00e9finition d'un it\u00e9rable ? Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder print(\"Boucle sur un tableau d'entiers\")bksl-nlbksl-nlfor element in [4, 3, 8, 12, 31]:bksl-nl print(element)bksl-nlbksl-nlprint('Fin de la boucle inconditionnelle')bksl-nl Pour vous aider \u00e0 mieux comprendre : PythonTutor Pour aller plus loin Dans le d\u00e9tail, un it\u00e9rable peut \u00eatre cr\u00e9\u00e9 en Python avec la fonction iter () . On it\u00e8re sur l'it\u00e9rable \u00e0 l'aide de la fonction next () . Lancer le code ci-dessous et dans la console de l'\u00e9diteur ci-contre, \u00e9crire next ( iterable ) . R\u00e9p\u00e9ter cette commande et observer le mot en train d'\u00eatre \u00e9pel\u00e9. La valeur r\u00e9f\u00e9renc\u00e9e par la variable lettre de la boucle for est donc d\u00e9finie gr\u00e2ce \u00e0 un appel \u00e0 next () d'un it\u00e9rateur. Remarquer l'erreur StopIteration qui appara\u00eet une fois l'it\u00e9rable compl\u00e8tement \u00e9pel\u00e9. Modifier mot = 'python' en mot = 12345 et r\u00e9it\u00e9rer l'it\u00e9ration. Cela fonctionne-t-il ? Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder # boucle sur un it\u00c3\u00a9rablebksl-nlfor lettre in 'python':bksl-nl print(lettre)bksl-nlbksl-nlmot = 'python'bksl-nliterable = iter('python')bksl-nl Application directe Exercice 14 Exercice 15 Exercice 16 Exercice 17 Exercice 18 Exercice 19 Exercice 20 Pr\u00e9dire ce que va afficher le programme ci-dessous. \u00c9crire ce programme dans l'\u00e9diteur et l'ex\u00e9cuter. Votre pr\u00e9diction est-elle correcte ? for lettre in '54321...' : print ( lettre ) print ( \"D\u00e9collage\" ) Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder Pr\u00e9dire ce que va afficher le programme ci-dessous. \u00c9crire ce programme dans l'\u00e9diteur et l'ex\u00e9cuter. Votre pr\u00e9diction est-elle correcte ? Modifier la ligne 3 afin d'afficher une phrase un peu plus correcte. 1 2 3 4 texte = \"\" for mot in [ \"Les \" , \"chaussettes \" , \"sont-elles \" , \"s\u00e8ches ?\" ]: texte = mot + texte print ( texte ) Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nlbksl-nlbksl-nlbksl-nl texte = \"\"bksl-nlfor mot in [\"Les \", \"chaussettes \", \"sont-elles \", \"s\u00c3\u00a8ches ?\"]:bksl-nl # Ajouter le mot \u00c3 la fin du texte !bksl-nl texte = texte + motbksl-nlprint(texte)bksl-nl Voici un tableau d'acteurs : tableau_acteurs = [ 'Tahar' , 'Omar' , 'Guillaume' , 'Swann' , 'Alex' , 'Roschdy' ] . Utiliser ce tableau pour obtenir l'affichage suivant : Tahar a eu le C\u00e9sar du meilleur acteur Omar a eu le C\u00e9sar du meilleur acteur Guillaume a eu le C\u00e9sar du meilleur acteur Swann a eu le C\u00e9sar du meilleur acteur Alex a eu le C\u00e9sar du meilleur acteur Roschdy a eu le C\u00e9sar du meilleur acteur Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder tableaupy-undacteurs = ['Tahar', 'Omar', 'Guillaume', 'Swann', 'Alex', 'Roschdy']bksl-nlbksl-nlbksl-nlbksl-nlbksl-nl for acteur in ['Tahar', 'Omar', 'Guillaume', 'Swann', 'Alex', 'Roschdy']:bksl-nl print(acteur, \"a eu le C\u00c3\u00a9sar du meilleur acteur\")bksl-nl Pr\u00e9dire ce que va afficher le programme ci-dessous. \u00c9crire ce programme dans l'\u00e9diteur et l'ex\u00e9cuter. Votre pr\u00e9diction est-elle correcte ? 1 2 3 4 n = 3 for lettre in \"abcd\" : n = n + 2 print ( n ) Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder tableaupy-undacteurs = ['Tahar', 'Omar', 'Guillaume', 'Swann', 'Alex', 'Roschdy']bksl-nlbksl-nlfor acteur in tableaupy-undacteurs:bksl-nl print(acteur, \"a eu le C\u00c3\u00a9sar du meilleur acteur\")bksl-nl Remarque On remarque qu'on vient de r\u00e9p\u00e9ter la m\u00eame op\u00e9ration 4 fois car l'it\u00e9rable est compos\u00e9 de 4 lettres. Ex\u00e9cuter ce programme ci-dessous. Qu'affiche-t-il ? Comprendre le fonctionnement de l'accumulateur en affichant, dans la boucle, les valeurs r\u00e9f\u00e9renc\u00e9es par les variables accumulateur et mot . Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder tableaupy-undmot = [\"la \", \"petite \", \"fille \", \"chante.\"]bksl-nlaccumulateur = \"Le soir, \"bksl-nlbksl-nlfor mot in tableaupy-undmot:bksl-nl accumulateur = accumulateur + motbksl-nlbksl-nlprint(accumulateur)bksl-nl tableaupy-undmot = [\"la \", \"petite \", \"fille \", \"chante.\"]bksl-nlaccumulateur = \"Le soir, \"bksl-nlbksl-nlfor mot in tableaupy-undmot:bksl-nl accumulateur = accumulateur + motbksl-nlbksl-nlprint(accumulateur)bksl-nl Aide L'accumulateur permet d'ajouter dans une m\u00eame variable plusieurs valeurs. Cela permet donc d'accumuler des cha\u00eenes de caract\u00e8res en des phrases ou plus souvent d'additionner des nombres ensemble, comme dans l'exercice suivant. On dispose d'un tableau d'entiers : tableau = [ 1 , 2 , 3 , 4 , 5 ] . \u00c9crire un programme qui, \u00e0 l'aide d'une boucle inconditionnelle, r\u00e9alise l'addition de 1, 2, 3, 4 et 5. Pensez \u00e0 l'accumulateur de l'exercice 10. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder tableau = [1, 2 ,3 ,4, 5]bksl-nlaccumulateur = 0bksl-nl tableau = [1, 2, 3, 4, 5]bksl-nlaccumulateur = 0bksl-nlbksl-nlfor nombre in tableau:bksl-nl accumulateur = accumulateur + nombrebksl-nl # accumulateur += nombre # fonctionne \u00c3\u00a9galementbksl-nlbksl-nlprint(accumulateur)bksl-nl Aide Il s'agit d'utiliser une variable accumulateur qui va \u00eatre initialis\u00e9e \u00e0 0. On va ensuite calculer accumulateur * nombre et r\u00e9f\u00e9rencer le r\u00e9sultat par la variable accumulateur . On dispose d'un tableau d'entiers : tableau = [ 10 , 20 , 30 , 40 ] . Nous souhaitons tirer et afficher quatre nombres al\u00e9atoires entre 0 et 10, 10 et 20, 20 et 30 et 30 et 40. Le d\u00e9but de programme ci-dessous vous montre comment tirer des nombres de mani\u00e8re al\u00e9atoire. Modifier ce programme \u00e0 l'aide d'une boucle inconditionnelle for . Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import randombksl-nlbksl-nltableau = [10, 20, 30, 40]bksl-nlvaleurpy-undmini = 0bksl-nlvaleurpy-undmaxi = 10bksl-nlrandom.randint(valeurpy-undmini, valeurpy-undmaxi)bksl-nlbksl-nlvaleurpy-undmini = 10bksl-nlvaleurpy-undmaxi = 20bksl-nlrandom.randint(valeurpy-undmini, valeurpy-undmaxi)bksl-nl import randombksl-nlbksl-nltableau = [10, 20, 30, 40]bksl-nlvaleurpy-undmini = 0bksl-nlbksl-nlfor nombre in tableau:bksl-nl valeurpy-undmaxi = nombrebksl-nl print(random.randint(valeurpy-undmini, valeurpy-undmaxi))bksl-nl valeurpy-undmini = valeurpy-undmaxibksl-nl Aide Remarquez que \u00e0 chaque \u00e9tape l'ancienne valeur maximum est devenue la valeur minimum : valeur_mini = valeur_maxi . Cela vous donne une r\u00e8gle \u00e0 suivre dans la boucle inconditionnelle. Cas de range \u2693\ufe0e R\u00e9p\u00e9tition d'instruction Savoir parcourir un it\u00e9rable est tr\u00e8s pratique mais nous limite beaucoup. Souvent, nous souhaitons : conna\u00eetre le num\u00e9ro de la lettre courante (par exemple, dans le mot \"Venom\", V est la lettre d' indice 0, e la lettre d' indice 1 etc.) ; pouvoir r\u00e9p\u00e9ter un nombre d\u00e9termin\u00e9 de fois une action. Par exemple, dans le code ci-dessous, nous r\u00e9p\u00e9tons une phrase 5 fois : Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder for i in range(5):bksl-nl print(i, \"We're up all night to get lucky\")bksl-nl Cours Un it\u00e9rable occupe une place tr\u00e8s particuli\u00e8re : il s'agit de range ( n ) . Faire parcourir \u00e0 une variable k l'it\u00e9rable range ( n ) va lui faire prendre successivement les valeurs 0, 1, 2, ..., n-1 . Lancer le programme ci-dessous : Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder for k in range(4):bksl-nl print(\"k = \", k)bksl-nlbksl-nlbksl-nlbksl-nl Remarque k va de 0 \u00e0 n-1 . Il y a donc bien n valeurs qui sont parcourues. Lorsque l'on it\u00e8re sur range , la variable de boucle est souvent nomm\u00e9 i , j ou k . Manipulation de range Exercice 21 Exercice 22 Exercice 23 Exercice 24 Faire afficher la s\u00e9ries de nombres ci-dessous. On utilisera la syntaxe print ( k , end = ' ' ) pour afficher les nombres horizontalement. 0 1 2 3 4 5 Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nlbksl-nlbksl-nlbksl-nlbksl-nl for i in range(6):bksl-nl print(i, end = ' ')bksl-nl Faire afficher la s\u00e9ries de nombres ci-dessous. On utilisera la syntaxe print ( k , end = ' ' ) pour afficher les nombres horizontalement. 5 6 7 8 9 10 Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nlbksl-nlbksl-nlbksl-nlbksl-nl for i in range(6):bksl-nl print(i + 5, end = ' ')bksl-nl Faire afficher la s\u00e9ries de nombres ci-dessous. On utilisera la syntaxe print ( k , end = ' ' ) pour afficher les nombres horizontalement. 1 4 7 10 13 16 19 22 Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nlbksl-nlbksl-nlbksl-nlbksl-nl for i in range(8):bksl-nl print(3 py-str i + 1, end = ' ')bksl-nl Faire afficher la s\u00e9ries de nombres ci-dessous. On utilisera la syntaxe print ( k , end = ' ' ) pour afficher les nombres horizontalement. 10 9 8 7 6 5 4 3 2 1 0 Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nl for i in range(11):bksl-nl print(10 - i, end = ' ')bksl-nl It\u00e9rable ou range ? \u2693\ufe0e Comment choisir entre for i in it\u00e9rable ou for i in range ( n ) ? Cours Le crit\u00e8re est simple : si on s'int\u00e9resse au contenu d'un it\u00e9rable (par exemple, aux lettres d'un mot), on va parcourir l'it\u00e9rable ; si on s'int\u00e9resse \u00e0 du comptage ou \u00e0 la position des valeurs dans l'it\u00e9rable, on va utiliser range . It\u00e9rable ou range : faites le bon choix ! Exercice 25 Exercice 26 Exercice 27 \u00c9crire un programme qui affiche les lettres du mot \"Artiste\". Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nl for lettre in 'Artiste':bksl-nl print(lettre)bksl-nl \u00c9crire un programme qui affiche la table de multiplication de 7. On obtiendra l'affichage suivant : 7 x 0 = 0 7 x 1 = 7 ... 7 x 10 = 70 Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nlbksl-nlbksl-nlbksl-nlbksl-nl for k in range(11):bksl-nl print(k, ' x ', 7, ' = ', 7 py-str k)bksl-nl \u00c9crire un programme qui affiche In the castle of AAAAArrrrrggggghhhhh . On pourra partir du mot 'Argh' o\u00f9 l'on r\u00e9p\u00e9tera 5 fois chaque lettre. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder phrase = 'In the castle of 'bksl-nlbksl-nlbksl-nlprint(phrase)bksl-nl phrase = 'In the castle of 'bksl-nlmot = ''bksl-nl# aucune raison d'utiliser range : bksl-nlfor lettre in 'Argh':bksl-nl mot = mot + lettre py-str 5bksl-nlbksl-nlphrase = phrase + motbksl-nlprint(phrase)bksl-nlbksl-nlbksl-nl Boucles imbriqu\u00e9es \u2693\ufe0e Cours Il est tr\u00e8s souvent utile d'imbriquer une boucle dans une autre, notamment lors du parcours de tous les pixels d'une image. Exemple Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder for a in range(5):bksl-nl for b in range(4):bksl-nl p = a py-str bbksl-nl print(a, 'py-str', b, '=', p, end = ', ')bksl-nl print()bksl-nl Exercices r\u00e9capitulatifs \u2693\ufe0e Cours On utilise une boucle conditionnelle quand on ne conna\u00eet pas \u00e0 l'avance le nombre de r\u00e9p\u00e9titions. On utilise une boucle inconditionnelle quand on veut \u00e9peler des \u00e9l\u00e9ments un \u00e0 un ou que l'on conna\u00eet le nombre de r\u00e9p\u00e9titions \u00e0 effectuer, Exercice 28 Sur un jeu d'\u00e9checs, les cases sont rep\u00e9r\u00e9es par une lettre (de A jusqu'\u00e0 H) et par un chiffre (de 1 jusqu'\u00e0 8). Les cases sont donc A1, A2, A3, ..., H7, H8. Proposer un code qui affiche toutes les cases possibles. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder for lettre in \"ABCDEFGH\":bksl-nl bksl-nl bksl-nlbksl-nl print()bksl-nl for lettre in \"ABCDEFGH\":bksl-nl for chiffre in range(8):bksl-nl case = lettre + str(chiffre + 1)bksl-nl print(case, end = ' ')bksl-nl print()bksl-nl Exercice 29 En Python, la fonction ord renvoie le code Unicode d'un caract\u00e8re et la fonction chr le contraire: elle renvoie le caract\u00e8re correspondant \u00e0 un code Unicode. Par exemple: >>> ord ( 'a' ) 97 >>> chr ( 97 ) 'a' Voici une liste contenant les codes Unicode des lettres d'un mot secret... \u00c9crire un programme o\u00f9 en sortie, la variable mot_secret contiendra la cha\u00eene de caract\u00e8res de ce mot. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder mystere = [111, 107, 44, 32, 98, 105, 101, 110, 32, 106, 111, 117, 233]bksl-nlmotpy-undsecret = \"\"bksl-nl mystere = [111, 107, 44, 32, 98, 105, 101, 110, 32, 106, 111, 117, 233]bksl-nlmotpy-undsecret = \"\"bksl-nlbksl-nlfor nombre in mystere:bksl-nl lettre = chr(nombre)bksl-nl motpy-undsecret = motpy-undsecret + lettrebksl-nlbksl-nlprint(motpy-undsecret)bksl-nl Exercice 30 On imagine une puce qui se d\u00e9place al\u00e9atoirement sur une ligne, en avant ou en arri\u00e8re, par pas de 1 ou -1. Par exemple : si elle est \u00e0 l'emplacement 0, elle peut sauter \u00e0 l'emplacement 1 ou -1 ; si elle est \u00e0 l'emplacement 2, elle peut sauter \u00e0 l'emplacement 3 ou 1. Avec la boucle de votre choix, simuler le mouvement de cette puce de l'emplacement initial 0 \u00e0 l'emplacement final 5 (voir le sch\u00e9ma de la figure). Afficher le nombre de sauts n\u00e9cessaires pour r\u00e9aliser ce parcours. Relancer plusieurs fois le programme. Trouve-t-on le m\u00eame nombre de sauts \u00e0 chaque ex\u00e9cution ? G\u00e9n\u00e9rer des nombres al\u00e9atoires Afin de g\u00e9n\u00e9rer des nombres al\u00e9atoires, nous importons le module random . Le programme propos\u00e9 utilise \u00e9galement l'instruction random . choice ([ - 1 , 1 ]) qui renvoie au hasard la valeur -1 ou 1 avec une probabilit\u00e9 \\(\\dfrac{1}{2}\\) . Nous reverrons la signification de cette syntaxe particuli\u00e8re dans le chapitre sur la modularit\u00e9 . Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import randombksl-nlbksl-nld\u00c3\u00a9part = 0bksl-nlarriv\u00c3\u00a9e = 5bksl-nlnombrepy-undsauts = 0bksl-nlbksl-nlbksl-nlbksl-nlbksl-nlprint(nombrepy-undsauts)bksl-nl import randombksl-nlbksl-nld\u00c3\u00a9part = 0bksl-nlarriv\u00c3\u00a9e = 5bksl-nlbksl-nlpositionpy-undpuce = d\u00c3\u00a9partbksl-nlnombrepy-undsauts = 0bksl-nlwhile positionpy-undpuce != arriv\u00c3\u00a9e:bksl-nl positionpy-undpuce = positionpy-undpuce + random.choice([-1, 1])bksl-nl nombrepy-undsauts += 1 # ou nombrepy-undsauts = nombrepy-undsauts + 1bksl-nlbksl-nlprint(nombrepy-undsauts)bksl-nl R\u00e9sum\u00e9 Dans ce chapitre, j'ai appris : l'int\u00e9r\u00eat des boucles dans la cadre du principe DRY ; l'existence de boucles conditionnelles et inconditionnelles ; comment utiliser les boucles conditionnelles ; comment parcourir les valeurs d'un it\u00e9rable avec une boucle inconditionnelle ; comment parcourir les indices d'un it\u00e9rable avec une boucle inconditionnelle.","title":"Boucles"},{"location":"python3/#structures-de-controle-boucles","text":"","title":"Structures de contr\u00f4le : boucles"},{"location":"python3/#principe","text":"En programmation, un principe important est le principe DRY . Cet acronyme signifie D on't R epeat Y ourself. Il sugg\u00e8re qu'un bon programme informatique ne contient pas de r\u00e9p\u00e9titions et \u00e9vite les copier/coller. Si votre programme comporte trop de r\u00e9p\u00e9titions, il faut utiliser de nouvelles structures permettant d'\u00e9viter cela. Utilit\u00e9 des boucles On veut ajouter quatre pi\u00e8ces de 2\u20ac dans une urne. Voici le programme propos\u00e9. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder urne = 0 # urne videbksl-nlurne = urne + 2 # premi\u00c3\u00a8re pi\u00c3\u00a8ce dans l'urnebksl-nlurne = urne + 2 # seconde pi\u00c3\u00a8ce dans l'urnebksl-nlurne = urne + 2bksl-nlurne = urne + 2bksl-nl Affichez le contenu de l'urne dans le terminal. Compl\u00e9tez le programme ci-dessus afin d'ajouter 2 nouvelles pi\u00e8ces de 2\u20ac (total de 6 pi\u00e8ces). Imaginez que l'on veuille maintenant ajouter 5 nouvelles pi\u00e8ces. Compl\u00e9tez le programme ci-dessus. Et pour 7296 nouvelles pi\u00e8ces, comment feriez-vous ? En programmation, on est amen\u00e9 \u00e0 r\u00e9p\u00e9ter de nombreuses fois une m\u00eame instruction ou bloc d'instructions. On introduit donc une nouvelle structure de contr\u00f4le appel\u00e9e boucles . On distingue : les boucles conditionnelles ; les boucles inconditionnelles.","title":"Principe"},{"location":"python3/#definition-generale","text":"Cours Graphe de controle graph TD; A[d\u00e9but code]-->p(\"condition\"); p-->|Vrai|B[bloc code A]-->p; p-->|Faux|C[suite code]; class p if; Une boucle est une structure de contr\u00f4le permettant de r\u00e9p\u00e9ter un bloc d'instructions selon une certaine condition. Ce type d'instructions est essentielle \u00e0 tout langage de programmation. Comprendre l'int\u00e9r\u00eat des boucles Exercice 1 Exercice 2 Exercice 3 Exercice 4 Exercice 5 Le programme suivant comporte-t-il une boucle ? 1 2 3 4 Faites fondre le chocolat cass\u00e9 en morceaux avec le beurre. Battez les oeufs avec le sucre jusqu'\u00e0 ce que le m\u00e9lange blanchisse. Ajoutez la farine, le sucre vanill\u00e9, et ajoutez le chocolat. Versez le tout dans un moule, et enfournez \u00e0 180\u00b0C pendant 15 min. Solution Ce programme ne comporte pas de boucle. Chaque instruction est ex\u00e9cut\u00e9e une seule fois. Le programme suivant comporte-t-il une boucle ? 1 2 3 4 5 6 7 Pour multiplier 12 par un nombre entier n, on fait : resultat = 0 # 0 fois resultat = resultat + 12 # 1 fois resultat = resultat + 12 # 2 fois resultat = resultat + 12 # 3 fois ... resultat = resultat + 12 # n fois Solution Ce programme comporte une boucle. Chaque instruction est r\u00e9p\u00e9t\u00e9e n fois ( n peut m\u00eame \u00eatre \u00e9gal \u00e0 0!). La condition est cach\u00e9e. On continue tant que l'addition n'a pas \u00e9t\u00e9 r\u00e9p\u00e9t\u00e9e n fois. Le programme suivant comporte-t-il une boucle ? 1 2 3 4 Mettre l'eau dans le sucre et mettre le plein feu pendant 3 minutes. \u00c0 l'aide d'un thermom\u00e8tre de cuisson, mesurez la temp\u00e9rature. Tant que la temp\u00e9rature n'est pas sup\u00e9rieure \u00e0 127\u00b0C, ajoutez 1 minute de cuisson puis mesurez \u00e0 nouveau la temp\u00e9rature. Une fois la temp\u00e9rature sup\u00e9rieure \u00e0 127\u00b0C, retirez du feu. Solution Ce programme comporte une boucle. Une instruction (la mesure de temp\u00e9rature) doit \u00eatre r\u00e9p\u00e9t\u00e9e autant de fois que n\u00e9cessaire pour d\u00e9passer les 127\u00b0C. La condition est donc temperature >= 127\u00b0C . Le programme suivant comporte-t-il une boucle ? 1 2 3 4 5 6 7 Pensez \u00e0 un nombre entier positif n. Multipliez le nombre 1 par 2, multipliez le nombre obtenu (2) par 3, multipliez le nombre obtenu (6) par 4, etc. multipliez le nombre obtenu par n Vous venez de calculer la factorielle du nombre n ! Solution Ce programme comporte une boucle. On r\u00e9p\u00e8te une instruction (la multiplication par un nombre) un certain nombre de fois. La condition est cach\u00e9e. On continue tant que le nombre par lequel on multiplie est diff\u00e9rent de n . Le programme suivant comporte-t-il une boucle ? 1 2 3 4 Mettre l'eau dans le sucre et mettre le plein feu pendant 3 minutes. \u00c0 l'aide d'un thermom\u00e8tre de cuisson, mesurez la temp\u00e9rature. Si la temp\u00e9rature est sup\u00e9rieure \u00e0 127\u00b0C, ajoutez 50mL d'eau. Mesurez \u00e0 nouveau la temp\u00e9rature puis retirez du feu. Solution Ce programme ne comporte pas de boucle mais une conditionnelle. Chaque instruction est ex\u00e9cut\u00e9e une seule fois : on remarque d'ailleurs que la seconde mesure de temp\u00e9rature ne sert \u00e0 rien !","title":"D\u00e9finition g\u00e9n\u00e9rale"},{"location":"python3/#boucles-conditionnelles-while","text":"La structure de contr\u00f4le correspondant le plus au graphe de contr\u00f4le du paragraphe 2 est la boucle conditionnelle. Cours En Python, la syntaxe des boucles conditionnelles est la suivante : d\u00e9but code while condition : bloc code A suite code Exemple Tester le code ci-dessous : Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder i = 0bksl-nlbksl-nlwhile i <= 8:bksl-nl print(i)bksl-nl i = i + 2bksl-nlbksl-nlprint(\"Valeur finale de i :\", i)bksl-nl Pour vous aider \u00e0 mieux comprendre : PythonTutor Une boucle conditionnelle while n\u00e9cessite donc trois \u00e9l\u00e9ments pour fonctionner correctement : initialisation de la variable d'it\u00e9ration avant la boucle (ligne 1). condition (expression bool\u00e9enne) permettant de continuer la boucle ou non (ligne 3). modification de la variable d'it\u00e9ration (appel\u00e9 parfois incr\u00e9mentation) (ligne 5). Pour aller plus loin Dans les langages permettant la sortie anticip\u00e9e de boucle (avec break , return ou goto ), les boucles conditionnelles peuvent \u00eatre vues comme inutiles. Ce n'est pas le cas des langages fonctionnels dont nous parlerons en Terminale : prenez donc l'habitude d'utiliser ces boucles conditionnelles pour ne pas d\u00e9pendre du langage Python en particulier. Manipuler des boucles conditionnelles Exercice 6 Exercice 7 Exercice 8 Exercice 9 Exercice 10 Exercice 11 Exercice 12 Exercice 13 Lire le programme ci-dessous et pr\u00e9dire son fonctionnement. Tester le programme afin de v\u00e9rifier votre pr\u00e9diction. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder i = 1bksl-nlwhile i <= 10:bksl-nl print(i)bksl-nl i = i + 1bksl-nlbksl-nlprint(\"Fini\")bksl-nl Solution Il affiche les nombres de 1 \u00e0 10 inclus. Il affiche un nombre par ligne. \u00c0 l'aide d'une boucle conditionnelle, affichez sur une seule ligne les nombres de 1 \u00e0 10 exclus. On modifiera le programme de l'exercice pr\u00e9c\u00e9dent. On utilisera l' option print ( ... , end = \" \" ) afin d'\u00e9viter qu'un affichage nous ram\u00e8ne \u00e0 la ligne. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder i = 1bksl-nlwhile i <= 10 :bksl-nl print(i)bksl-nl i = ......bksl-nlbksl-nlprint(\"Fini\")bksl-nl i = 1bksl-nlwhile i < 10 :bksl-nl print(i, end = \" \")bksl-nl i = i + 1bksl-nlbksl-nlprint(\"Fini\")bksl-nl \u00c0 l'aide d'une boucle conditionnelle, affichez sur une seule ligne les nombres de 10 \u00e0 1 inclus. On s'inspirera du programme de l'exercice pr\u00e9c\u00e9dent. On utilisera l' option print ( ... , end = \" \" ) afin d'\u00e9viter qu'un affichage nous ram\u00e8ne \u00e0 la ligne. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder i = 10bksl-nlbksl-nlbksl-nlbksl-nlbksl-nlprint(\"Fini\")bksl-nl i = 10bksl-nlwhile i >= 1 :bksl-nl print(i, end = \" \")bksl-nl i = i - 1bksl-nlbksl-nlprint(\"Fini\")bksl-nl Lire le programme ci-dessous et pr\u00e9dire son fonctionnement. Tester le programme afin de v\u00e9rifier votre pr\u00e9diction. R\u00e9aliser une modification simple permettant de supprimer l'instruction conditionnelle. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder i = 1bksl-nlbksl-nlwhile i <= 10:bksl-nl if i % 2 != 0:bksl-nl print(i, end = \" \")bksl-nl i = i + 1bksl-nlbksl-nlprint(\"Fini\")bksl-nl i = 1bksl-nlbksl-nlwhile i <= 10:bksl-nl print(i, end = \" \")bksl-nl i = i + 2bksl-nlbksl-nlprint(\"Fini\")bksl-nlbksl-nl Dans cet exercice, nous souhaitons programmer \u00e0 la main \\(2^n\\) . Remarquons que : \\(2^n = 1 \\times 2 \\times 2 \\times 2 \\times ...\\times 2\\) . Avec des parenth\u00e8ses : \\(2^n = (...(((1 \\times 2) \\times 2) \\times 2) \\times ...\\times 2)\\) Nous devons d'abord calculer la parenth\u00e8se la plus interne ( \\(1 \\times 2\\) ). Pour cela, je d\u00e9cide de prendre une variable appel\u00e9e accumulateur = 1 . En Python, cela s'\u00e9crit : accumulateur * 2 . Nous r\u00e9f\u00e9ren\u00e7ons le r\u00e9sultat dans la variable accumulateur qui vaut \u00e0 pr\u00e9sent 2. La formule devient : \\(2^n = (...((\\text{accumulateur} \\times 2) \\times ...\\times 2)\\) . Nous pouvons r\u00e9it\u00e9rer l'op\u00e9ration et faire : accumulateur * 2 . Nous r\u00e9f\u00e9ren\u00e7ons encore le r\u00e9sultat dans la variable accumulateur qui vaut \u00e0 pr\u00e9sent 4 (= \\(2^2\\) ). Le proc\u00e9d\u00e9 se poursuit jusqu'\u00e0 ce que toutes les multiplications soient r\u00e9alis\u00e9es. Compl\u00e9ter le programme afin qu'il calcule une puissance de 2. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder n = 10bksl-nli = 0bksl-nlaccumulateur = 1bksl-nlbksl-nlwhile ......:bksl-nl i = i + 1bksl-nlbksl-nlbksl-nl print(accumulateur)bksl-nlbksl-nlprint(\"2 puissance n vaut : \", accumulateur)bksl-nl n = 10bksl-nli = 0bksl-nlaccumulateur = 1bksl-nlbksl-nlwhile i < n:bksl-nl i = i + 1bksl-nl accumulateur = accumulateur py-str 2bksl-nlbksl-nl print(accumulateur)bksl-nlbksl-nlprint(\"2 puissance n vaut : \", accumulateur)bksl-nl Dans cet exercice, nous souhaitons programmer \u00e0 la main l'op\u00e9rateur multiplication ! Nous allons nous int\u00e9resser \u00e0 \\(a\\times b\\) , avec b entier. En utilisant la technique de l'accumulateur d\u00e9crite dans l'exercice 10, compl\u00e9ter le programme ci-dessous calculant la multiplication de deux nombres a et b. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder a = 4.2bksl-nlb = 5bksl-nli = 0bksl-nlbksl-nlbksl-nlbksl-nlbksl-nlprint(a, \" \u00e2\u00a8\u2030 \", b, \" = \", accumulateur)bksl-nl a = 4.2bksl-nlb = 5bksl-nli = 0bksl-nlbksl-nlaccumulateur = 0bksl-nlbksl-nlwhile i < b:bksl-nl i = i + 1bksl-nl accumulateur = accumulateur + abksl-nlbksl-nl print(accumulateur)bksl-nlbksl-nlprint(a, \" \u00e2\u00a8\u2030 \", b, \" = \", accumulateur)bksl-nl La suite de Syracuse est une suite d'entiers naturels d\u00e9finie par : \\(u_{n+1}=\\left \\{ \\begin{align} \\frac{u_n}{2} & {\\rm \\quad si}\\ u_n \\rm{ \\ est \\ pair}\\\\ 3u_n +1 & {\\rm \\quad si}\\ u_n \\rm{ \\ est \\ impair}\\\\ \\end{align} \\right .\\) Il existe une hypoth\u00e8se dite conjecture de Collatz affirmant que \"Pour tout nombre entier n choisi, la suite de Syracuse se terminera sur un cycle 4, 2, 1.\" Par exemple, avec \\(u_0 = 6\\) : \\(u_1 = \\dfrac{6}{2} = 3\\) car 6 est pair ; \\(u_2 = 3\\times3+1 = 10\\) car 3 est impair ; \\(u_3 = \\dfrac{10}{2} = 5\\) car 10 est impair ; \\(u_4 = 3\\times 5 + 1 = 16\\) ; \\(u_5 = 8\\) ; \\(u_6 = 4\\) ; \\(u_7 = 2\\) ; \\(u_8 = 1\\) . \u00c9crire un programme permettant de calculer et d'afficher tous les termes de la suite de Syracuse jusqu'\u00e0 la premi\u00e8re apparition d'un 1. Ajouter un compteur permettant de compter le nombre d'\u00e9tapes avant l'apparition d'un 1. Ce compteur est appel\u00e9 le temps de vol. Quel est le temps de vol associ\u00e9 \u00e0 \\(u_0 = 15\\) ? Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder u = 6 # initialisationbksl-nltempspy-undvol = 0bksl-nlbksl-nl# boucle whilebksl-nl# si u divisible par 2:bksl-nl# u prend la nouvelle valeur u/2bksl-nl# sinon:bksl-nl# u prend la valeur 3 py-str u + 1bksl-nl# affichage de ubksl-nlbksl-nlbksl-nl u = 15 # initialisationbksl-nltempspy-undvol = 0bksl-nlbksl-nlwhile u != 1:bksl-nl print(u, tempspy-undvol)bksl-nl if u % 2 == 0:bksl-nl u = u // 2bksl-nl else:bksl-nl u = 3 py-str u + 1bksl-nl tempspy-undvol += 1bksl-nlbksl-nlprint(u, tempspy-undvol)bksl-nlbksl-nl Que fait le programme suivant ? i = 0 while i < 10 : print ( 'Jusque l\u00e0, tout va bien.' ) Solution Ce programme affiche 'Jusque l\u00e0, tout va bien.' mais ne s'arr\u00eate jamais ! En effet, la valeur de la variable de boucle n'est jamais incr\u00e9ment\u00e9e et n'atteint donc jamais 10. Boucles infinies Dans le cadre des boucles conditionnelles, la question de l'arr\u00eat d'un programme se pose. Il faut donc toujours se demander si notre expression bool\u00e9enne sera v\u00e9rifi\u00e9e \u00e0 un moment du programme. Dans un \u00e9diteur de code (Thonny, VSCodium...), vous pouvez n\u00e9anmoins toujours stopper l'ex\u00e9cution d'un script Python \u00e0 l'aide de la combinaison de touches Ctrl \uff0b C .","title":"Boucles conditionnelles while"},{"location":"python3/#boucles-inconditionnelles-for","text":"","title":"Boucles inconditionnelles for"},{"location":"python3/#cas-general","text":"Cours En Python, la syntaxe des boucles inconditionnelles est la suivante : d\u00e9but code for variable_boucle in it\u00e9rable : bloc code A suite code Qu'est-ce qu'un it\u00e9rable ? Pour nous, il s'agit d'une cha\u00eene de caract\u00e8res ou d'un tableau , car ceux-ci sont compos\u00e9s d'\u00e9l\u00e9ments que l'on peut \u00e9peler : la lettre ou l'\u00e9l\u00e9ment. Exemple 1 (important!) Tester le code ci-dessous. Que fait le code ? Est-ce conforme \u00e0 notre d\u00e9finition d'un it\u00e9rable ? Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder print('Boucle sur une cha\u00c3\u00aene de caract\u00c3\u00a8res')bksl-nlbksl-nlfor lettre in 'PYTHON':bksl-nl print(lettre)bksl-nlbksl-nlprint('Fin de la boucle inconditionnelle')bksl-nl Pour vous aider \u00e0 mieux comprendre : PythonTutor Exemple 2 (important!) Tester le code ci-dessous. Que fait le code ? Est-ce conforme \u00e0 notre d\u00e9finition d'un it\u00e9rable ? Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder print(\"Boucle sur un tableau d'entiers\")bksl-nlbksl-nlfor element in [4, 3, 8, 12, 31]:bksl-nl print(element)bksl-nlbksl-nlprint('Fin de la boucle inconditionnelle')bksl-nl Pour vous aider \u00e0 mieux comprendre : PythonTutor Pour aller plus loin Dans le d\u00e9tail, un it\u00e9rable peut \u00eatre cr\u00e9\u00e9 en Python avec la fonction iter () . On it\u00e8re sur l'it\u00e9rable \u00e0 l'aide de la fonction next () . Lancer le code ci-dessous et dans la console de l'\u00e9diteur ci-contre, \u00e9crire next ( iterable ) . R\u00e9p\u00e9ter cette commande et observer le mot en train d'\u00eatre \u00e9pel\u00e9. La valeur r\u00e9f\u00e9renc\u00e9e par la variable lettre de la boucle for est donc d\u00e9finie gr\u00e2ce \u00e0 un appel \u00e0 next () d'un it\u00e9rateur. Remarquer l'erreur StopIteration qui appara\u00eet une fois l'it\u00e9rable compl\u00e8tement \u00e9pel\u00e9. Modifier mot = 'python' en mot = 12345 et r\u00e9it\u00e9rer l'it\u00e9ration. Cela fonctionne-t-il ? Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder # boucle sur un it\u00c3\u00a9rablebksl-nlfor lettre in 'python':bksl-nl print(lettre)bksl-nlbksl-nlmot = 'python'bksl-nliterable = iter('python')bksl-nl Application directe Exercice 14 Exercice 15 Exercice 16 Exercice 17 Exercice 18 Exercice 19 Exercice 20 Pr\u00e9dire ce que va afficher le programme ci-dessous. \u00c9crire ce programme dans l'\u00e9diteur et l'ex\u00e9cuter. Votre pr\u00e9diction est-elle correcte ? for lettre in '54321...' : print ( lettre ) print ( \"D\u00e9collage\" ) Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder Pr\u00e9dire ce que va afficher le programme ci-dessous. \u00c9crire ce programme dans l'\u00e9diteur et l'ex\u00e9cuter. Votre pr\u00e9diction est-elle correcte ? Modifier la ligne 3 afin d'afficher une phrase un peu plus correcte. 1 2 3 4 texte = \"\" for mot in [ \"Les \" , \"chaussettes \" , \"sont-elles \" , \"s\u00e8ches ?\" ]: texte = mot + texte print ( texte ) Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nlbksl-nlbksl-nlbksl-nl texte = \"\"bksl-nlfor mot in [\"Les \", \"chaussettes \", \"sont-elles \", \"s\u00c3\u00a8ches ?\"]:bksl-nl # Ajouter le mot \u00c3 la fin du texte !bksl-nl texte = texte + motbksl-nlprint(texte)bksl-nl Voici un tableau d'acteurs : tableau_acteurs = [ 'Tahar' , 'Omar' , 'Guillaume' , 'Swann' , 'Alex' , 'Roschdy' ] . Utiliser ce tableau pour obtenir l'affichage suivant : Tahar a eu le C\u00e9sar du meilleur acteur Omar a eu le C\u00e9sar du meilleur acteur Guillaume a eu le C\u00e9sar du meilleur acteur Swann a eu le C\u00e9sar du meilleur acteur Alex a eu le C\u00e9sar du meilleur acteur Roschdy a eu le C\u00e9sar du meilleur acteur Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder tableaupy-undacteurs = ['Tahar', 'Omar', 'Guillaume', 'Swann', 'Alex', 'Roschdy']bksl-nlbksl-nlbksl-nlbksl-nlbksl-nl for acteur in ['Tahar', 'Omar', 'Guillaume', 'Swann', 'Alex', 'Roschdy']:bksl-nl print(acteur, \"a eu le C\u00c3\u00a9sar du meilleur acteur\")bksl-nl Pr\u00e9dire ce que va afficher le programme ci-dessous. \u00c9crire ce programme dans l'\u00e9diteur et l'ex\u00e9cuter. Votre pr\u00e9diction est-elle correcte ? 1 2 3 4 n = 3 for lettre in \"abcd\" : n = n + 2 print ( n ) Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder tableaupy-undacteurs = ['Tahar', 'Omar', 'Guillaume', 'Swann', 'Alex', 'Roschdy']bksl-nlbksl-nlfor acteur in tableaupy-undacteurs:bksl-nl print(acteur, \"a eu le C\u00c3\u00a9sar du meilleur acteur\")bksl-nl Remarque On remarque qu'on vient de r\u00e9p\u00e9ter la m\u00eame op\u00e9ration 4 fois car l'it\u00e9rable est compos\u00e9 de 4 lettres. Ex\u00e9cuter ce programme ci-dessous. Qu'affiche-t-il ? Comprendre le fonctionnement de l'accumulateur en affichant, dans la boucle, les valeurs r\u00e9f\u00e9renc\u00e9es par les variables accumulateur et mot . Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder tableaupy-undmot = [\"la \", \"petite \", \"fille \", \"chante.\"]bksl-nlaccumulateur = \"Le soir, \"bksl-nlbksl-nlfor mot in tableaupy-undmot:bksl-nl accumulateur = accumulateur + motbksl-nlbksl-nlprint(accumulateur)bksl-nl tableaupy-undmot = [\"la \", \"petite \", \"fille \", \"chante.\"]bksl-nlaccumulateur = \"Le soir, \"bksl-nlbksl-nlfor mot in tableaupy-undmot:bksl-nl accumulateur = accumulateur + motbksl-nlbksl-nlprint(accumulateur)bksl-nl Aide L'accumulateur permet d'ajouter dans une m\u00eame variable plusieurs valeurs. Cela permet donc d'accumuler des cha\u00eenes de caract\u00e8res en des phrases ou plus souvent d'additionner des nombres ensemble, comme dans l'exercice suivant. On dispose d'un tableau d'entiers : tableau = [ 1 , 2 , 3 , 4 , 5 ] . \u00c9crire un programme qui, \u00e0 l'aide d'une boucle inconditionnelle, r\u00e9alise l'addition de 1, 2, 3, 4 et 5. Pensez \u00e0 l'accumulateur de l'exercice 10. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder tableau = [1, 2 ,3 ,4, 5]bksl-nlaccumulateur = 0bksl-nl tableau = [1, 2, 3, 4, 5]bksl-nlaccumulateur = 0bksl-nlbksl-nlfor nombre in tableau:bksl-nl accumulateur = accumulateur + nombrebksl-nl # accumulateur += nombre # fonctionne \u00c3\u00a9galementbksl-nlbksl-nlprint(accumulateur)bksl-nl Aide Il s'agit d'utiliser une variable accumulateur qui va \u00eatre initialis\u00e9e \u00e0 0. On va ensuite calculer accumulateur * nombre et r\u00e9f\u00e9rencer le r\u00e9sultat par la variable accumulateur . On dispose d'un tableau d'entiers : tableau = [ 10 , 20 , 30 , 40 ] . Nous souhaitons tirer et afficher quatre nombres al\u00e9atoires entre 0 et 10, 10 et 20, 20 et 30 et 30 et 40. Le d\u00e9but de programme ci-dessous vous montre comment tirer des nombres de mani\u00e8re al\u00e9atoire. Modifier ce programme \u00e0 l'aide d'une boucle inconditionnelle for . Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import randombksl-nlbksl-nltableau = [10, 20, 30, 40]bksl-nlvaleurpy-undmini = 0bksl-nlvaleurpy-undmaxi = 10bksl-nlrandom.randint(valeurpy-undmini, valeurpy-undmaxi)bksl-nlbksl-nlvaleurpy-undmini = 10bksl-nlvaleurpy-undmaxi = 20bksl-nlrandom.randint(valeurpy-undmini, valeurpy-undmaxi)bksl-nl import randombksl-nlbksl-nltableau = [10, 20, 30, 40]bksl-nlvaleurpy-undmini = 0bksl-nlbksl-nlfor nombre in tableau:bksl-nl valeurpy-undmaxi = nombrebksl-nl print(random.randint(valeurpy-undmini, valeurpy-undmaxi))bksl-nl valeurpy-undmini = valeurpy-undmaxibksl-nl Aide Remarquez que \u00e0 chaque \u00e9tape l'ancienne valeur maximum est devenue la valeur minimum : valeur_mini = valeur_maxi . Cela vous donne une r\u00e8gle \u00e0 suivre dans la boucle inconditionnelle.","title":"Cas g\u00e9n\u00e9ral"},{"location":"python3/#cas-de-range","text":"R\u00e9p\u00e9tition d'instruction Savoir parcourir un it\u00e9rable est tr\u00e8s pratique mais nous limite beaucoup. Souvent, nous souhaitons : conna\u00eetre le num\u00e9ro de la lettre courante (par exemple, dans le mot \"Venom\", V est la lettre d' indice 0, e la lettre d' indice 1 etc.) ; pouvoir r\u00e9p\u00e9ter un nombre d\u00e9termin\u00e9 de fois une action. Par exemple, dans le code ci-dessous, nous r\u00e9p\u00e9tons une phrase 5 fois : Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder for i in range(5):bksl-nl print(i, \"We're up all night to get lucky\")bksl-nl Cours Un it\u00e9rable occupe une place tr\u00e8s particuli\u00e8re : il s'agit de range ( n ) . Faire parcourir \u00e0 une variable k l'it\u00e9rable range ( n ) va lui faire prendre successivement les valeurs 0, 1, 2, ..., n-1 . Lancer le programme ci-dessous : Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder for k in range(4):bksl-nl print(\"k = \", k)bksl-nlbksl-nlbksl-nlbksl-nl Remarque k va de 0 \u00e0 n-1 . Il y a donc bien n valeurs qui sont parcourues. Lorsque l'on it\u00e8re sur range , la variable de boucle est souvent nomm\u00e9 i , j ou k . Manipulation de range Exercice 21 Exercice 22 Exercice 23 Exercice 24 Faire afficher la s\u00e9ries de nombres ci-dessous. On utilisera la syntaxe print ( k , end = ' ' ) pour afficher les nombres horizontalement. 0 1 2 3 4 5 Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nlbksl-nlbksl-nlbksl-nlbksl-nl for i in range(6):bksl-nl print(i, end = ' ')bksl-nl Faire afficher la s\u00e9ries de nombres ci-dessous. On utilisera la syntaxe print ( k , end = ' ' ) pour afficher les nombres horizontalement. 5 6 7 8 9 10 Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nlbksl-nlbksl-nlbksl-nlbksl-nl for i in range(6):bksl-nl print(i + 5, end = ' ')bksl-nl Faire afficher la s\u00e9ries de nombres ci-dessous. On utilisera la syntaxe print ( k , end = ' ' ) pour afficher les nombres horizontalement. 1 4 7 10 13 16 19 22 Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nlbksl-nlbksl-nlbksl-nlbksl-nl for i in range(8):bksl-nl print(3 py-str i + 1, end = ' ')bksl-nl Faire afficher la s\u00e9ries de nombres ci-dessous. On utilisera la syntaxe print ( k , end = ' ' ) pour afficher les nombres horizontalement. 10 9 8 7 6 5 4 3 2 1 0 Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nl for i in range(11):bksl-nl print(10 - i, end = ' ')bksl-nl","title":"Cas de range"},{"location":"python3/#iterable-ou-range","text":"Comment choisir entre for i in it\u00e9rable ou for i in range ( n ) ? Cours Le crit\u00e8re est simple : si on s'int\u00e9resse au contenu d'un it\u00e9rable (par exemple, aux lettres d'un mot), on va parcourir l'it\u00e9rable ; si on s'int\u00e9resse \u00e0 du comptage ou \u00e0 la position des valeurs dans l'it\u00e9rable, on va utiliser range . It\u00e9rable ou range : faites le bon choix ! Exercice 25 Exercice 26 Exercice 27 \u00c9crire un programme qui affiche les lettres du mot \"Artiste\". Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nl for lettre in 'Artiste':bksl-nl print(lettre)bksl-nl \u00c9crire un programme qui affiche la table de multiplication de 7. On obtiendra l'affichage suivant : 7 x 0 = 0 7 x 1 = 7 ... 7 x 10 = 70 Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nlbksl-nlbksl-nlbksl-nlbksl-nl for k in range(11):bksl-nl print(k, ' x ', 7, ' = ', 7 py-str k)bksl-nl \u00c9crire un programme qui affiche In the castle of AAAAArrrrrggggghhhhh . On pourra partir du mot 'Argh' o\u00f9 l'on r\u00e9p\u00e9tera 5 fois chaque lettre. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder phrase = 'In the castle of 'bksl-nlbksl-nlbksl-nlprint(phrase)bksl-nl phrase = 'In the castle of 'bksl-nlmot = ''bksl-nl# aucune raison d'utiliser range : bksl-nlfor lettre in 'Argh':bksl-nl mot = mot + lettre py-str 5bksl-nlbksl-nlphrase = phrase + motbksl-nlprint(phrase)bksl-nlbksl-nlbksl-nl","title":"It\u00e9rable ou range ?"},{"location":"python3/#boucles-imbriquees","text":"Cours Il est tr\u00e8s souvent utile d'imbriquer une boucle dans une autre, notamment lors du parcours de tous les pixels d'une image. Exemple Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder for a in range(5):bksl-nl for b in range(4):bksl-nl p = a py-str bbksl-nl print(a, 'py-str', b, '=', p, end = ', ')bksl-nl print()bksl-nl","title":"Boucles imbriqu\u00e9es"},{"location":"python3/#exercices-recapitulatifs","text":"Cours On utilise une boucle conditionnelle quand on ne conna\u00eet pas \u00e0 l'avance le nombre de r\u00e9p\u00e9titions. On utilise une boucle inconditionnelle quand on veut \u00e9peler des \u00e9l\u00e9ments un \u00e0 un ou que l'on conna\u00eet le nombre de r\u00e9p\u00e9titions \u00e0 effectuer, Exercice 28 Sur un jeu d'\u00e9checs, les cases sont rep\u00e9r\u00e9es par une lettre (de A jusqu'\u00e0 H) et par un chiffre (de 1 jusqu'\u00e0 8). Les cases sont donc A1, A2, A3, ..., H7, H8. Proposer un code qui affiche toutes les cases possibles. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder for lettre in \"ABCDEFGH\":bksl-nl bksl-nl bksl-nlbksl-nl print()bksl-nl for lettre in \"ABCDEFGH\":bksl-nl for chiffre in range(8):bksl-nl case = lettre + str(chiffre + 1)bksl-nl print(case, end = ' ')bksl-nl print()bksl-nl Exercice 29 En Python, la fonction ord renvoie le code Unicode d'un caract\u00e8re et la fonction chr le contraire: elle renvoie le caract\u00e8re correspondant \u00e0 un code Unicode. Par exemple: >>> ord ( 'a' ) 97 >>> chr ( 97 ) 'a' Voici une liste contenant les codes Unicode des lettres d'un mot secret... \u00c9crire un programme o\u00f9 en sortie, la variable mot_secret contiendra la cha\u00eene de caract\u00e8res de ce mot. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder mystere = [111, 107, 44, 32, 98, 105, 101, 110, 32, 106, 111, 117, 233]bksl-nlmotpy-undsecret = \"\"bksl-nl mystere = [111, 107, 44, 32, 98, 105, 101, 110, 32, 106, 111, 117, 233]bksl-nlmotpy-undsecret = \"\"bksl-nlbksl-nlfor nombre in mystere:bksl-nl lettre = chr(nombre)bksl-nl motpy-undsecret = motpy-undsecret + lettrebksl-nlbksl-nlprint(motpy-undsecret)bksl-nl Exercice 30 On imagine une puce qui se d\u00e9place al\u00e9atoirement sur une ligne, en avant ou en arri\u00e8re, par pas de 1 ou -1. Par exemple : si elle est \u00e0 l'emplacement 0, elle peut sauter \u00e0 l'emplacement 1 ou -1 ; si elle est \u00e0 l'emplacement 2, elle peut sauter \u00e0 l'emplacement 3 ou 1. Avec la boucle de votre choix, simuler le mouvement de cette puce de l'emplacement initial 0 \u00e0 l'emplacement final 5 (voir le sch\u00e9ma de la figure). Afficher le nombre de sauts n\u00e9cessaires pour r\u00e9aliser ce parcours. Relancer plusieurs fois le programme. Trouve-t-on le m\u00eame nombre de sauts \u00e0 chaque ex\u00e9cution ? G\u00e9n\u00e9rer des nombres al\u00e9atoires Afin de g\u00e9n\u00e9rer des nombres al\u00e9atoires, nous importons le module random . Le programme propos\u00e9 utilise \u00e9galement l'instruction random . choice ([ - 1 , 1 ]) qui renvoie au hasard la valeur -1 ou 1 avec une probabilit\u00e9 \\(\\dfrac{1}{2}\\) . Nous reverrons la signification de cette syntaxe particuli\u00e8re dans le chapitre sur la modularit\u00e9 . Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import randombksl-nlbksl-nld\u00c3\u00a9part = 0bksl-nlarriv\u00c3\u00a9e = 5bksl-nlnombrepy-undsauts = 0bksl-nlbksl-nlbksl-nlbksl-nlbksl-nlprint(nombrepy-undsauts)bksl-nl import randombksl-nlbksl-nld\u00c3\u00a9part = 0bksl-nlarriv\u00c3\u00a9e = 5bksl-nlbksl-nlpositionpy-undpuce = d\u00c3\u00a9partbksl-nlnombrepy-undsauts = 0bksl-nlwhile positionpy-undpuce != arriv\u00c3\u00a9e:bksl-nl positionpy-undpuce = positionpy-undpuce + random.choice([-1, 1])bksl-nl nombrepy-undsauts += 1 # ou nombrepy-undsauts = nombrepy-undsauts + 1bksl-nlbksl-nlprint(nombrepy-undsauts)bksl-nl R\u00e9sum\u00e9 Dans ce chapitre, j'ai appris : l'int\u00e9r\u00eat des boucles dans la cadre du principe DRY ; l'existence de boucles conditionnelles et inconditionnelles ; comment utiliser les boucles conditionnelles ; comment parcourir les valeurs d'un it\u00e9rable avec une boucle inconditionnelle ; comment parcourir les indices d'un it\u00e9rable avec une boucle inconditionnelle.","title":"Exercices r\u00e9capitulatifs"},{"location":"python4/","text":"Fonctions \u2693\ufe0e Ce chapitre est la pierre angulaire de tout langage informatique ! Pour tous les exercices, vous pouvez valider vos r\u00e9ponses avec le petit gendarme : votre fonction sera alors test\u00e9e sur des cas de base. Ces cas vous aident \u00e0 comprendre pourquoi votre fonction n'a pas encore le fonctionnement attendu. Principe \u2693\ufe0e Pourquoi les fonctions ? Les lignes suivantes permettent de convertir une temp\u00e9rature de degr\u00e9 Fahrenheit vers degr\u00e9 Celsius . temp_fahrenheit = 60 temp_celsius = temp_fahrenheit - 32 * ( 5 / 8 ) Dans le terminal ci-dessous, tester ce programme pour convertir 60 degr\u00e9s Fahrenheit en degr\u00e9s Celsius. Afficher la valeur r\u00e9f\u00e9renc\u00e9e par la variable temp_celsius . Pro tip : dans la console, utiliser la touche Tab pour compl\u00e9ter un mot dont vous aurez \u00e9crit le d\u00e9but. temp_f + Tab doit \u00e9crire temp_fahrenheit . On souhaite maintenant convertir 90 et 120 degr\u00e9s Fahrenheit en degr\u00e9s Celsius. Ajouter les lignes correspondantes. >>> Solution temp_fahrenheit = 60 temp_celsius = temp_fahrenheit - 32 * ( 5 / 8 ) print ( temps_celsius ) temp_fahrenheit = 90 temp_celsius = temp_fahrenheit - 32 * ( 5 / 8 ) print ( temps_celsius ) temp_fahrenheit = 120 temp_celsius = temp_fahrenheit - 32 * ( 5 / 8 ) print ( temps_celsius ) On remarque qu'il y a beaucoup de r\u00e9p\u00e9titions dans le code, m\u00eame si nous avons utilis\u00e9 des variables. Notez que l'on pourrait \u00e9ventuellement utiliser une boucle : for temp_fahrenheit in [ 60 , 90 , 120 ]: temp_celsius = temp_fahrenheit - 32 * ( 5 / 8 ) print ( temps_celsius ) Il est toutefois difficile de comprendre ce que fait ce programme. Le principe DRY va encore \u00eatre ici \u00e0 l'oeuvre : la structure fonction va permettre de simplifier un programme en \u00e9vitant les r\u00e9p\u00e9titions inutiles et complexes \u00e0 d\u00e9bogger. Cette structure va rendre \u00e9galement le code plus abstrait . Cours Une fonction permet de cr\u00e9er des blocs d'instructions que nous pouvons r\u00e9utilisons quand nous le souhaitons. C'est une boite noire ind\u00e9pendante du reste d'un programme : nous pouvons la tester et contr\u00f4ler son fonctionnement de mani\u00e8re ind\u00e9pendante ; elle d\u00e9coupe le probl\u00e8me en sous-probl\u00e8me plus simple \u00e0 r\u00e9soudre ; nous pouvons la r\u00e9utiliser dans d'autres programmes. Exemple Pour construire une voiture, on ne fait pas tout en m\u00eame temps : on a par exemple besoin de convertir de l'\u00e9nergie thermique (ou \u00e9lectrique) en \u00e9nergie m\u00e9canique. Pour cela, on \"cr\u00e9e\" une fonction nomm\u00e9e convertir_\u00e9nergie_thermique_en_\u00e9nergie_m\u00e9canique qu'on appelle aussi le moteur ; la conversion de l'\u00e9nergie thermique en \u00e9nergie m\u00e9canique va fonctionner car le moteur a \u00e9t\u00e9 test\u00e9 de mani\u00e8re ind\u00e9pendante lors du d\u00e9veloppement du mod\u00e8le de voiture ; on le r\u00e9utilise ensuite pour la production \u00e0 la cha\u00eene. Nous nommerons nos fonctions avec des noms d'action : calculer_moyenne , trier_tableau ou afficher_r\u00e9sultats . D\u00e9finir une fonction \u2693\ufe0e Cours Pour d\u00e9finir une fonction en Python, on utilise la syntaxe suivante : def nom_de_la_fonction ( parametre1 , parametre2 , ... ): ... instructions ... ... instructions ... ... instructions ... return r\u00e9sultat1 , r\u00e9sultat2 , ... Une fois def inie, la fonction appel\u00e9e nom_de_la_fonction peut \u00eatre utilis\u00e9e n'importe o\u00f9 dans le programme. En Python, l'indentation des instructions appartenant \u00e0 la fonction est obligatoire . Important return est l'instruction permettant de renvoyer des r\u00e9sultats en dehors de la fonction. Toute variable non renvoy\u00e9e par return sera perdue dans la bo\u00eete noire ! Important Dans ma grande bont\u00e9, je vous propose quelquefois des fonctions o\u00f9 seul le titre es pr\u00e9sent (on appelle cela un prototype). Pour \u00e9viter une erreur, le mot-cl\u00e9 pass appara\u00eet dans la fonction : il indique \u00e0 Python de ne rien faire. Quand vous commencez \u00e0 \u00e9crire la fonction, supprimez pass . Nous allons tout de suite \u00e9tudier divers cas particuliers importants. Exemple de fonctions \u2693\ufe0e Fonction sans param\u00e8tres \u2693\ufe0e Les fonctions sans param\u00e8tres sont des raccourcis pour \u00e9viter de retaper plusieurs fois les m\u00eames instructions. Leur utilit\u00e9 est tr\u00e8s limit\u00e9e : si vous les utilisez, ce sera pour des utilisations tr\u00e8s sp\u00e9cifiques. Exercice Exercice 1 Exercice 2 Exercice 3 Exercice 4 On donne la fonction ci-dessous. Ex\u00e9cuter le programme. Dans la console, \u00e9crire compter () (on dit que vous appelez la fonction compter () ). Observer le r\u00e9sultat et expliquer celui-ci. Dans la console, faire deux autres appels \u00e0 la fonction compter () . Que remarquez-vous ? Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def compter():bksl-nl for i in range(5):bksl-nl print(i + 1, end = \";\")bksl-nl print() # retour \u00c3 la lignebksl-nl return Nonebksl-nl Explications Quand vous avez appel\u00e9 la fonction dans la console, Python a regard\u00e9 quelque part dans la m\u00e9moire s'il existait une fonction appel\u00e9e compter () . Il l'a trouv\u00e9 car nous avons ex\u00e9cut\u00e9 le programme : ensuite la fonction se d\u00e9roule. Cette fonction affiche des informations et ne renvoie aucune valeur : on lui demande de renvoyer la valeur None . On donne la fonction ci-dessous. Sans l'ex\u00e9cuter, dire ce que permet de faire la fonction \u00e9crite dans l'\u00e9diteur. Ex\u00e9cuter le programme. Dans la console, afficher la valeur de vitesse_lumi\u00e8re . Modifier le programme en rempla\u00e7ant la ligne 5 par vitesse_lumi\u00e8re = c . Ex\u00e9cuter le programme et comprendre l'erreur affich\u00e9e. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def donnerpy-undc\u00c3\u00a9l\u00c3\u00a9rit\u00c3\u00a9():bksl-nl c = 299py-und792py-und458 # en m/sbksl-nl return cbksl-nlbksl-nlvitessepy-undlumi\u00c3\u00a8re = donnerpy-undc\u00c3\u00a9l\u00c3\u00a9rit\u00c3\u00a9()bksl-nlbksl-nl Remarque importante Une variable peut r\u00e9f\u00e9rencer la valeur renvoy\u00e9e par une fonction. C'est ce que fait : vitesse_lumi\u00e8re = calculer_c\u00e9l\u00e9rit\u00e9 () . Remarquez toutefois que lorsque vous avez \u00e9crit vitesse_lumi\u00e8re = c , vous avez obtenu une erreur : NameError : name 'c' is not defined . Cela signifie que la variable c n'existe pas en dehors de la fonction. La course des Animaux est un jeu qui permet de d\u00e9placer trois types d'animaux sur un plateau : le Z\u00e8bre a 1 chance sur 2 de se d\u00e9placer de 6 cases ou de reculer d'une case ; le Lion a 1 chance sur 2 de se d\u00e9placer de 5 cases ou de ne pas se d\u00e9placer du tout ; l'\u00c9l\u00e9phant a 1 chance sur 4 de se d\u00e9placer de 4 cases, et sinon, il se d\u00e9place de 2 cases. En vous inspirant de la fonction ci-dessous, \u00e9crire une fonction calculer_d\u00e9placement_lion et calculer_d\u00e9placement_\u00e9l\u00e9phant permettant de calculer le d\u00e9placement du Lion et de l'\u00c9l\u00e9phant. Lancer b1 = [\"calculerpy-undd\u00c3\u00a9placementpy-undlion() == 5\", \"calculerpy-undd\u00c3\u00a9placementpy-undlion() == 0\"]bksl-nlb2 = [\"calculerpy-undd\u00c3\u00a9placementpy-und\u00c3\u00a9l\u00c3\u00a9phant() == 4\", \"calculerpy-undd\u00c3\u00a9placementpy-und\u00c3\u00a9l\u00c3\u00a9phant() == 2\"]bksl-nlbenchmark = (b1, b2,)bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import randombksl-nlbksl-nldef calculerpy-undd\u00c3\u00a9placementpy-undz\u00c3\u00a8bre():bksl-nl if random.random() > 1 / 2:bksl-nl d\u00c3\u00a9placement = 6bksl-nl else:bksl-nl d\u00c3\u00a9placement = -1bksl-nl return d\u00c3\u00a9placementbksl-nl import randombksl-nlbksl-nldef calculerpy-undd\u00c3\u00a9placementpy-undz\u00c3\u00a8bre():bksl-nl if random.random() > 1 / 2:bksl-nl d\u00c3\u00a9placement = 6bksl-nl else:bksl-nl d\u00c3\u00a9placement = -1bksl-nl return d\u00c3\u00a9placementbksl-nlbksl-nldef calculerpy-undd\u00c3\u00a9placementpy-undlion():bksl-nl # notation if/else adapt\u00c3\u00a9e pour une unique instructionbksl-nl if random.random() > 1 / 2: d\u00c3\u00a9placement = 5bksl-nl else: d\u00c3\u00a9placement = 0bksl-nl return d\u00c3\u00a9placementbksl-nlbksl-nldef calculerpy-undd\u00c3\u00a9placementpy-und\u00c3\u00a9l\u00c3\u00a9phant():bksl-nl # notation if/else adapt\u00c3\u00a9e pour une unique instructionbksl-nl if random.random() > 1 / 4: d\u00c3\u00a9placement = 2bksl-nl else: d\u00c3\u00a9placement = 4bksl-nl return d\u00c3\u00a9placementbksl-nl Compl\u00e9ter la fonction placer_al\u00e9atoirement . Elle renvoie : un entier al\u00e9atoire x compris entre 0 et 700 ; un entier al\u00e9atoire y compris entre 0 et 400. Compl\u00e9ter la fonction choisir_couleur . Elle renvoie : 'red' si n vaut 0 ; 'green' si n vaut 1 ; 'blue' si n vaut 2 ; 'purple' si n vaut 3. Ex\u00e9cuter le script. Dans la console, appeler la fonction cr\u00e9er_tache et observer le r\u00e9sultat. Comprendre l'affichage. Dans la console, faire une boucle inconditionnelle appelant 10 fois la fonction cr\u00e9er_tache . Lancer b1 = (\"placerpy-undal\u00c3\u00a9atoirement()[0] is not None\", \"placerpy-undal\u00c3\u00a9atoirement()[1] is not None\", \"0 <= placerpy-undal\u00c3\u00a9atoirement()[0] <= 700 and 0 <= placerpy-undal\u00c3\u00a9atoirement()[1] <= 400 \")bksl-nlb2 = (\"choisirpy-undcouleur() == 'red' or choisirpy-undcouleur() == 'green' or choisirpy-undcouleur() == 'blue' or choisirpy-undcouleur() == 'purple'\",)bksl-nlbenchmark = [b1, b2]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import randombksl-nlimport turtlebksl-nlbksl-nlx = random.randint(0, 700)bksl-nlbksl-nldef placerpy-undal\u00c3\u00a9atoirement():bksl-nl passbksl-nlbksl-nldef choisirpy-undcouleur():bksl-nl n = random.randint(0,3)bksl-nl passbksl-nlbksl-nldef cr\u00c3\u00a9erpy-undtache():bksl-nl taille = random.randint(1, 50)bksl-nl x, y = placerpy-undal\u00c3\u00a9atoirement()bksl-nl couleur = choisirpy-undcouleur()bksl-nl if couleur is not None:bksl-nl turtle.hideturtle()bksl-nl turtle.penup()bksl-nl turtle.goto(x, y)bksl-nl turtle.pendown()bksl-nl turtle.dot(taille, couleur)bksl-nl return Nonebksl-nlbksl-nlbksl-nl import randombksl-nlimport turtlebksl-nlbksl-nldef placerpy-undal\u00c3\u00a9atoirement():bksl-nl x = random.randint(0, 700)bksl-nl y = random.randint(0, 400)bksl-nl return x, ybksl-nlbksl-nldef choisirpy-undcouleur():bksl-nl n = random.randint(0,3)bksl-nl if n == 0 : couleur = 'red'bksl-nl if n == 1 : couleur = 'green'bksl-nl if n == 2 : couleur = 'blue'bksl-nl if n == 3 : couleur = 'purple'bksl-nl return couleurbksl-nlbksl-nldef cr\u00c3\u00a9erpy-undtache():bksl-nl taille = random.randint(1, 50)bksl-nl x, y = placerpy-undal\u00c3\u00a9atoirement()bksl-nl turtle.hideturtle()bksl-nl turtle.penup()bksl-nl turtle.goto(x, y)bksl-nl turtle.pendown()bksl-nl turtle.dot(taille, choisirpy-undcouleur())bksl-nl return Nonebksl-nlbksl-nlfor py-und in range(10):bksl-nl cr\u00c3\u00a9erpy-undtache()bksl-nl Aide Se rappeler la syntaxe des boucles inconditionnelles for _ in range ( 10 ) . Fonction avec param\u00e8tres \u2693\ufe0e Cours Exemple Ex\u00e9cuter le code. Dans la console, taper compter ( 5 ) puis compter ( 10 ) . Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def compter(n):bksl-nl for i in range(n):bksl-nl print(i + 1, end = \";\")bksl-nlbksl-nl print() # retour \u00c3 la lignebksl-nl return Nonebksl-nl La valeur n est appel\u00e9e param\u00e8tre de la fonction compter . On dit qu'on passe le param\u00e8tre n \u00e0 la fonction compter . Lorsque vous avez tap\u00e9 compter ( 5 ) da,ns la console, vous avez appeler la fonction compter avec l' argument 3. Pour aller plus loin Les annotations permettent de pr\u00e9ciser \u00e0 un utilisateur ext\u00e9rieur quel est le type des param\u00e8tres. Attention, cela n'impose pas le type du param\u00e8tres, c'est simplement une indication ! Pour indiquer que n est entier, on peut par exemple \u00e9crire : def compter ( n : int ): ... Pour plusieurs param\u00e8tres a flottant et n entier, on pourrait \u00e9crire : def multiplier ( a : float , n : int ): ... Nous le reverrons au chapitre 8 ! Exercices Exercice 5 Exercice 6 Exercice 7 Exercice 8 Exercice 9 Exercice 10 Exercice 11 \u00c9crire une fonction f qui prend en param\u00e8tre un nombre flottant x et qui renvoie le nombre flottant 2 * x + 1 . Ex\u00e9cuter votre fonction puis dans la console, \u00e9crire quelques tests. Par exemple : f ( 1 ) . Tester la fonction avec l'ic\u00f4ne gendarme. Lancer b1 = (\"f(0) = 1\", \"f(1) == 3\", \"f(10) == 2py-str10+1\",)bksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nlbksl-nlbksl-nlbksl-nl def f(x):bksl-nl return 2 py-str x + 1bksl-nl Compl\u00e9ter la fonction calculer_aire_rectangle qui prend en param\u00e8tre deux nombres flottants longueur et largeur et qui renvoie l'aire du rectangle. Ajouter une fonction calculer_volume_boite qui prend en param\u00e8tre trois nombres flottants longueur , largeur et hauteur et qui renvoie le volume d'une boite. Ex\u00e9cuter vos fonctions puis dans la console, \u00e9crire quelques tests. Par exemple : calculer_aire_rectangle ( 1 , 10 ) . Valider votre r\u00e9sultat avec l'ic\u00f4ne gendarme ! Lancer b1 = (\"calculerpy-undairepy-undrectangle(10, 1) == 10\", \"calculerpy-undairepy-undrectangle(10, 0) == 0\", \"calculerpy-undairepy-undrectangle(5, 12) == 60\",)bksl-nlb2 = (\"calculerpy-undvolumepy-undboite(1, 0, 1) == 0\", \"calculerpy-undvolumepy-undboite(1, 1, 1) == 1\", \"calculerpy-undvolumepy-undboite(10, 10, 10) == 1000\", \"calculerpy-undvolumepy-undboite(5, 4, 2) == 40\",)bksl-nlbenchmark = [b1, b2]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def calculerpy-undairepy-undrectangle(longueur, largeur):bksl-nl passbksl-nlbksl-nlbksl-nlbksl-nl def calculerpy-undairepy-undrectangle(longueur, largeur):bksl-nl aire = longueur py-str largeurbksl-nl return airebksl-nlbksl-nldef calculerpy-undvolumepy-undboite(longueur, largeur, hauteur):bksl-nl volume = longueur py-str largeur py-str hauteurbksl-nl return volumebksl-nlbksl-nlbksl-nl \u00c9crire une fonction est_divisible_par qui prend en param\u00e8tre deux nombres entiers positifs entier et diviseur et qui renvoie True si entier est divisible par diviseur . Ex\u00e9cuter votre fonction puis dans la console, \u00e9crire quelques tests. Par exemple : est_divisible_par ( 10 , 2 ) . Tester la fonction avec l'ic\u00f4ne gendarme. Lancer b1 = (\"estpy-unddivisiblepy-undpar(10, 2) == True\", \"estpy-unddivisiblepy-undpar(10, 3) == False\", \"estpy-unddivisiblepy-undpar(21, 7) == True\",)bksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def estpy-unddivisiblepy-undpar(entier, diviseur):bksl-nl passbksl-nlbksl-nlbksl-nlbksl-nl def estpy-unddivisiblepy-undpar(entier, diviseur):bksl-nl if entier % diviseur == 0:bksl-nl return Truebksl-nl else:bksl-nl return Falsebksl-nlbksl-nlbksl-nl \u00c9crire une fonction valider_email qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res email . Cette fonction renvoie True si la cha\u00eene de caract\u00e8res contient un arobase @ . Une fois le parcours de l'adresse email avec une boucle inconditionnelle termin\u00e9e, on renverra False si l'arobase n'a pas \u00e9t\u00e9 trouv\u00e9. V\u00e9rifier la fonction en appelant par exemple valider_email ( \"titou_du_01@live.fr\" ) . Valider avec l'ic\u00f4ne gendarme. Lancer b1 = (\"validerpy-undemail('josette@gmail.com')) == True\", \"validerpy-undemail('@@@@@@protonmail.com')) == True\", \"validerpy-undemail('libert\u00c3\u00a9py-und\u00c3\u00a9galit\u00c3\u00a9py-undfraternit\u00c3\u00a9')) == False\",)bksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def validerpy-undemail(email):bksl-nl passbksl-nlbksl-nlbksl-nlbksl-nl def validerpy-undemail(email):bksl-nl # on suppose que le caract\u00c3\u00a8re @ est absent.bksl-nl trouv\u00c3\u00a9 = Falsebksl-nl for lettre in email:bksl-nl if lettre == \"@\":bksl-nl trouv\u00c3\u00a9 = Truebksl-nl return trouv\u00c3\u00a9bksl-nlbksl-nlbksl-nlbksl-nl \u00c9crire une fonction sommer qui prend en param\u00e8tre un tableau non vide d'entiers tableau . Cette fonction renvoie la somme des entiers pr\u00e9sents dans ce tableau. Ajouter une fonction moyenner qui prend en param\u00e8tre un tableau non vide d'entiers tableau ainsi que son nombre d'\u00e9l\u00e9ments taille . Cette fonction renvoie la moyenne des entiers pr\u00e9sents dans ce tableau. Dans cette fonction, on utilisera la fonction sommer d\u00e9finie pr\u00e9c\u00e9demment. Lancer b1 = (\"sommer([10]) == 10\", \"sommer([10, 2, 6]) == 18\", \"sommer([8,-8]) == 0\",)bksl-nlb2 = (\"moyenner([10]) == 10\", \"moyenner([10, 2, 6]) == 6.0\", \"moyenner([8,-8]) == 0\",)bksl-nlbenchmark = [b1, b2, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def sommer(tableau):bksl-nl passbksl-nlbksl-nlbksl-nlbksl-nl def sommer(tableau):bksl-nl accumulateur = 0bksl-nl for entier in tableau:bksl-nl accumulateur = accumulateur + entierbksl-nl return accumulateurbksl-nlbksl-nldef moyenner(tableau, taille):bksl-nl somme = sommer(tableau)bksl-nl return somme / taillebksl-nlbksl-nl \u00c9crire une fonction trouver_maximum_2 qui prend en param\u00e8tre deux entiers a et b . Cette fonction renvoie la valeur du plus grand des deux entiers. Ex\u00e9cuter le programme puis tester votre fonction dans la console avant de le valider avec le gendarme. Lancer b1 = (\"trouverpy-undmaximumpy-und2(1, 8) == 8\", \"trouverpy-undmaximumpy-und2(30, 20) == 30\", \"trouverpy-undmaximumpy-und2(8, 8) == 8\",)bksl-nlbenchmark = (b1, )bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def trouverpy-undmaximumpy-und2(a, b):bksl-nl passbksl-nl def trouverpy-undmaximumpy-und2(a, b):bksl-nl if a > b: bksl-nl maximum = abksl-nl else:bksl-nl maximum = bbksl-nl return maximumbksl-nlbksl-nl \u00c9crire une fonction trouver_maximum_3 qui prend en param\u00e8tre deux entiers a , b et c . Cette fonction renvoie la valeur du plus grand des trois entiers. On pourra utiliser la fonction pr\u00e9c\u00e9dente trouver_maximum_2 . Ex\u00e9cuter le programme puis tester votre fonction dans la console avant de le valider avec le gendarme. Lancer b1 = (\"trouverpy-undmaximumpy-und3(1, 2, 3) == 3\", \"trouverpy-undmaximumpy-und3(30, 20, 10) == 30\", \"trouverpy-undmaximumpy-und3(8, 8, 8) == 8\",)bksl-nlbenchmark = (b1, )bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def trouverpy-undmaximumpy-und2(a, b):bksl-nl if a > b: bksl-nl maximum = abksl-nl else:bksl-nl maximum = bbksl-nl return maximumbksl-nlbksl-nldef trouverpy-undmaximumpy-und3(a, b, c):bksl-nl passbksl-nl bksl-nl def trouverpy-undmaximumpy-und2(a, b):bksl-nl if a > b: bksl-nl maximum = abksl-nl else:bksl-nl maximum = bbksl-nl return maximumbksl-nlbksl-nldef trouverpy-undmaximumpy-und3(a, b, c):bksl-nl # on veut trouver le maximum M de a et bbksl-nl # puis trouver le maximum entre M et cbksl-nl maximumpy-undactuel = trouverpy-undmaximumpy-und2(a, b)bksl-nl maximum = trouverpy-undmaximumpy-und2(maximumpy-undactuel, c)bksl-nl return maximumbksl-nl Aide Pour trouver le maximum entre trois nombres, on veut trouver le maximum M entre deux nombres a et b puis trouver le maximum entre M et le dernier nombre c. Et si on n'a rien \u00e0 renvoyer ? \u2693\ufe0e Cours On a toujours quelque chose \u00e0 renvoyer : en l'absence de valeurs \u00e0 renvoyer, on \u00e9crira, return None . Pour aller plus loin En pratique, return None n'est pas obligatoire. Si une fonction ne contient pas le mot-cl\u00e9 return , Python rajoutera gentiment (et automatiquement) return None \u00e0 la fin de votre fonction lors de l'interpr\u00e9tation du programme. explicit is better than implicit : \u00e9crivez toujours return None . Exercices Exercice 12 Exercice 13 Exercice 14 \u00c9crire une fonction f qui prend en param\u00e8tre un nombre flottant x et qui affiche le nombre flottant x ** 2 + 1 . R\u00e9aliser les op\u00e9rations suivants : y = f ( 2 ) puis print ( y ) ? Expliquer le r\u00e9sultat. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nlbksl-nlbksl-nlbksl-nlbksl-nlbksl-nl def f(x):bksl-nl # on affiche le r\u00c3\u00a9sultatbksl-nl print(xpy-strpy-str2 + 1)bksl-nl # on renvoie Nonebksl-nl return Nonebksl-nlbksl-nly = f(2)bksl-nlbksl-nlprint(y)bksl-nl Explications print ( f ( 2 )) affiche : >>> y = f ( 2 ) 5 >>> print ( y ) None L'appel y = f ( 2 ) se d\u00e9compose en : en \u00e9valuation du r\u00e9sultat de ma fonction f ( 2 ) : c'est un affichage de 2 ** 2 + 1 , suivi du renvoi de None comme r\u00e9sultat ; y r\u00e9f\u00e9rence la valeur renvoy\u00e9e qui est None . print ( y ) affiche donc bien None ! Dessin \u00e0 obtenir Compl\u00e9ter la fonction triangle qui prend en param\u00e8tre : une tortue graphique tortue ; la longueur c\u00f4t\u00e9 du triangle ; l'abscisse initiale x de la tortue ; l'ordonn\u00e9e initiale y de la tortue. Cette fonction dessine un triangle \u00e9quilat\u00e9ral de couleur verte dont le sommet en bas \u00e0 gauche a pour coordonn\u00e9es \\((x, y)\\) . Ex\u00e9cuter votre programme et tester votre fonction dans la console. Important N'oubliez pas le return None !!! Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlbksl-nlfred = turtle.Turtle()bksl-nlbksl-nldef triangle(tortue, c\u00c3\u00b4t\u00c3\u00a9, x, y):bksl-nl passbksl-nlbksl-nltriangle(fred, 60, 0, 0)bksl-nlfred.mainloop()bksl-nl import turtlebksl-nlbksl-nlfred = turtle.Turtle()bksl-nlbksl-nldef triangle(tortue, c\u00c3\u00b4t\u00c3\u00a9, x, y):bksl-nl tortue.penup()bksl-nl tortue.goto(x, y)bksl-nl tortue.pendown()bksl-nl tortue.fillcolor('green')bksl-nl tortue.beginpy-undfill()bksl-nl for py-und in range(3):bksl-nl tortue.fd(c\u00c3\u00b4t\u00c3\u00a9)bksl-nl tortue.lt(120)bksl-nl tortue.endpy-undfill()bksl-nl return Nonebksl-nlbksl-nltriangle(fred, 60, 0, 0)bksl-nlfred.mainloop()bksl-nl Dessin \u00e0 obtenir \u00c9crire une fonction calculer_hauteur qui prend pour param\u00e8tre un c\u00f4t\u00e9 c\u00f4t\u00e9 et renvoie la hauteur d'un triangle \u00e9quilat\u00e9ral de c\u00f4t\u00e9 c. \u00c0 l'aide des fonctions calculer_hauteur et triangle , cr\u00e9er la fonction nucl\u00e9aire ayant pour param\u00e8tre une tortue graphique tortue et le c\u00f4t\u00e9 c\u00f4t\u00e9 . Le centre du symbole nucl\u00e9aire est \\((0,0)\\) . Aide 1 Dessin La hauteur d'un triangle \u00e9quilat\u00e9ral peut se calculer facilement en d\u00e9coupant le triangle \u00e9quilat\u00e9ral en deux triangles rectangles. On applique alors le th\u00e9or\u00e8me de Pythagore. Faites un dessin !! Aide 2 Les Maths ne sont pas votre truc. Voici la formule : \\(h = \\dfrac{\\sqrt{3}}{2} c\\) . Important Avez-vous pens\u00e9 au return None !!! J'y tiens. Vraiment. Pour de vrai . Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlfrom math import sqrtbksl-nlbksl-nlfred = turtle.Turtle()bksl-nlbksl-nldef calculerpy-undhauteur(c\u00c3\u00b4t\u00c3\u00a9):bksl-nl passbksl-nlbksl-nldef triangle(tortue, c\u00c3\u00b4t\u00c3\u00a9, x, y):bksl-nl tortue.penup()bksl-nl tortue.goto(x, y)bksl-nl tortue.pendown()bksl-nl tortue.fillcolor('green')bksl-nl tortue.beginpy-undfill()bksl-nl for py-und in range(3):bksl-nl tortue.fd(c\u00c3\u00b4t\u00c3\u00a9)bksl-nl tortue.lt(120)bksl-nl tortue.endpy-undfill()bksl-nl return Nonebksl-nlbksl-nldef nucl\u00c3\u00a9aire(tortue, c\u00c3\u00b4t\u00c3\u00a9):bksl-nl passbksl-nlbksl-nlnucl\u00c3\u00a9aire(fred, 60)bksl-nlfred.mainloop()bksl-nl import turtlebksl-nlfrom math import sqrtbksl-nlbksl-nlfred = turtle.Turtle()bksl-nlbksl-nldef calculerpy-undhauteur(c\u00c3\u00b4t\u00c3\u00a9):bksl-nl return sqrt(3) / 2 py-str c\u00c3\u00b4t\u00c3\u00a9bksl-nlbksl-nldef triangle(tortue, c\u00c3\u00b4t\u00c3\u00a9, x, y):bksl-nl tortue.penup()bksl-nl tortue.goto(x, y)bksl-nl tortue.pendown()bksl-nl tortue.fillcolor('green')bksl-nl tortue.beginpy-undfill()bksl-nl for py-und in range(3):bksl-nl tortue.fd(c\u00c3\u00b4t\u00c3\u00a9)bksl-nl tortue.lt(120)bksl-nl tortue.endpy-undfill()bksl-nl return Nonebksl-nlbksl-nldef nucl\u00c3\u00a9aire(tortue, c\u00c3\u00b4t\u00c3\u00a9):bksl-nl hauteur = calculerpy-undhauteur(c\u00c3\u00b4t\u00c3\u00a9)bksl-nl triangle(tortue, c\u00c3\u00b4t\u00c3\u00a9, 0, 0)bksl-nl triangle(tortue, c\u00c3\u00b4t\u00c3\u00a9, -c\u00c3\u00b4t\u00c3\u00a9, 0)bksl-nl triangle(tortue, c\u00c3\u00b4t\u00c3\u00a9, -c\u00c3\u00b4t\u00c3\u00a9 / 2, -hauteur)bksl-nl return Nonebksl-nlbksl-nlnucl\u00c3\u00a9aire(fred, 60)bksl-nlfred.mainloop()bksl-nl Utilisation de return \u2693\ufe0e Cours Dans une seule fonction, il est possible de renvoyer plusieurs valeurs avec return . Il suffit d'utiliser la syntaxe : return valeur1 , valeur2 , valeur3 ... . Exemple Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import randombksl-nlbksl-nldef g\u00c3\u00a9n\u00c3\u00a9rerpy-undcouleurpy-undRGB():bksl-nl \"\"\" G\u00c3\u00a9n\u00c3\u00a8re les composantes Rouge, bksl-nl Vert, Bleu entre 0 et 1. \"\"\"bksl-nl rouge = random.random()bksl-nl vert = random.random()bksl-nl bleu = random.random()bksl-nl return rouge, vert, bleubksl-nlbksl-nlr, g, b = g\u00c3\u00a9n\u00c3\u00a9rerpy-undcouleurpy-undRGB()bksl-nlprint(r, g, b)bksl-nl Il est \u00e9galement possible de mettre plusieurs return dans une seule fonction. Dans ce cas, return est comme un si\u00e8ge \u00e9jectable : d\u00e8s que le programme voit une instruction commen\u00e7ant par return , la fonction s'arr\u00eate ! Exemple Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder phrase = \"Turning and turning in the widening gyre\"bksl-nlbksl-nldef trouverpy-undlettre(lettre, texte):bksl-nl \"\"\" Renvoie True si une lettre appara\u00c3\u00aetbksl-nl dans un texte \"\"\"bksl-nl for caract\u00c3\u00a8re in texte:bksl-nl print(caract\u00c3\u00a8re, lettre, caract\u00c3\u00a8re == lettre)bksl-nl if caract\u00c3\u00a8re == lettre:bksl-nl return True # la boucle s'arr\u00c3\u00aate !bksl-nl return Falsebksl-nlbksl-nlr\u00c3\u00a9ponse = trouverpy-undlettre(\"a\", phrase)bksl-nlprint(\"Trouv\u00c3\u00a9 ? \", r\u00c3\u00a9ponse)bksl-nl texte est tr\u00e8s diff\u00e9rent de phrase . En effet, texte et lettre sont les param\u00e8tres de la fonction, comme le \\(x\\) de \\(f(x)\\) en Maths. \"a\" et phrase (ligne 12) sont les arguments de la fonction, comme \\(2\\) de \\(f(2)\\) en Maths. Ce sont eux qui vont \u00eatre analys\u00e9s par la fonction. Finalement, caract\u00e8re est une simple variable de boucle qui n'existe que dans la fonction. Danger mortel N'oubliez pas le return ! Si vous n'utilisez que des print , vous ne fa\u00eetes que de l'affichage : les r\u00e9sultats de ces fonctions ne pourront en aucun cas \u00eatre r\u00e9utilis\u00e9s dans un autre calcul ! Exercices sur return Exercice 15 Exercice 16 Exercice 17 Exercice 18 On propose ci-dessous la fonction trouver_pair qui prend pour param\u00e8tre un tableau d'entiers et qui renvoie le bool\u00e9en True si un entier pair est pr\u00e9sent dans le tableau ; le bool\u00e9en False sinon. Ex\u00e9cuter le code ; Dans la console, appeler la fonction trouver_pair sur les tableaux [ 1 , 3 , 5 ] , [ 8 , 4 , 10 ] et [ 5 , 20 , 5 ] . Que fais r\u00e9ellement cette fonction ? Corriger la fonction pour obtenir le comportement attendu. Lancer b1 = (\"trouverpy-undpair([8, 2, 4]) == True\", \"trouverpy-undpair([7, 5, 1]) == False\", \"trouverpy-undpair([3, 10, 20, 50]) == True\")bksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def trouverpy-undpair(tableau):bksl-nl for entier in tableau:bksl-nl if entier % 2 == 0:bksl-nl return Truebksl-nl else:bksl-nl return Falsebksl-nlbksl-nltrouv\u00c3\u00a9 = trouverpy-undpair([4, 10, 20])bksl-nlprint(trouv\u00c3\u00a9) bksl-nl def trouverpy-undpair(tableau):bksl-nl for entier in tableau:bksl-nl if entier % 2 == 0:bksl-nl return Truebksl-nl return Falsebksl-nlbksl-nl \u00c9crire une fonction trouver_r\u00e9p\u00e9tition qui prend pour param\u00e8tre une cha\u00eene de caract\u00e8res lettre et une cha\u00eene de caract\u00e8res texte . Cette fonction renvoie : le bool\u00e9en True d\u00e8s que la lettre lettre est r\u00e9p\u00e9t\u00e9e plus d'une fois ; le bool\u00e9en False sinon. Ex\u00e9cuter le code ; Dans la console, \u00e0 l'aide de la fonction trouver_r\u00e9p\u00e9tition , v\u00e9rifier si la lettre \"A\" est r\u00e9p\u00e9t\u00e9e dans la cha\u00eene d'ADN \"ACCACGAC\", v\u00e9rifier \u00e9galement que la lettre \"G\" n'est pas r\u00e9p\u00e9t\u00e9e et que la lettre \"T\" n'est pas r\u00e9p\u00e9t\u00e9e. Aide Pensez \u00e0 l'arr\u00eat anticip\u00e9 d'une boucle \u00e0 l'aide d'un return . Lancer b1 = (\"trouverpy-undr\u00c3\u00a9p\u00c3\u00a9tition('A', 'AAA') == True\", \"trouverpy-undr\u00c3\u00a9p\u00c3\u00a9tition('B', 'AAA') == False\", \"trouverpy-undr\u00c3\u00a9p\u00c3\u00a9tition('A', 'ABB') == False\",)bksl-nlbenchmark = (b1, )bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def trouverpy-undr\u00c3\u00a9p\u00c3\u00a9tition(lettre, texte):bksl-nl passbksl-nlbksl-nladn = \"ACCACGAC\"bksl-nlprint(trouverpy-undr\u00c3\u00a9p\u00c3\u00a9tition(\"A\", adn))bksl-nlbksl-nl def trouverpy-undr\u00c3\u00a9p\u00c3\u00a9tition(lettre, texte):bksl-nl compteurpy-undlettre = 0bksl-nl for caract\u00c3\u00a8re in texte:bksl-nl if lettre == caract\u00c3\u00a8re:bksl-nl compteurpy-undlettre = compteurpy-undlettre + 1bksl-nl if compteurpy-undlettre > 1:bksl-nl return Truebksl-nl # fin de la boucle. On n'a pas trouv\u00c3\u00a9 deux occurrences.bksl-nl return Falsebksl-nlbksl-nladn = \"ACCACGAC\"bksl-nlprint(trouverpy-undr\u00c3\u00a9p\u00c3\u00a9tition(\"A\", adn))bksl-nl \u00c9crire une fonction translater qui prend pour param\u00e8tre deux entiers vec_x et vec_y (coordonn\u00e9es d'un vecteur) et deux entiers a et b permettant de r\u00e9aliser une translation de vecteur \\((\\vec a, \\vec b)\\) . Cette fonction renvoie donc deux entiers r\u00e9sultant de la somme des abscisses et de la somme des ordonn\u00e9es. Aide Pensez \u00e0 la syntaxe valeur1 , valeur2 . Lancer b1 = (\"translater(0, 0, 0, 0) == (0, 0)\", \"translater(1, 1, 0, 0) == (1, 1)\", \"translater(1, 2, 10, 0) == (10, 2)\", \"translater(1, 2, 10, 9) == (11, 11)\")bksl-nlbenchmark = (b1, )bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def translater(vecpy-undx, vecpy-undy, a, b):bksl-nl passbksl-nlbksl-nlvpy-undx, vpy-undy = 2, 3bksl-nltpy-undx, tpy-undy = 1, 0bksl-nlprint(translater(vpy-undx, vpy-undy, tpy-undx, tpy-undy))bksl-nl def translater(vecpy-undx, vecpy-undy, a, b):bksl-nl nouveaupy-undvecpy-undx = vecpy-undx + abksl-nl nouveaupy-undvecpy-undy = vecpy-undy + bbksl-nl return nouveaupy-undvecpy-undx, nouveaupy-undvecpy-undybksl-nlbksl-nlvpy-undx, vpy-undy = 2, 3bksl-nltpy-undx, tpy-undy = 1, 0bksl-nlprint(translater(vpy-undx, vpy-undy, tpy-undx, tpy-undy))bksl-nl \u00c9crire une fonction g\u00e9n\u00e9rer qui prend pour param\u00e8tre un entier nombre_bit . Cette fonction g\u00e9n\u00e8re al\u00e9atoirement un nombre binaire de nombre_bit bits, sous forme de cha\u00eene de caract\u00e8res. On utilisera un accumulateur et on utilisera str ( random . randint ( 0 , 1 )) pour g\u00e9n\u00e9rer des bits al\u00e9atoires sous forme de cha\u00eene de caract\u00e8res. \u00c9crire une fonction d\u00e9coder qui prend pour param\u00e8tre un nombre binaire nombre_binaire \u00e9crit sous forme d'une cha\u00eene de caract\u00e8res. Cette fonction compte le nombre de 0 et le nombre 1 et renvoie quel bit appara\u00eet le plus grand nombre de fois ainsi que le nombre d'apparitions. Aide 1 On veut ajouter un nouveau bit \u00e0 l'accumulateur un nombre exact de fois. Utilisez une boucle inconditionnelle. Aide 2 Pensez \u00e0 la syntaxe valeur1 , valeur2 . Lancer b1 = (\"d\u00c3\u00a9coder('00000') == ('0', 5)\", \"d\u00c3\u00a9coder('01110') == ('1', 3)\", \"d\u00c3\u00a9coder('01010') == ('0', 3)\", \"d\u00c3\u00a9coder('0') == ('0', 1)\")bksl-nlbenchmark = (b1, )bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import randombksl-nlbksl-nldef g\u00c3\u00a9n\u00c3\u00a9rer(nombrepy-undbit):bksl-nl accumulateur = \"\"bksl-nl str(random.randint(0,1))bksl-nl passbksl-nlbksl-nldef d\u00c3\u00a9coder(nombrepy-undbinaire):bksl-nl compteurpy-und0 = 0bksl-nl compteurpy-und1 = 0 bksl-nl passbksl-nl import randombksl-nlbksl-nldef g\u00c3\u00a9n\u00c3\u00a9rer(nombrepy-undbit):bksl-nl accumulateur = \"\"bksl-nl for py-und in range(nombrepy-undbit):bksl-nl accumulateur = accumulateur + str(random.randint(0,1))bksl-nl return accumulateurbksl-nlbksl-nldef d\u00c3\u00a9coder(nombrepy-undbinaire):bksl-nl compteurpy-und0 = 0bksl-nl compteurpy-und1 = 0 bksl-nl for bit in nombrepy-undbinaire:bksl-nl if bit == '0':bksl-nl compteurpy-und0 = compteurpy-und0 + 1bksl-nl else:bksl-nl compteurpy-und1 = compteurpy-und1 + 1bksl-nl if compteurpy-und1 > compteurpy-und0:bksl-nl return '1', compteurpy-und1bksl-nl else:bksl-nl return '0', compteurpy-und0bksl-nl Variables locales et globales \u2693\ufe0e Cours On appelle port\u00e9e d'une variable l'ensemble des endroits du programme o\u00f9 elle existe. En th\u00e9orie, il est possible d'acc\u00e9der \u00e0 des variables ext\u00e9rieures \u00e0 une fonction. Toutefois, pour simplifier notre travail, nous utiliserons des param\u00e8tres pour acc\u00e9der \u00e0 ces variables. Cela \u00e9vite les effets de bord consistant \u00e0 modifier des variables de mani\u00e8re inattendue. Pour aller plus loin G\u00e9n\u00e9ralement, le langage de programmation cherche les variables en fonction de leur port\u00e9e. Ainsi, si une variable appel\u00e9e dans une fonction n'y appara\u00eet pas, Python va chercher si cette variable appara\u00eet dans une fonction englobante. Si cette variable n'y appara\u00eet pas non plus, Python va chercher si cette variable appara\u00eet dans le programme principal. Si la variable est toujours absente, Python va rechercher si cette variable est une variable Python par d\u00e9faut. Exercices sur port\u00e9e des variables Exercice 19 Exercice 20 Exercice 21 On dispose d'une fonction g\u00e9n\u00e9rer_tableau_entiers . Ex\u00e9cuter le code et dire ce que permet de faire cette fonction ; Modifier le programme afin d'afficher un tableau de 15 nombres al\u00e9atoires entre -5 et 5 ; Modifier le programme afin d'afficher deux tableaux : l'un compos\u00e9 de 10 nombres al\u00e9atoires entre -5 et 5 et l'autre de 20 nombres al\u00e9atoires entre -5 et 5 ; Ajouter un param\u00e8tre \u00e0 la fonction afin de simplifier la r\u00e9ponse \u00e0 la question pr\u00e9c\u00e9dente. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import randombksl-nlbksl-nlnombre = 10bksl-nldef g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undentiers(entierpy-undmin, entierpy-undmax):bksl-nl tableau = [random.randint(entierpy-undmin,entierpy-undmax) for i in range(nombre)]bksl-nl return tableaubksl-nlbksl-nltableaupy-und1 = g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undentiers(-5, 5)bksl-nlprint(tableaupy-und1)bksl-nl import randombksl-nlbksl-nl# Cette fonction permet de g\u00c3\u00a9n\u00c3\u00a9rer al\u00c3\u00a9atoirement un tableau contenant un nombre bksl-nl# fix\u00c3\u00a9 d'entiers.bksl-nlbksl-nl# nombre doit devenir un param\u00c3\u00a8tre !bksl-nlbksl-nldef g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undentiers(entierpy-undmin, entierpy-undmax, nombre):bksl-nl tableau = [random.randint(entierpy-undmin,entierpy-undmax) for i in range(nombre)]bksl-nl return tableaubksl-nlbksl-nltableaupy-und1 = g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undentiers(-5, 5, 10)bksl-nltableaupy-und2 = g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undentiers(-5, 5, 20)bksl-nlprint(tableaupy-und1)bksl-nlprint(tableaupy-und2)bksl-nl On dispose de la fonction sum_adder permettant de calculer la somme (sans retenue) d'un additionneur complet 1 bit. a , b et c_0 valent soit 0, soit 1. Pensez-vous que ce code fonctionne ? Ex\u00e9cuter le code et v\u00e9rifier votre r\u00e9ponse \u00e0 la question 1 ; Pourquoi ce code est-il compliqu\u00e9 \u00e0 comprendre ? Corriger la fonction afin d'obtenir un comportement plus pr\u00e9visible. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder a = 0bksl-nlb = 0bksl-nldef sumpy-undadder(cpy-und0):bksl-nl return (cpy-und0 + a + b) % 2bksl-nlbksl-nla = 0bksl-nlb = 1bksl-nlsum = sumpy-undadder(0)bksl-nlprint(sum)bksl-nl # a = 0 inutilebksl-nl# b = 0 inutilebksl-nlbksl-nl# a et b deviennent des param\u00c3\u00a8tres.bksl-nldef sumpy-undadder(cpy-und0, a, b):bksl-nl return (cpy-und0 + a + b) % 2bksl-nlbksl-nl# initialisation des variablesbksl-nlbitpy-unda = 0bksl-nlbitpy-undb = 1bksl-nlretenue = 0bksl-nlbksl-nl# appel \u00c3 la fonction avec 3 param\u00c3\u00a8tresbksl-nlsum = sumpy-undadder(retenue, bitpy-unda, bitpy-undb)bksl-nlprint(sum)bksl-nl On dispose d'une fonction dessiner_polygone permettant d'ordonner \u00e0 une tortue tortue de dessiner un polygone de n_c\u00f4t\u00e9 de longueur L . Ex\u00e9cuter le code ; La tortue fred a-t-elle bien dessin\u00e9 un polygone \u00e0 six c\u00f4t\u00e9s, de longueur 40 ? Modifier la fonction afin de r\u00e9aliser cette figure. \u00c0 la suite de l'hexagone, on souhaite maintenant r\u00e9aliser un d\u00e9cagone de longueur 40 ainsi qu'un dod\u00e9cagone de longueur 40. Faire cela en rajoutant deux instruction avant fred . mainloop () . Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlbksl-nldef dessinerpy-undpolygone(tortue, npy-undc\u00c3\u00b4t\u00c3\u00a9, L):bksl-nl npy-undc\u00c3\u00b4t\u00c3\u00a9 = 10bksl-nl angle = 360 // npy-undc\u00c3\u00b4t\u00c3\u00a9bksl-nl for py-und in range(npy-undc\u00c3\u00b4t\u00c3\u00a9):bksl-nl fred.fd(50)bksl-nl fred.right(angle)bksl-nl return Nonebksl-nlbksl-nlfred = turtle.Turtle()bksl-nldessinerpy-undpolygone(fred, 6, 40)bksl-nlbksl-nlfred.mainloop()bksl-nl import turtlebksl-nlbksl-nldef dessinerpy-undpolygone(tortue, npy-undc\u00c3\u00b4t\u00c3\u00a9, L):bksl-nl angle = 360 // npy-undc\u00c3\u00b4t\u00c3\u00a9bksl-nl for py-und in range(npy-undc\u00c3\u00b4t\u00c3\u00a9):bksl-nl # attention ! On parle de la tortue en g\u00c3\u00a9n\u00c3\u00a9ral, pas seulement de fred.bksl-nl tortue.fd(L)bksl-nl tortue.right(angle)bksl-nl return Nonebksl-nlbksl-nlfred = turtle.Turtle()bksl-nldessinerpy-undpolygone(fred, 6, 40)bksl-nldessinerpy-undpolygone(fred, 10, 40)bksl-nldessinerpy-undpolygone(fred, 12, 40)bksl-nlfred.mainloop()bksl-nl Documentation d'une fonction \u2693\ufe0e Cours Pour \u00e9crire un code facilement compr\u00e9hensible, nous avons jusqu'\u00e0 maintenant utilis\u00e9 le principe de de l'auto-documentation. On nomme toujours clairement nos variables et fonctions. Exemple Un code illisible Un code auto-document\u00e9 Difficile de savoir ce que fait ce programme... def f ( t ): m = - 1 for i in t : if i > m : m = i return m Beaucoup plus lisible ! def calculer_maximum ( tableau ): maximum_actuel = - 1 for nombre in tableau : if nombre > maximum_actuel : maximum_actuel = nombre return maximum_actuel Toutefois, il convient \u00e9galement de documenter les fonctions complexes que vous faites. Documenter permet d'expliquer aux personnes qui ne sont pas famili\u00e8res avec vos fonctions de les comprendre : que fait-elle ? de quels types sont les param\u00e8tres ? un petit exemple. Attention \u00e0 ne pas trop documenter ! Exemple Trop de documentation Documentation correcte Trop peu de documentation Incompr\u00e9hensible def calculer_carr\u00e9 ( x ): \"\"\"Calcule le carr\u00e9 d'un nombre Param\u00e8tres : x -- flottant ou entier Exemple : nombre = calculer_carr\u00e9(2.0) \"\"\" return x ** 2 def calculer_carr\u00e9 ( x ): \"\"\"Calcule le carr\u00e9 d'un nombre flottant ou entier\"\"\" return x ** 2 def f ( x ): return x ** 2 f = lambda m : ( lambda _ : pow ( _ , 1 ))( m ) * ( lambda u : u )( m ) Souvent... Vous allez \u00eatre la personne n\u00e9cessitant la documentation. Rien de plus frustrant que de revenir sur un de vos codes non document\u00e9 et de passer quelques heures \u00e0 retrouver comment il fonctionne. Exercice Exercice 22 L'auto-documentation de cette fonction semble suffisante. \u00c0 partir de cette auto-documentation, ajouter une documentation ad\u00e9quate. Lancer b1 = (\"d\u00c3\u00a9coder('00000') == ('0', 5)\", \"d\u00c3\u00a9coder('01110') == ('1', 3)\", \"d\u00c3\u00a9coder('01010') == ('0', 3)\", \"d\u00c3\u00a9coder('0') == ('0', 1)\")bksl-nlbenchmark = (b1, )bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def appartenirpy-unddisque(x, y, xpy-undc, ypy-undc, rayon):bksl-nl if (x - xpy-undc)py-strpy-str2 + (y - ypy-undc)py-strpy-str2 <= rayonpy-strpy-str2:bksl-nl return Truebksl-nl else:bksl-nl return Falsebksl-nlbksl-nlbksl-nl def appartenirpy-unddisque(x, y, xpy-undc, ypy-undc, rayon):bksl-nl \"\"\"bksl-nl bksl-nl \"\"\"bksl-nl if (x - xpy-undc)py-strpy-str2 + (y - ypy-undc)py-strpy-str2 <= rayonpy-strpy-str2:bksl-nl return Truebksl-nl else:bksl-nl return Falsebksl-nl R\u00e9sum\u00e9 \u2693\ufe0e R\u00e9sum\u00e9 Dans ce chapitre, j'ai appris : l'int\u00e9r\u00eat des fonctions en programmation informatique ; \u00e0 \u00e9crire une fonction simple ; la diff\u00e9rence entre param\u00e8tres et arguments ; l'instruction return et ses subtilit\u00e9s ; \u00e0 documenter mes fonctions. Une anecdote En 1973, un robot est envoy\u00e9 sur la Lune pour collecter des donn\u00e9es. Celui-ci, une fois arriv\u00e9, affiche les donn\u00e9es sur son \u00e9cran avec l'\u00e9quivalent de print . Rien n'a \u00e9t\u00e9 renvoy\u00e9 sur Terre car l'\u00e9quivalent de return n'a pas \u00e9t\u00e9 utilis\u00e9 ! En g\u00e9n\u00e9ral, on souhaite faire quelque chose de nos donn\u00e9es, pas les afficher.","title":"Fonctions"},{"location":"python4/#fonctions","text":"Ce chapitre est la pierre angulaire de tout langage informatique ! Pour tous les exercices, vous pouvez valider vos r\u00e9ponses avec le petit gendarme : votre fonction sera alors test\u00e9e sur des cas de base. Ces cas vous aident \u00e0 comprendre pourquoi votre fonction n'a pas encore le fonctionnement attendu.","title":"Fonctions"},{"location":"python4/#principe","text":"Pourquoi les fonctions ? Les lignes suivantes permettent de convertir une temp\u00e9rature de degr\u00e9 Fahrenheit vers degr\u00e9 Celsius . temp_fahrenheit = 60 temp_celsius = temp_fahrenheit - 32 * ( 5 / 8 ) Dans le terminal ci-dessous, tester ce programme pour convertir 60 degr\u00e9s Fahrenheit en degr\u00e9s Celsius. Afficher la valeur r\u00e9f\u00e9renc\u00e9e par la variable temp_celsius . Pro tip : dans la console, utiliser la touche Tab pour compl\u00e9ter un mot dont vous aurez \u00e9crit le d\u00e9but. temp_f + Tab doit \u00e9crire temp_fahrenheit . On souhaite maintenant convertir 90 et 120 degr\u00e9s Fahrenheit en degr\u00e9s Celsius. Ajouter les lignes correspondantes. >>> Solution temp_fahrenheit = 60 temp_celsius = temp_fahrenheit - 32 * ( 5 / 8 ) print ( temps_celsius ) temp_fahrenheit = 90 temp_celsius = temp_fahrenheit - 32 * ( 5 / 8 ) print ( temps_celsius ) temp_fahrenheit = 120 temp_celsius = temp_fahrenheit - 32 * ( 5 / 8 ) print ( temps_celsius ) On remarque qu'il y a beaucoup de r\u00e9p\u00e9titions dans le code, m\u00eame si nous avons utilis\u00e9 des variables. Notez que l'on pourrait \u00e9ventuellement utiliser une boucle : for temp_fahrenheit in [ 60 , 90 , 120 ]: temp_celsius = temp_fahrenheit - 32 * ( 5 / 8 ) print ( temps_celsius ) Il est toutefois difficile de comprendre ce que fait ce programme. Le principe DRY va encore \u00eatre ici \u00e0 l'oeuvre : la structure fonction va permettre de simplifier un programme en \u00e9vitant les r\u00e9p\u00e9titions inutiles et complexes \u00e0 d\u00e9bogger. Cette structure va rendre \u00e9galement le code plus abstrait . Cours Une fonction permet de cr\u00e9er des blocs d'instructions que nous pouvons r\u00e9utilisons quand nous le souhaitons. C'est une boite noire ind\u00e9pendante du reste d'un programme : nous pouvons la tester et contr\u00f4ler son fonctionnement de mani\u00e8re ind\u00e9pendante ; elle d\u00e9coupe le probl\u00e8me en sous-probl\u00e8me plus simple \u00e0 r\u00e9soudre ; nous pouvons la r\u00e9utiliser dans d'autres programmes. Exemple Pour construire une voiture, on ne fait pas tout en m\u00eame temps : on a par exemple besoin de convertir de l'\u00e9nergie thermique (ou \u00e9lectrique) en \u00e9nergie m\u00e9canique. Pour cela, on \"cr\u00e9e\" une fonction nomm\u00e9e convertir_\u00e9nergie_thermique_en_\u00e9nergie_m\u00e9canique qu'on appelle aussi le moteur ; la conversion de l'\u00e9nergie thermique en \u00e9nergie m\u00e9canique va fonctionner car le moteur a \u00e9t\u00e9 test\u00e9 de mani\u00e8re ind\u00e9pendante lors du d\u00e9veloppement du mod\u00e8le de voiture ; on le r\u00e9utilise ensuite pour la production \u00e0 la cha\u00eene. Nous nommerons nos fonctions avec des noms d'action : calculer_moyenne , trier_tableau ou afficher_r\u00e9sultats .","title":"Principe"},{"location":"python4/#definir-une-fonction","text":"Cours Pour d\u00e9finir une fonction en Python, on utilise la syntaxe suivante : def nom_de_la_fonction ( parametre1 , parametre2 , ... ): ... instructions ... ... instructions ... ... instructions ... return r\u00e9sultat1 , r\u00e9sultat2 , ... Une fois def inie, la fonction appel\u00e9e nom_de_la_fonction peut \u00eatre utilis\u00e9e n'importe o\u00f9 dans le programme. En Python, l'indentation des instructions appartenant \u00e0 la fonction est obligatoire . Important return est l'instruction permettant de renvoyer des r\u00e9sultats en dehors de la fonction. Toute variable non renvoy\u00e9e par return sera perdue dans la bo\u00eete noire ! Important Dans ma grande bont\u00e9, je vous propose quelquefois des fonctions o\u00f9 seul le titre es pr\u00e9sent (on appelle cela un prototype). Pour \u00e9viter une erreur, le mot-cl\u00e9 pass appara\u00eet dans la fonction : il indique \u00e0 Python de ne rien faire. Quand vous commencez \u00e0 \u00e9crire la fonction, supprimez pass . Nous allons tout de suite \u00e9tudier divers cas particuliers importants.","title":"D\u00e9finir une fonction"},{"location":"python4/#exemple-de-fonctions","text":"","title":"Exemple de fonctions"},{"location":"python4/#fonction-sans-parametres","text":"Les fonctions sans param\u00e8tres sont des raccourcis pour \u00e9viter de retaper plusieurs fois les m\u00eames instructions. Leur utilit\u00e9 est tr\u00e8s limit\u00e9e : si vous les utilisez, ce sera pour des utilisations tr\u00e8s sp\u00e9cifiques. Exercice Exercice 1 Exercice 2 Exercice 3 Exercice 4 On donne la fonction ci-dessous. Ex\u00e9cuter le programme. Dans la console, \u00e9crire compter () (on dit que vous appelez la fonction compter () ). Observer le r\u00e9sultat et expliquer celui-ci. Dans la console, faire deux autres appels \u00e0 la fonction compter () . Que remarquez-vous ? Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def compter():bksl-nl for i in range(5):bksl-nl print(i + 1, end = \";\")bksl-nl print() # retour \u00c3 la lignebksl-nl return Nonebksl-nl Explications Quand vous avez appel\u00e9 la fonction dans la console, Python a regard\u00e9 quelque part dans la m\u00e9moire s'il existait une fonction appel\u00e9e compter () . Il l'a trouv\u00e9 car nous avons ex\u00e9cut\u00e9 le programme : ensuite la fonction se d\u00e9roule. Cette fonction affiche des informations et ne renvoie aucune valeur : on lui demande de renvoyer la valeur None . On donne la fonction ci-dessous. Sans l'ex\u00e9cuter, dire ce que permet de faire la fonction \u00e9crite dans l'\u00e9diteur. Ex\u00e9cuter le programme. Dans la console, afficher la valeur de vitesse_lumi\u00e8re . Modifier le programme en rempla\u00e7ant la ligne 5 par vitesse_lumi\u00e8re = c . Ex\u00e9cuter le programme et comprendre l'erreur affich\u00e9e. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def donnerpy-undc\u00c3\u00a9l\u00c3\u00a9rit\u00c3\u00a9():bksl-nl c = 299py-und792py-und458 # en m/sbksl-nl return cbksl-nlbksl-nlvitessepy-undlumi\u00c3\u00a8re = donnerpy-undc\u00c3\u00a9l\u00c3\u00a9rit\u00c3\u00a9()bksl-nlbksl-nl Remarque importante Une variable peut r\u00e9f\u00e9rencer la valeur renvoy\u00e9e par une fonction. C'est ce que fait : vitesse_lumi\u00e8re = calculer_c\u00e9l\u00e9rit\u00e9 () . Remarquez toutefois que lorsque vous avez \u00e9crit vitesse_lumi\u00e8re = c , vous avez obtenu une erreur : NameError : name 'c' is not defined . Cela signifie que la variable c n'existe pas en dehors de la fonction. La course des Animaux est un jeu qui permet de d\u00e9placer trois types d'animaux sur un plateau : le Z\u00e8bre a 1 chance sur 2 de se d\u00e9placer de 6 cases ou de reculer d'une case ; le Lion a 1 chance sur 2 de se d\u00e9placer de 5 cases ou de ne pas se d\u00e9placer du tout ; l'\u00c9l\u00e9phant a 1 chance sur 4 de se d\u00e9placer de 4 cases, et sinon, il se d\u00e9place de 2 cases. En vous inspirant de la fonction ci-dessous, \u00e9crire une fonction calculer_d\u00e9placement_lion et calculer_d\u00e9placement_\u00e9l\u00e9phant permettant de calculer le d\u00e9placement du Lion et de l'\u00c9l\u00e9phant. Lancer b1 = [\"calculerpy-undd\u00c3\u00a9placementpy-undlion() == 5\", \"calculerpy-undd\u00c3\u00a9placementpy-undlion() == 0\"]bksl-nlb2 = [\"calculerpy-undd\u00c3\u00a9placementpy-und\u00c3\u00a9l\u00c3\u00a9phant() == 4\", \"calculerpy-undd\u00c3\u00a9placementpy-und\u00c3\u00a9l\u00c3\u00a9phant() == 2\"]bksl-nlbenchmark = (b1, b2,)bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import randombksl-nlbksl-nldef calculerpy-undd\u00c3\u00a9placementpy-undz\u00c3\u00a8bre():bksl-nl if random.random() > 1 / 2:bksl-nl d\u00c3\u00a9placement = 6bksl-nl else:bksl-nl d\u00c3\u00a9placement = -1bksl-nl return d\u00c3\u00a9placementbksl-nl import randombksl-nlbksl-nldef calculerpy-undd\u00c3\u00a9placementpy-undz\u00c3\u00a8bre():bksl-nl if random.random() > 1 / 2:bksl-nl d\u00c3\u00a9placement = 6bksl-nl else:bksl-nl d\u00c3\u00a9placement = -1bksl-nl return d\u00c3\u00a9placementbksl-nlbksl-nldef calculerpy-undd\u00c3\u00a9placementpy-undlion():bksl-nl # notation if/else adapt\u00c3\u00a9e pour une unique instructionbksl-nl if random.random() > 1 / 2: d\u00c3\u00a9placement = 5bksl-nl else: d\u00c3\u00a9placement = 0bksl-nl return d\u00c3\u00a9placementbksl-nlbksl-nldef calculerpy-undd\u00c3\u00a9placementpy-und\u00c3\u00a9l\u00c3\u00a9phant():bksl-nl # notation if/else adapt\u00c3\u00a9e pour une unique instructionbksl-nl if random.random() > 1 / 4: d\u00c3\u00a9placement = 2bksl-nl else: d\u00c3\u00a9placement = 4bksl-nl return d\u00c3\u00a9placementbksl-nl Compl\u00e9ter la fonction placer_al\u00e9atoirement . Elle renvoie : un entier al\u00e9atoire x compris entre 0 et 700 ; un entier al\u00e9atoire y compris entre 0 et 400. Compl\u00e9ter la fonction choisir_couleur . Elle renvoie : 'red' si n vaut 0 ; 'green' si n vaut 1 ; 'blue' si n vaut 2 ; 'purple' si n vaut 3. Ex\u00e9cuter le script. Dans la console, appeler la fonction cr\u00e9er_tache et observer le r\u00e9sultat. Comprendre l'affichage. Dans la console, faire une boucle inconditionnelle appelant 10 fois la fonction cr\u00e9er_tache . Lancer b1 = (\"placerpy-undal\u00c3\u00a9atoirement()[0] is not None\", \"placerpy-undal\u00c3\u00a9atoirement()[1] is not None\", \"0 <= placerpy-undal\u00c3\u00a9atoirement()[0] <= 700 and 0 <= placerpy-undal\u00c3\u00a9atoirement()[1] <= 400 \")bksl-nlb2 = (\"choisirpy-undcouleur() == 'red' or choisirpy-undcouleur() == 'green' or choisirpy-undcouleur() == 'blue' or choisirpy-undcouleur() == 'purple'\",)bksl-nlbenchmark = [b1, b2]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import randombksl-nlimport turtlebksl-nlbksl-nlx = random.randint(0, 700)bksl-nlbksl-nldef placerpy-undal\u00c3\u00a9atoirement():bksl-nl passbksl-nlbksl-nldef choisirpy-undcouleur():bksl-nl n = random.randint(0,3)bksl-nl passbksl-nlbksl-nldef cr\u00c3\u00a9erpy-undtache():bksl-nl taille = random.randint(1, 50)bksl-nl x, y = placerpy-undal\u00c3\u00a9atoirement()bksl-nl couleur = choisirpy-undcouleur()bksl-nl if couleur is not None:bksl-nl turtle.hideturtle()bksl-nl turtle.penup()bksl-nl turtle.goto(x, y)bksl-nl turtle.pendown()bksl-nl turtle.dot(taille, couleur)bksl-nl return Nonebksl-nlbksl-nlbksl-nl import randombksl-nlimport turtlebksl-nlbksl-nldef placerpy-undal\u00c3\u00a9atoirement():bksl-nl x = random.randint(0, 700)bksl-nl y = random.randint(0, 400)bksl-nl return x, ybksl-nlbksl-nldef choisirpy-undcouleur():bksl-nl n = random.randint(0,3)bksl-nl if n == 0 : couleur = 'red'bksl-nl if n == 1 : couleur = 'green'bksl-nl if n == 2 : couleur = 'blue'bksl-nl if n == 3 : couleur = 'purple'bksl-nl return couleurbksl-nlbksl-nldef cr\u00c3\u00a9erpy-undtache():bksl-nl taille = random.randint(1, 50)bksl-nl x, y = placerpy-undal\u00c3\u00a9atoirement()bksl-nl turtle.hideturtle()bksl-nl turtle.penup()bksl-nl turtle.goto(x, y)bksl-nl turtle.pendown()bksl-nl turtle.dot(taille, choisirpy-undcouleur())bksl-nl return Nonebksl-nlbksl-nlfor py-und in range(10):bksl-nl cr\u00c3\u00a9erpy-undtache()bksl-nl Aide Se rappeler la syntaxe des boucles inconditionnelles for _ in range ( 10 ) .","title":"Fonction sans param\u00e8tres"},{"location":"python4/#fonction-avec-parametres","text":"Cours Exemple Ex\u00e9cuter le code. Dans la console, taper compter ( 5 ) puis compter ( 10 ) . Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def compter(n):bksl-nl for i in range(n):bksl-nl print(i + 1, end = \";\")bksl-nlbksl-nl print() # retour \u00c3 la lignebksl-nl return Nonebksl-nl La valeur n est appel\u00e9e param\u00e8tre de la fonction compter . On dit qu'on passe le param\u00e8tre n \u00e0 la fonction compter . Lorsque vous avez tap\u00e9 compter ( 5 ) da,ns la console, vous avez appeler la fonction compter avec l' argument 3. Pour aller plus loin Les annotations permettent de pr\u00e9ciser \u00e0 un utilisateur ext\u00e9rieur quel est le type des param\u00e8tres. Attention, cela n'impose pas le type du param\u00e8tres, c'est simplement une indication ! Pour indiquer que n est entier, on peut par exemple \u00e9crire : def compter ( n : int ): ... Pour plusieurs param\u00e8tres a flottant et n entier, on pourrait \u00e9crire : def multiplier ( a : float , n : int ): ... Nous le reverrons au chapitre 8 ! Exercices Exercice 5 Exercice 6 Exercice 7 Exercice 8 Exercice 9 Exercice 10 Exercice 11 \u00c9crire une fonction f qui prend en param\u00e8tre un nombre flottant x et qui renvoie le nombre flottant 2 * x + 1 . Ex\u00e9cuter votre fonction puis dans la console, \u00e9crire quelques tests. Par exemple : f ( 1 ) . Tester la fonction avec l'ic\u00f4ne gendarme. Lancer b1 = (\"f(0) = 1\", \"f(1) == 3\", \"f(10) == 2py-str10+1\",)bksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nlbksl-nlbksl-nlbksl-nl def f(x):bksl-nl return 2 py-str x + 1bksl-nl Compl\u00e9ter la fonction calculer_aire_rectangle qui prend en param\u00e8tre deux nombres flottants longueur et largeur et qui renvoie l'aire du rectangle. Ajouter une fonction calculer_volume_boite qui prend en param\u00e8tre trois nombres flottants longueur , largeur et hauteur et qui renvoie le volume d'une boite. Ex\u00e9cuter vos fonctions puis dans la console, \u00e9crire quelques tests. Par exemple : calculer_aire_rectangle ( 1 , 10 ) . Valider votre r\u00e9sultat avec l'ic\u00f4ne gendarme ! Lancer b1 = (\"calculerpy-undairepy-undrectangle(10, 1) == 10\", \"calculerpy-undairepy-undrectangle(10, 0) == 0\", \"calculerpy-undairepy-undrectangle(5, 12) == 60\",)bksl-nlb2 = (\"calculerpy-undvolumepy-undboite(1, 0, 1) == 0\", \"calculerpy-undvolumepy-undboite(1, 1, 1) == 1\", \"calculerpy-undvolumepy-undboite(10, 10, 10) == 1000\", \"calculerpy-undvolumepy-undboite(5, 4, 2) == 40\",)bksl-nlbenchmark = [b1, b2]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def calculerpy-undairepy-undrectangle(longueur, largeur):bksl-nl passbksl-nlbksl-nlbksl-nlbksl-nl def calculerpy-undairepy-undrectangle(longueur, largeur):bksl-nl aire = longueur py-str largeurbksl-nl return airebksl-nlbksl-nldef calculerpy-undvolumepy-undboite(longueur, largeur, hauteur):bksl-nl volume = longueur py-str largeur py-str hauteurbksl-nl return volumebksl-nlbksl-nlbksl-nl \u00c9crire une fonction est_divisible_par qui prend en param\u00e8tre deux nombres entiers positifs entier et diviseur et qui renvoie True si entier est divisible par diviseur . Ex\u00e9cuter votre fonction puis dans la console, \u00e9crire quelques tests. Par exemple : est_divisible_par ( 10 , 2 ) . Tester la fonction avec l'ic\u00f4ne gendarme. Lancer b1 = (\"estpy-unddivisiblepy-undpar(10, 2) == True\", \"estpy-unddivisiblepy-undpar(10, 3) == False\", \"estpy-unddivisiblepy-undpar(21, 7) == True\",)bksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def estpy-unddivisiblepy-undpar(entier, diviseur):bksl-nl passbksl-nlbksl-nlbksl-nlbksl-nl def estpy-unddivisiblepy-undpar(entier, diviseur):bksl-nl if entier % diviseur == 0:bksl-nl return Truebksl-nl else:bksl-nl return Falsebksl-nlbksl-nlbksl-nl \u00c9crire une fonction valider_email qui prend en param\u00e8tre une cha\u00eene de caract\u00e8res email . Cette fonction renvoie True si la cha\u00eene de caract\u00e8res contient un arobase @ . Une fois le parcours de l'adresse email avec une boucle inconditionnelle termin\u00e9e, on renverra False si l'arobase n'a pas \u00e9t\u00e9 trouv\u00e9. V\u00e9rifier la fonction en appelant par exemple valider_email ( \"titou_du_01@live.fr\" ) . Valider avec l'ic\u00f4ne gendarme. Lancer b1 = (\"validerpy-undemail('josette@gmail.com')) == True\", \"validerpy-undemail('@@@@@@protonmail.com')) == True\", \"validerpy-undemail('libert\u00c3\u00a9py-und\u00c3\u00a9galit\u00c3\u00a9py-undfraternit\u00c3\u00a9')) == False\",)bksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def validerpy-undemail(email):bksl-nl passbksl-nlbksl-nlbksl-nlbksl-nl def validerpy-undemail(email):bksl-nl # on suppose que le caract\u00c3\u00a8re @ est absent.bksl-nl trouv\u00c3\u00a9 = Falsebksl-nl for lettre in email:bksl-nl if lettre == \"@\":bksl-nl trouv\u00c3\u00a9 = Truebksl-nl return trouv\u00c3\u00a9bksl-nlbksl-nlbksl-nlbksl-nl \u00c9crire une fonction sommer qui prend en param\u00e8tre un tableau non vide d'entiers tableau . Cette fonction renvoie la somme des entiers pr\u00e9sents dans ce tableau. Ajouter une fonction moyenner qui prend en param\u00e8tre un tableau non vide d'entiers tableau ainsi que son nombre d'\u00e9l\u00e9ments taille . Cette fonction renvoie la moyenne des entiers pr\u00e9sents dans ce tableau. Dans cette fonction, on utilisera la fonction sommer d\u00e9finie pr\u00e9c\u00e9demment. Lancer b1 = (\"sommer([10]) == 10\", \"sommer([10, 2, 6]) == 18\", \"sommer([8,-8]) == 0\",)bksl-nlb2 = (\"moyenner([10]) == 10\", \"moyenner([10, 2, 6]) == 6.0\", \"moyenner([8,-8]) == 0\",)bksl-nlbenchmark = [b1, b2, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def sommer(tableau):bksl-nl passbksl-nlbksl-nlbksl-nlbksl-nl def sommer(tableau):bksl-nl accumulateur = 0bksl-nl for entier in tableau:bksl-nl accumulateur = accumulateur + entierbksl-nl return accumulateurbksl-nlbksl-nldef moyenner(tableau, taille):bksl-nl somme = sommer(tableau)bksl-nl return somme / taillebksl-nlbksl-nl \u00c9crire une fonction trouver_maximum_2 qui prend en param\u00e8tre deux entiers a et b . Cette fonction renvoie la valeur du plus grand des deux entiers. Ex\u00e9cuter le programme puis tester votre fonction dans la console avant de le valider avec le gendarme. Lancer b1 = (\"trouverpy-undmaximumpy-und2(1, 8) == 8\", \"trouverpy-undmaximumpy-und2(30, 20) == 30\", \"trouverpy-undmaximumpy-und2(8, 8) == 8\",)bksl-nlbenchmark = (b1, )bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def trouverpy-undmaximumpy-und2(a, b):bksl-nl passbksl-nl def trouverpy-undmaximumpy-und2(a, b):bksl-nl if a > b: bksl-nl maximum = abksl-nl else:bksl-nl maximum = bbksl-nl return maximumbksl-nlbksl-nl \u00c9crire une fonction trouver_maximum_3 qui prend en param\u00e8tre deux entiers a , b et c . Cette fonction renvoie la valeur du plus grand des trois entiers. On pourra utiliser la fonction pr\u00e9c\u00e9dente trouver_maximum_2 . Ex\u00e9cuter le programme puis tester votre fonction dans la console avant de le valider avec le gendarme. Lancer b1 = (\"trouverpy-undmaximumpy-und3(1, 2, 3) == 3\", \"trouverpy-undmaximumpy-und3(30, 20, 10) == 30\", \"trouverpy-undmaximumpy-und3(8, 8, 8) == 8\",)bksl-nlbenchmark = (b1, )bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def trouverpy-undmaximumpy-und2(a, b):bksl-nl if a > b: bksl-nl maximum = abksl-nl else:bksl-nl maximum = bbksl-nl return maximumbksl-nlbksl-nldef trouverpy-undmaximumpy-und3(a, b, c):bksl-nl passbksl-nl bksl-nl def trouverpy-undmaximumpy-und2(a, b):bksl-nl if a > b: bksl-nl maximum = abksl-nl else:bksl-nl maximum = bbksl-nl return maximumbksl-nlbksl-nldef trouverpy-undmaximumpy-und3(a, b, c):bksl-nl # on veut trouver le maximum M de a et bbksl-nl # puis trouver le maximum entre M et cbksl-nl maximumpy-undactuel = trouverpy-undmaximumpy-und2(a, b)bksl-nl maximum = trouverpy-undmaximumpy-und2(maximumpy-undactuel, c)bksl-nl return maximumbksl-nl Aide Pour trouver le maximum entre trois nombres, on veut trouver le maximum M entre deux nombres a et b puis trouver le maximum entre M et le dernier nombre c.","title":"Fonction avec param\u00e8tres"},{"location":"python4/#et-si-on-na-rien-a-renvoyer","text":"Cours On a toujours quelque chose \u00e0 renvoyer : en l'absence de valeurs \u00e0 renvoyer, on \u00e9crira, return None . Pour aller plus loin En pratique, return None n'est pas obligatoire. Si une fonction ne contient pas le mot-cl\u00e9 return , Python rajoutera gentiment (et automatiquement) return None \u00e0 la fin de votre fonction lors de l'interpr\u00e9tation du programme. explicit is better than implicit : \u00e9crivez toujours return None . Exercices Exercice 12 Exercice 13 Exercice 14 \u00c9crire une fonction f qui prend en param\u00e8tre un nombre flottant x et qui affiche le nombre flottant x ** 2 + 1 . R\u00e9aliser les op\u00e9rations suivants : y = f ( 2 ) puis print ( y ) ? Expliquer le r\u00e9sultat. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nlbksl-nlbksl-nlbksl-nlbksl-nlbksl-nl def f(x):bksl-nl # on affiche le r\u00c3\u00a9sultatbksl-nl print(xpy-strpy-str2 + 1)bksl-nl # on renvoie Nonebksl-nl return Nonebksl-nlbksl-nly = f(2)bksl-nlbksl-nlprint(y)bksl-nl Explications print ( f ( 2 )) affiche : >>> y = f ( 2 ) 5 >>> print ( y ) None L'appel y = f ( 2 ) se d\u00e9compose en : en \u00e9valuation du r\u00e9sultat de ma fonction f ( 2 ) : c'est un affichage de 2 ** 2 + 1 , suivi du renvoi de None comme r\u00e9sultat ; y r\u00e9f\u00e9rence la valeur renvoy\u00e9e qui est None . print ( y ) affiche donc bien None ! Dessin \u00e0 obtenir Compl\u00e9ter la fonction triangle qui prend en param\u00e8tre : une tortue graphique tortue ; la longueur c\u00f4t\u00e9 du triangle ; l'abscisse initiale x de la tortue ; l'ordonn\u00e9e initiale y de la tortue. Cette fonction dessine un triangle \u00e9quilat\u00e9ral de couleur verte dont le sommet en bas \u00e0 gauche a pour coordonn\u00e9es \\((x, y)\\) . Ex\u00e9cuter votre programme et tester votre fonction dans la console. Important N'oubliez pas le return None !!! Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlbksl-nlfred = turtle.Turtle()bksl-nlbksl-nldef triangle(tortue, c\u00c3\u00b4t\u00c3\u00a9, x, y):bksl-nl passbksl-nlbksl-nltriangle(fred, 60, 0, 0)bksl-nlfred.mainloop()bksl-nl import turtlebksl-nlbksl-nlfred = turtle.Turtle()bksl-nlbksl-nldef triangle(tortue, c\u00c3\u00b4t\u00c3\u00a9, x, y):bksl-nl tortue.penup()bksl-nl tortue.goto(x, y)bksl-nl tortue.pendown()bksl-nl tortue.fillcolor('green')bksl-nl tortue.beginpy-undfill()bksl-nl for py-und in range(3):bksl-nl tortue.fd(c\u00c3\u00b4t\u00c3\u00a9)bksl-nl tortue.lt(120)bksl-nl tortue.endpy-undfill()bksl-nl return Nonebksl-nlbksl-nltriangle(fred, 60, 0, 0)bksl-nlfred.mainloop()bksl-nl Dessin \u00e0 obtenir \u00c9crire une fonction calculer_hauteur qui prend pour param\u00e8tre un c\u00f4t\u00e9 c\u00f4t\u00e9 et renvoie la hauteur d'un triangle \u00e9quilat\u00e9ral de c\u00f4t\u00e9 c. \u00c0 l'aide des fonctions calculer_hauteur et triangle , cr\u00e9er la fonction nucl\u00e9aire ayant pour param\u00e8tre une tortue graphique tortue et le c\u00f4t\u00e9 c\u00f4t\u00e9 . Le centre du symbole nucl\u00e9aire est \\((0,0)\\) . Aide 1 Dessin La hauteur d'un triangle \u00e9quilat\u00e9ral peut se calculer facilement en d\u00e9coupant le triangle \u00e9quilat\u00e9ral en deux triangles rectangles. On applique alors le th\u00e9or\u00e8me de Pythagore. Faites un dessin !! Aide 2 Les Maths ne sont pas votre truc. Voici la formule : \\(h = \\dfrac{\\sqrt{3}}{2} c\\) . Important Avez-vous pens\u00e9 au return None !!! J'y tiens. Vraiment. Pour de vrai . Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlfrom math import sqrtbksl-nlbksl-nlfred = turtle.Turtle()bksl-nlbksl-nldef calculerpy-undhauteur(c\u00c3\u00b4t\u00c3\u00a9):bksl-nl passbksl-nlbksl-nldef triangle(tortue, c\u00c3\u00b4t\u00c3\u00a9, x, y):bksl-nl tortue.penup()bksl-nl tortue.goto(x, y)bksl-nl tortue.pendown()bksl-nl tortue.fillcolor('green')bksl-nl tortue.beginpy-undfill()bksl-nl for py-und in range(3):bksl-nl tortue.fd(c\u00c3\u00b4t\u00c3\u00a9)bksl-nl tortue.lt(120)bksl-nl tortue.endpy-undfill()bksl-nl return Nonebksl-nlbksl-nldef nucl\u00c3\u00a9aire(tortue, c\u00c3\u00b4t\u00c3\u00a9):bksl-nl passbksl-nlbksl-nlnucl\u00c3\u00a9aire(fred, 60)bksl-nlfred.mainloop()bksl-nl import turtlebksl-nlfrom math import sqrtbksl-nlbksl-nlfred = turtle.Turtle()bksl-nlbksl-nldef calculerpy-undhauteur(c\u00c3\u00b4t\u00c3\u00a9):bksl-nl return sqrt(3) / 2 py-str c\u00c3\u00b4t\u00c3\u00a9bksl-nlbksl-nldef triangle(tortue, c\u00c3\u00b4t\u00c3\u00a9, x, y):bksl-nl tortue.penup()bksl-nl tortue.goto(x, y)bksl-nl tortue.pendown()bksl-nl tortue.fillcolor('green')bksl-nl tortue.beginpy-undfill()bksl-nl for py-und in range(3):bksl-nl tortue.fd(c\u00c3\u00b4t\u00c3\u00a9)bksl-nl tortue.lt(120)bksl-nl tortue.endpy-undfill()bksl-nl return Nonebksl-nlbksl-nldef nucl\u00c3\u00a9aire(tortue, c\u00c3\u00b4t\u00c3\u00a9):bksl-nl hauteur = calculerpy-undhauteur(c\u00c3\u00b4t\u00c3\u00a9)bksl-nl triangle(tortue, c\u00c3\u00b4t\u00c3\u00a9, 0, 0)bksl-nl triangle(tortue, c\u00c3\u00b4t\u00c3\u00a9, -c\u00c3\u00b4t\u00c3\u00a9, 0)bksl-nl triangle(tortue, c\u00c3\u00b4t\u00c3\u00a9, -c\u00c3\u00b4t\u00c3\u00a9 / 2, -hauteur)bksl-nl return Nonebksl-nlbksl-nlnucl\u00c3\u00a9aire(fred, 60)bksl-nlfred.mainloop()bksl-nl","title":"Et si on n'a rien \u00e0 renvoyer ?"},{"location":"python4/#utilisation-de-return","text":"Cours Dans une seule fonction, il est possible de renvoyer plusieurs valeurs avec return . Il suffit d'utiliser la syntaxe : return valeur1 , valeur2 , valeur3 ... . Exemple Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import randombksl-nlbksl-nldef g\u00c3\u00a9n\u00c3\u00a9rerpy-undcouleurpy-undRGB():bksl-nl \"\"\" G\u00c3\u00a9n\u00c3\u00a8re les composantes Rouge, bksl-nl Vert, Bleu entre 0 et 1. \"\"\"bksl-nl rouge = random.random()bksl-nl vert = random.random()bksl-nl bleu = random.random()bksl-nl return rouge, vert, bleubksl-nlbksl-nlr, g, b = g\u00c3\u00a9n\u00c3\u00a9rerpy-undcouleurpy-undRGB()bksl-nlprint(r, g, b)bksl-nl Il est \u00e9galement possible de mettre plusieurs return dans une seule fonction. Dans ce cas, return est comme un si\u00e8ge \u00e9jectable : d\u00e8s que le programme voit une instruction commen\u00e7ant par return , la fonction s'arr\u00eate ! Exemple Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder phrase = \"Turning and turning in the widening gyre\"bksl-nlbksl-nldef trouverpy-undlettre(lettre, texte):bksl-nl \"\"\" Renvoie True si une lettre appara\u00c3\u00aetbksl-nl dans un texte \"\"\"bksl-nl for caract\u00c3\u00a8re in texte:bksl-nl print(caract\u00c3\u00a8re, lettre, caract\u00c3\u00a8re == lettre)bksl-nl if caract\u00c3\u00a8re == lettre:bksl-nl return True # la boucle s'arr\u00c3\u00aate !bksl-nl return Falsebksl-nlbksl-nlr\u00c3\u00a9ponse = trouverpy-undlettre(\"a\", phrase)bksl-nlprint(\"Trouv\u00c3\u00a9 ? \", r\u00c3\u00a9ponse)bksl-nl texte est tr\u00e8s diff\u00e9rent de phrase . En effet, texte et lettre sont les param\u00e8tres de la fonction, comme le \\(x\\) de \\(f(x)\\) en Maths. \"a\" et phrase (ligne 12) sont les arguments de la fonction, comme \\(2\\) de \\(f(2)\\) en Maths. Ce sont eux qui vont \u00eatre analys\u00e9s par la fonction. Finalement, caract\u00e8re est une simple variable de boucle qui n'existe que dans la fonction. Danger mortel N'oubliez pas le return ! Si vous n'utilisez que des print , vous ne fa\u00eetes que de l'affichage : les r\u00e9sultats de ces fonctions ne pourront en aucun cas \u00eatre r\u00e9utilis\u00e9s dans un autre calcul ! Exercices sur return Exercice 15 Exercice 16 Exercice 17 Exercice 18 On propose ci-dessous la fonction trouver_pair qui prend pour param\u00e8tre un tableau d'entiers et qui renvoie le bool\u00e9en True si un entier pair est pr\u00e9sent dans le tableau ; le bool\u00e9en False sinon. Ex\u00e9cuter le code ; Dans la console, appeler la fonction trouver_pair sur les tableaux [ 1 , 3 , 5 ] , [ 8 , 4 , 10 ] et [ 5 , 20 , 5 ] . Que fais r\u00e9ellement cette fonction ? Corriger la fonction pour obtenir le comportement attendu. Lancer b1 = (\"trouverpy-undpair([8, 2, 4]) == True\", \"trouverpy-undpair([7, 5, 1]) == False\", \"trouverpy-undpair([3, 10, 20, 50]) == True\")bksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def trouverpy-undpair(tableau):bksl-nl for entier in tableau:bksl-nl if entier % 2 == 0:bksl-nl return Truebksl-nl else:bksl-nl return Falsebksl-nlbksl-nltrouv\u00c3\u00a9 = trouverpy-undpair([4, 10, 20])bksl-nlprint(trouv\u00c3\u00a9) bksl-nl def trouverpy-undpair(tableau):bksl-nl for entier in tableau:bksl-nl if entier % 2 == 0:bksl-nl return Truebksl-nl return Falsebksl-nlbksl-nl \u00c9crire une fonction trouver_r\u00e9p\u00e9tition qui prend pour param\u00e8tre une cha\u00eene de caract\u00e8res lettre et une cha\u00eene de caract\u00e8res texte . Cette fonction renvoie : le bool\u00e9en True d\u00e8s que la lettre lettre est r\u00e9p\u00e9t\u00e9e plus d'une fois ; le bool\u00e9en False sinon. Ex\u00e9cuter le code ; Dans la console, \u00e0 l'aide de la fonction trouver_r\u00e9p\u00e9tition , v\u00e9rifier si la lettre \"A\" est r\u00e9p\u00e9t\u00e9e dans la cha\u00eene d'ADN \"ACCACGAC\", v\u00e9rifier \u00e9galement que la lettre \"G\" n'est pas r\u00e9p\u00e9t\u00e9e et que la lettre \"T\" n'est pas r\u00e9p\u00e9t\u00e9e. Aide Pensez \u00e0 l'arr\u00eat anticip\u00e9 d'une boucle \u00e0 l'aide d'un return . Lancer b1 = (\"trouverpy-undr\u00c3\u00a9p\u00c3\u00a9tition('A', 'AAA') == True\", \"trouverpy-undr\u00c3\u00a9p\u00c3\u00a9tition('B', 'AAA') == False\", \"trouverpy-undr\u00c3\u00a9p\u00c3\u00a9tition('A', 'ABB') == False\",)bksl-nlbenchmark = (b1, )bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def trouverpy-undr\u00c3\u00a9p\u00c3\u00a9tition(lettre, texte):bksl-nl passbksl-nlbksl-nladn = \"ACCACGAC\"bksl-nlprint(trouverpy-undr\u00c3\u00a9p\u00c3\u00a9tition(\"A\", adn))bksl-nlbksl-nl def trouverpy-undr\u00c3\u00a9p\u00c3\u00a9tition(lettre, texte):bksl-nl compteurpy-undlettre = 0bksl-nl for caract\u00c3\u00a8re in texte:bksl-nl if lettre == caract\u00c3\u00a8re:bksl-nl compteurpy-undlettre = compteurpy-undlettre + 1bksl-nl if compteurpy-undlettre > 1:bksl-nl return Truebksl-nl # fin de la boucle. On n'a pas trouv\u00c3\u00a9 deux occurrences.bksl-nl return Falsebksl-nlbksl-nladn = \"ACCACGAC\"bksl-nlprint(trouverpy-undr\u00c3\u00a9p\u00c3\u00a9tition(\"A\", adn))bksl-nl \u00c9crire une fonction translater qui prend pour param\u00e8tre deux entiers vec_x et vec_y (coordonn\u00e9es d'un vecteur) et deux entiers a et b permettant de r\u00e9aliser une translation de vecteur \\((\\vec a, \\vec b)\\) . Cette fonction renvoie donc deux entiers r\u00e9sultant de la somme des abscisses et de la somme des ordonn\u00e9es. Aide Pensez \u00e0 la syntaxe valeur1 , valeur2 . Lancer b1 = (\"translater(0, 0, 0, 0) == (0, 0)\", \"translater(1, 1, 0, 0) == (1, 1)\", \"translater(1, 2, 10, 0) == (10, 2)\", \"translater(1, 2, 10, 9) == (11, 11)\")bksl-nlbenchmark = (b1, )bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def translater(vecpy-undx, vecpy-undy, a, b):bksl-nl passbksl-nlbksl-nlvpy-undx, vpy-undy = 2, 3bksl-nltpy-undx, tpy-undy = 1, 0bksl-nlprint(translater(vpy-undx, vpy-undy, tpy-undx, tpy-undy))bksl-nl def translater(vecpy-undx, vecpy-undy, a, b):bksl-nl nouveaupy-undvecpy-undx = vecpy-undx + abksl-nl nouveaupy-undvecpy-undy = vecpy-undy + bbksl-nl return nouveaupy-undvecpy-undx, nouveaupy-undvecpy-undybksl-nlbksl-nlvpy-undx, vpy-undy = 2, 3bksl-nltpy-undx, tpy-undy = 1, 0bksl-nlprint(translater(vpy-undx, vpy-undy, tpy-undx, tpy-undy))bksl-nl \u00c9crire une fonction g\u00e9n\u00e9rer qui prend pour param\u00e8tre un entier nombre_bit . Cette fonction g\u00e9n\u00e8re al\u00e9atoirement un nombre binaire de nombre_bit bits, sous forme de cha\u00eene de caract\u00e8res. On utilisera un accumulateur et on utilisera str ( random . randint ( 0 , 1 )) pour g\u00e9n\u00e9rer des bits al\u00e9atoires sous forme de cha\u00eene de caract\u00e8res. \u00c9crire une fonction d\u00e9coder qui prend pour param\u00e8tre un nombre binaire nombre_binaire \u00e9crit sous forme d'une cha\u00eene de caract\u00e8res. Cette fonction compte le nombre de 0 et le nombre 1 et renvoie quel bit appara\u00eet le plus grand nombre de fois ainsi que le nombre d'apparitions. Aide 1 On veut ajouter un nouveau bit \u00e0 l'accumulateur un nombre exact de fois. Utilisez une boucle inconditionnelle. Aide 2 Pensez \u00e0 la syntaxe valeur1 , valeur2 . Lancer b1 = (\"d\u00c3\u00a9coder('00000') == ('0', 5)\", \"d\u00c3\u00a9coder('01110') == ('1', 3)\", \"d\u00c3\u00a9coder('01010') == ('0', 3)\", \"d\u00c3\u00a9coder('0') == ('0', 1)\")bksl-nlbenchmark = (b1, )bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import randombksl-nlbksl-nldef g\u00c3\u00a9n\u00c3\u00a9rer(nombrepy-undbit):bksl-nl accumulateur = \"\"bksl-nl str(random.randint(0,1))bksl-nl passbksl-nlbksl-nldef d\u00c3\u00a9coder(nombrepy-undbinaire):bksl-nl compteurpy-und0 = 0bksl-nl compteurpy-und1 = 0 bksl-nl passbksl-nl import randombksl-nlbksl-nldef g\u00c3\u00a9n\u00c3\u00a9rer(nombrepy-undbit):bksl-nl accumulateur = \"\"bksl-nl for py-und in range(nombrepy-undbit):bksl-nl accumulateur = accumulateur + str(random.randint(0,1))bksl-nl return accumulateurbksl-nlbksl-nldef d\u00c3\u00a9coder(nombrepy-undbinaire):bksl-nl compteurpy-und0 = 0bksl-nl compteurpy-und1 = 0 bksl-nl for bit in nombrepy-undbinaire:bksl-nl if bit == '0':bksl-nl compteurpy-und0 = compteurpy-und0 + 1bksl-nl else:bksl-nl compteurpy-und1 = compteurpy-und1 + 1bksl-nl if compteurpy-und1 > compteurpy-und0:bksl-nl return '1', compteurpy-und1bksl-nl else:bksl-nl return '0', compteurpy-und0bksl-nl","title":"Utilisation de return"},{"location":"python4/#variables-locales-et-globales","text":"Cours On appelle port\u00e9e d'une variable l'ensemble des endroits du programme o\u00f9 elle existe. En th\u00e9orie, il est possible d'acc\u00e9der \u00e0 des variables ext\u00e9rieures \u00e0 une fonction. Toutefois, pour simplifier notre travail, nous utiliserons des param\u00e8tres pour acc\u00e9der \u00e0 ces variables. Cela \u00e9vite les effets de bord consistant \u00e0 modifier des variables de mani\u00e8re inattendue. Pour aller plus loin G\u00e9n\u00e9ralement, le langage de programmation cherche les variables en fonction de leur port\u00e9e. Ainsi, si une variable appel\u00e9e dans une fonction n'y appara\u00eet pas, Python va chercher si cette variable appara\u00eet dans une fonction englobante. Si cette variable n'y appara\u00eet pas non plus, Python va chercher si cette variable appara\u00eet dans le programme principal. Si la variable est toujours absente, Python va rechercher si cette variable est une variable Python par d\u00e9faut. Exercices sur port\u00e9e des variables Exercice 19 Exercice 20 Exercice 21 On dispose d'une fonction g\u00e9n\u00e9rer_tableau_entiers . Ex\u00e9cuter le code et dire ce que permet de faire cette fonction ; Modifier le programme afin d'afficher un tableau de 15 nombres al\u00e9atoires entre -5 et 5 ; Modifier le programme afin d'afficher deux tableaux : l'un compos\u00e9 de 10 nombres al\u00e9atoires entre -5 et 5 et l'autre de 20 nombres al\u00e9atoires entre -5 et 5 ; Ajouter un param\u00e8tre \u00e0 la fonction afin de simplifier la r\u00e9ponse \u00e0 la question pr\u00e9c\u00e9dente. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import randombksl-nlbksl-nlnombre = 10bksl-nldef g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undentiers(entierpy-undmin, entierpy-undmax):bksl-nl tableau = [random.randint(entierpy-undmin,entierpy-undmax) for i in range(nombre)]bksl-nl return tableaubksl-nlbksl-nltableaupy-und1 = g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undentiers(-5, 5)bksl-nlprint(tableaupy-und1)bksl-nl import randombksl-nlbksl-nl# Cette fonction permet de g\u00c3\u00a9n\u00c3\u00a9rer al\u00c3\u00a9atoirement un tableau contenant un nombre bksl-nl# fix\u00c3\u00a9 d'entiers.bksl-nlbksl-nl# nombre doit devenir un param\u00c3\u00a8tre !bksl-nlbksl-nldef g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undentiers(entierpy-undmin, entierpy-undmax, nombre):bksl-nl tableau = [random.randint(entierpy-undmin,entierpy-undmax) for i in range(nombre)]bksl-nl return tableaubksl-nlbksl-nltableaupy-und1 = g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undentiers(-5, 5, 10)bksl-nltableaupy-und2 = g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undentiers(-5, 5, 20)bksl-nlprint(tableaupy-und1)bksl-nlprint(tableaupy-und2)bksl-nl On dispose de la fonction sum_adder permettant de calculer la somme (sans retenue) d'un additionneur complet 1 bit. a , b et c_0 valent soit 0, soit 1. Pensez-vous que ce code fonctionne ? Ex\u00e9cuter le code et v\u00e9rifier votre r\u00e9ponse \u00e0 la question 1 ; Pourquoi ce code est-il compliqu\u00e9 \u00e0 comprendre ? Corriger la fonction afin d'obtenir un comportement plus pr\u00e9visible. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder a = 0bksl-nlb = 0bksl-nldef sumpy-undadder(cpy-und0):bksl-nl return (cpy-und0 + a + b) % 2bksl-nlbksl-nla = 0bksl-nlb = 1bksl-nlsum = sumpy-undadder(0)bksl-nlprint(sum)bksl-nl # a = 0 inutilebksl-nl# b = 0 inutilebksl-nlbksl-nl# a et b deviennent des param\u00c3\u00a8tres.bksl-nldef sumpy-undadder(cpy-und0, a, b):bksl-nl return (cpy-und0 + a + b) % 2bksl-nlbksl-nl# initialisation des variablesbksl-nlbitpy-unda = 0bksl-nlbitpy-undb = 1bksl-nlretenue = 0bksl-nlbksl-nl# appel \u00c3 la fonction avec 3 param\u00c3\u00a8tresbksl-nlsum = sumpy-undadder(retenue, bitpy-unda, bitpy-undb)bksl-nlprint(sum)bksl-nl On dispose d'une fonction dessiner_polygone permettant d'ordonner \u00e0 une tortue tortue de dessiner un polygone de n_c\u00f4t\u00e9 de longueur L . Ex\u00e9cuter le code ; La tortue fred a-t-elle bien dessin\u00e9 un polygone \u00e0 six c\u00f4t\u00e9s, de longueur 40 ? Modifier la fonction afin de r\u00e9aliser cette figure. \u00c0 la suite de l'hexagone, on souhaite maintenant r\u00e9aliser un d\u00e9cagone de longueur 40 ainsi qu'un dod\u00e9cagone de longueur 40. Faire cela en rajoutant deux instruction avant fred . mainloop () . Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlbksl-nldef dessinerpy-undpolygone(tortue, npy-undc\u00c3\u00b4t\u00c3\u00a9, L):bksl-nl npy-undc\u00c3\u00b4t\u00c3\u00a9 = 10bksl-nl angle = 360 // npy-undc\u00c3\u00b4t\u00c3\u00a9bksl-nl for py-und in range(npy-undc\u00c3\u00b4t\u00c3\u00a9):bksl-nl fred.fd(50)bksl-nl fred.right(angle)bksl-nl return Nonebksl-nlbksl-nlfred = turtle.Turtle()bksl-nldessinerpy-undpolygone(fred, 6, 40)bksl-nlbksl-nlfred.mainloop()bksl-nl import turtlebksl-nlbksl-nldef dessinerpy-undpolygone(tortue, npy-undc\u00c3\u00b4t\u00c3\u00a9, L):bksl-nl angle = 360 // npy-undc\u00c3\u00b4t\u00c3\u00a9bksl-nl for py-und in range(npy-undc\u00c3\u00b4t\u00c3\u00a9):bksl-nl # attention ! On parle de la tortue en g\u00c3\u00a9n\u00c3\u00a9ral, pas seulement de fred.bksl-nl tortue.fd(L)bksl-nl tortue.right(angle)bksl-nl return Nonebksl-nlbksl-nlfred = turtle.Turtle()bksl-nldessinerpy-undpolygone(fred, 6, 40)bksl-nldessinerpy-undpolygone(fred, 10, 40)bksl-nldessinerpy-undpolygone(fred, 12, 40)bksl-nlfred.mainloop()bksl-nl","title":"Variables locales et globales"},{"location":"python4/#documentation-dune-fonction","text":"Cours Pour \u00e9crire un code facilement compr\u00e9hensible, nous avons jusqu'\u00e0 maintenant utilis\u00e9 le principe de de l'auto-documentation. On nomme toujours clairement nos variables et fonctions. Exemple Un code illisible Un code auto-document\u00e9 Difficile de savoir ce que fait ce programme... def f ( t ): m = - 1 for i in t : if i > m : m = i return m Beaucoup plus lisible ! def calculer_maximum ( tableau ): maximum_actuel = - 1 for nombre in tableau : if nombre > maximum_actuel : maximum_actuel = nombre return maximum_actuel Toutefois, il convient \u00e9galement de documenter les fonctions complexes que vous faites. Documenter permet d'expliquer aux personnes qui ne sont pas famili\u00e8res avec vos fonctions de les comprendre : que fait-elle ? de quels types sont les param\u00e8tres ? un petit exemple. Attention \u00e0 ne pas trop documenter ! Exemple Trop de documentation Documentation correcte Trop peu de documentation Incompr\u00e9hensible def calculer_carr\u00e9 ( x ): \"\"\"Calcule le carr\u00e9 d'un nombre Param\u00e8tres : x -- flottant ou entier Exemple : nombre = calculer_carr\u00e9(2.0) \"\"\" return x ** 2 def calculer_carr\u00e9 ( x ): \"\"\"Calcule le carr\u00e9 d'un nombre flottant ou entier\"\"\" return x ** 2 def f ( x ): return x ** 2 f = lambda m : ( lambda _ : pow ( _ , 1 ))( m ) * ( lambda u : u )( m ) Souvent... Vous allez \u00eatre la personne n\u00e9cessitant la documentation. Rien de plus frustrant que de revenir sur un de vos codes non document\u00e9 et de passer quelques heures \u00e0 retrouver comment il fonctionne. Exercice Exercice 22 L'auto-documentation de cette fonction semble suffisante. \u00c0 partir de cette auto-documentation, ajouter une documentation ad\u00e9quate. Lancer b1 = (\"d\u00c3\u00a9coder('00000') == ('0', 5)\", \"d\u00c3\u00a9coder('01110') == ('1', 3)\", \"d\u00c3\u00a9coder('01010') == ('0', 3)\", \"d\u00c3\u00a9coder('0') == ('0', 1)\")bksl-nlbenchmark = (b1, )bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def appartenirpy-unddisque(x, y, xpy-undc, ypy-undc, rayon):bksl-nl if (x - xpy-undc)py-strpy-str2 + (y - ypy-undc)py-strpy-str2 <= rayonpy-strpy-str2:bksl-nl return Truebksl-nl else:bksl-nl return Falsebksl-nlbksl-nlbksl-nl def appartenirpy-unddisque(x, y, xpy-undc, ypy-undc, rayon):bksl-nl \"\"\"bksl-nl bksl-nl \"\"\"bksl-nl if (x - xpy-undc)py-strpy-str2 + (y - ypy-undc)py-strpy-str2 <= rayonpy-strpy-str2:bksl-nl return Truebksl-nl else:bksl-nl return Falsebksl-nl","title":"Documentation d'une fonction"},{"location":"python4/#resume","text":"R\u00e9sum\u00e9 Dans ce chapitre, j'ai appris : l'int\u00e9r\u00eat des fonctions en programmation informatique ; \u00e0 \u00e9crire une fonction simple ; la diff\u00e9rence entre param\u00e8tres et arguments ; l'instruction return et ses subtilit\u00e9s ; \u00e0 documenter mes fonctions. Une anecdote En 1973, un robot est envoy\u00e9 sur la Lune pour collecter des donn\u00e9es. Celui-ci, une fois arriv\u00e9, affiche les donn\u00e9es sur son \u00e9cran avec l'\u00e9quivalent de print . Rien n'a \u00e9t\u00e9 renvoy\u00e9 sur Terre car l'\u00e9quivalent de return n'a pas \u00e9t\u00e9 utilis\u00e9 ! En g\u00e9n\u00e9ral, on souhaite faire quelque chose de nos donn\u00e9es, pas les afficher.","title":"R\u00e9sum\u00e9"},{"location":"python5/","text":"Tableaux et tuples \u2693\ufe0e Principe \u2693\ufe0e De nos jours, l'informatique a pour but de collecter et de manipuler des donn\u00e9es. Ces donn\u00e9es, en nombre tr\u00e8s important, doivent pouvoir \u00eatre organis\u00e9es dans des structures composites, faciles d'utilisation. Exemple Temp\u00e9rature Mois Temp. Jan. 27 F\u00e9v. 28 Mars 29 Avril 27 Mai 27 Juin 25 Juil. 24 Ao\u00fbt 25 Sept. 25 Oct. 26 Nov. 26 D\u00e9c. 28 On mesure la temp\u00e9rature chaque mois de 2020 dans une \u00eele du Pacifique et on l'organise dans un tableau. On souhaite ensuite utiliser ces donn\u00e9es en Python. Une premi\u00e8re solution est de cr\u00e9er 12 variables pour les 12 mois de l'ann\u00e9e : temp_01 = 27 temp_02 = 28 temp_03 = 29 temp_04 = 27 temp_05 = 27 temp_06 = 25 temp_07 = 24 temp_08 = 25 temp_09 = 25 temp_10 = 26 temp_11 = 26 temp_12 = 28 Cette m\u00e9thode ne respecte absolument pas le principe DRY . Et que va-t-il se passer si on souhaite maintenant comparer l'ann\u00e9e 2020 avec : l'ann\u00e9e 2019 ? On renomme nos variables temp_01_2020 et temp_01_2019 . Cela nous fait 24 variables \u00e0 g\u00e9rer. les ann\u00e9es 2019 et 2018 ? On renomme nos variables temp_01_2020 , temp_01_2019 et temp_01_2018 . Cela nous fait 36 variables \u00e0 g\u00e9rer. les 50 derni\u00e8res ann\u00e9es ? On part \u00e0 la p\u00eache. \u00c7a devient ing\u00e9rable. Plut\u00f4t que d'envisager chacune de ces donn\u00e9es comme repr\u00e9sent\u00e9e par une unique variable, nous allons consid\u00e9rer le tableau complet comme une variable 1 . Cr\u00e9ation d'un tableau \u2693\ufe0e Un tableau est une structure de donn\u00e9es qui contient un ensemble de valeurs. Sch\u00e9matiquement, il existe deux types de tableaux : les tableaux statiques dont la taille est fix\u00e9e ; les tableaux dynamiques dont la taille est variable. Cours Pour cr\u00e9er un tableau de valeurs, on \u00e9crit entre crochets chaque valeur, s\u00e9par\u00e9e par des virgules. Par exemple : tableau_lettre = [ 'a' , 'b' , 'c' , 'd' , 'e' ] tableau_entier = [ 3 , 5 , 2 , 56 , 12 ] Exercices d'application directe Exercice 1 Exercice 2 Dans le terminal ci-dessous, cr\u00e9er un tableau tableau_gateau contenant les trois ingr\u00e9dients n\u00e9cessaires \u00e0 la r\u00e9alisation d'un bon gateau ( \"farine\" , \"sucre\" , \"lait\" ). Solution tableau_gateau = [ \"farine\" , \"sucre\" , \"lait\" ] Dans le terminal ci-dessous, cr\u00e9er un tableau tableau_impair contenant les 5 premiers nombres impairs. Solution tableau_entier = [ 1 , 3 , 5 , 7 , 9 ] >>> Cours La m\u00e9thode ci-dessus n'est pas id\u00e9al lorsque l'on souhaite cr\u00e9er des tableaux de grande taille. Il existe alors deux m\u00e9thodes : Initialisation rapide Initialisation en compr\u00e9hension On initialise rapidement un tableau \u00e0 l'aide de l'instruction \u00e9toile * qui permet de dupliquer un \u00e9l\u00e9ment un nombre fix\u00e9 de fois. Exemple (\u00e0 essayer dans le terminal): tableau_de_1 = [ 1 ] * 50 tableau_de_1 = [ \"a\" ] * 40 On initialise de mani\u00e8re pr\u00e9cise un tableau \u00e0 l'aide d'une initialisation en compr\u00e9hension. Dans ce cas, on indique quelle est la forme g\u00e9n\u00e9rale de l'\u00e9l\u00e9ment du tableau et on utilise une boucle for \u00e0 l'int\u00e9rieur des crochets. Exemple On veut g\u00e9n\u00e9rer un tableau contenant 10 nombres pairs. Les nombres pairs sont de la forme \\(2\\times n\\) . tableau_de_pairs = [ 2 * n for n in range ( 10 )] 2 * n est la forme g\u00e9n\u00e9rale. >>> Exercices d'application directe Exercice 3 Exercice 4 Exercice 5 Exercice 6 Dans l'IDE ci-dessous, cr\u00e9er un tableau tableau_de_0 contenant 1000 fois le nombre 0 puis, l'afficher avec l'instruction print . Solution tableau_gateau = [ 0 ] * 1000 Dans l'IDE ci-dessous, cr\u00e9er un tableau tableau_de_a contenant 25 fois le caract\u00e8re \"a\" puis, l'afficher avec l'instruction print . Dans l'IDE ci-dessous, cr\u00e9er un tableau tableau_impairs contenant les 25 premiers nombres impairs. Afficher ce tableau. Aide Les nombres impairs sont de la forme \\(2\\times n+1\\) . Dans l'IDE ci-dessous, cr\u00e9er un tableau tableau_carr\u00e9 contenant les 100 premiers nombres carr\u00e9s. Afficher ce tableau. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder Parcours d'un tableau \u2693\ufe0e Un tableau est utile dans la mesure o\u00f9 nous pouvons acc\u00e9der aux \u00e9l\u00e9ments un par un. Nous utiliserons ces \u00e9l\u00e9ments pour calculer quelque chose (moyenner des notes, s\u00e9lectionner des donn\u00e9es, g\u00e9n\u00e9rer des phrases al\u00e9atoires...) ou pour les modifier (cours de bourse, modification de notes...). Acc\u00e8s \u00e0 un \u00e9l\u00e9ment du tableau \u2693\ufe0e Cours Important On appelle taille d'un tableau son nombre d'\u00e9l\u00e9ments. La taille d'un tableau T est obtenu avec l'instruction len ( T ) . Chaque \u00e9l\u00e9ment d'un tableau est rep\u00e9r\u00e9 par un indice commen\u00e7ant \u00e0 0 et terminant donc \u00e0 len ( T ) - 1 Exemple Prenons le tableau T = [ 'b' , 'l' , 'a' , 'c' , 'k' ] . On peut repr\u00e9senter ce tableau Python dans un tableau : indice 0 1 2 3 4 tableau 'b' 'l' 'a' 'c' 'k' lettre T [ 0 ] T [ 1 ] T [ 2 ] T [ 3 ] T [ 4 ] ou T [ len ( T ) - 1 ] Pour acc\u00e9der \u00e0 la lettre d'indice 0 , on va donc \u00e9crire T [ 0 ] . Pour acc\u00e9der \u00e0 la lettre d'indice 1 , on va donc \u00e9crire T [ 1 ] . ... Pour acc\u00e9der \u00e0 la lettre d'indice i , on va donc \u00e9crire T [ i ] . ... Pour acc\u00e9der \u00e0 la derni\u00e8re lettre, on va donc \u00e9crire T [ len ( T ) - 1 ] , car len ( T ) - 1 est l'indice du dernier \u00e9l\u00e9ment. Parcours \u2693\ufe0e Cours Pour lire les \u00e9l\u00e9ments d'un tableau, on utilise toujours une boucle inconditionnelle for . Deux modes de lecture : Parcours par valeurs Parcours par indice Le parcours par valeurs est utile lorsque l'on souhaite utiliser les valeurs, ind\u00e9pendamment de leurs positions dans le tableau. Par exemple : Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder for lettre in ['a', 'b', 'c', 'd', 'e']:bksl-nl print(lettre)bksl-nl ou, initialisant le tableau avant la boucle : Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder tableau = ['a', 'b', 'c', 'd', 'e']bksl-nlbksl-nlfor lettre in tableau:bksl-nl print(lettre)bksl-nl Lorsque la position des \u00e9l\u00e9ments est importante, on r\u00e9alise un parcours par indice. On utilise une boucle for , avec un indice de boucle i allant de 0 jusqu'\u00e0 la len ( T ) exclus. Pour cela nous utiliserons la syntaxe : for i in range ( len ( T )): Par exemple : Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder tableau = ['a', 'b', 'c', 'd', 'e']bksl-nlbksl-nlfor i in range(len(tableau)):bksl-nl print(i, tableau[i])bksl-nl Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import random bksl-nljet\u00c3\u00a9py-und3py-undd\u00c3\u00a9s = [random.randint(1,6) for i in range(3)]bksl-nlbksl-nlfor i in range(len(jet\u00c3\u00a9py-und3py-undd\u00c3\u00a9s)):bksl-nl print(i, jet\u00c3\u00a9py-und3py-undd\u00c3\u00a9s[i])bksl-nl Exercices d'application directe Exercice 7 Exercice 8 Exercice 9 Exercice 10 Dans l'IDE ci-dessous, recopier le tableau suivant : animaux = [ \"girafe\" , \"tigre\" , \"singe\" , \"souris\" ] . En utilisant les bons indices, afficher \"tigre\" et \"souris\" . Solution animaux = [ \"girafe\" , \"tigre\" , \"singe\" , \"souris\" ] taille = len ( animaux ) print ( animaux [ 1 ]) print ( animaux [ 3 ]) # ou print(animaux[taille - 1]) Dans l'IDE ci-dessous, cr\u00e9er un tableau tableau_de_10 contenant 7 fois le nombre 10 puis, l'afficher, ligne par ligne , avec l'instruction print . On utilisera un parcours par valeurs. Solution tableau_de_10 = [ 10 ] * 7 for nombre in tableau_de_10 : print ( nombre ) Dans l'IDE ci-dessous: cr\u00e9er un tableau tableau_de_cubes contenant les 13 premiers cubes parfaits ( \\(0^3, 1^3, 2^3, 3^3\\) ...). cr\u00e9er une variable taille donnant le nombre d'\u00e9l\u00e9ments du tableau. afficher tous les \u00e9l\u00e9ments du tableau ligne par ligne en le parcourant par indice. On affichera \u00e9galement l'indice de l'\u00e9l\u00e9ment. Par exemple, avec le tableau [ 4 , 5 , 6 ] , on aura l'affichage : 0 4 1 5 2 6 Solution tableau_de_cubes = [ i ** 3 for i in range ( 13 )] taille = len ( tableau_de_cubes ) for i in range ( taille ) print ( i , tableau_de_cubes [ i ]) Dans l'IDE ci-dessous: cr\u00e9er une variable alphabet de \"a\" \u00e0 \"z\" contenant toutes les lettres de l'alphabet. Cr\u00e9er un tableau tableau_alpha contenant chaque lettre de l'alphabet doubl\u00e9. Exemple : tableau_alpha = [ 'aa' , 'bb' , 'cc' ... ] . cr\u00e9er une variable taille donnant le nombre d'\u00e9l\u00e9ments du tableau. afficher ensuite ligne par ligne chaque \u00e9l\u00e9ment de votre tableau en indiquent son indice. Aide 1 alphabet = \"abcdef...\" puis faire une cr\u00e9ation de tableau en compr\u00e9hension avec une boucle for parcourant alphabet ! Aide 2 Pour \u00e9crire une lettre deux fois, on doit la multiplier par 2 ! Solution alphabet = \"abcdefghijklmnopqrstuvwxyz\" tableau_alpha = [ lettre * 2 for lettre in alphabet ] taille = len ( tableau_alpha ) for i in range ( taille ) print ( i , tableau_alpha [ i ]) Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder Exercice 11 Nous allons essayer de trouver l'indice de l'\u00e9l\u00e9ment maximum d'un tableau de nombres T . L'exercice consiste \u00e0 \u00e9crire en Python l'algorithme ci-dessous en utilisant ce que vous avez appris sur les tableaux. On \u00e9crira cet algorithme dans la fonction trouver_maximum . Cr\u00e9er une variable maximum et l'initialiser \u00e0 l'\u00e9l\u00e9ment n\u00b0 0 de T . Cette variable repr\u00e9sente la valeur du maximum. Cr\u00e9er une variable indice_maximum et l'initialiser \u00e0 0. Cette variable repr\u00e9sente l'indice du maximum. On parcourt par indice tous les \u00e9l\u00e9ments de T : Si l'\u00e9l\u00e9ment num\u00e9ro i de T est plus grand que maximum : maximum prend la valeur de l'\u00e9l\u00e9ment num\u00e9ro i de T . indice_maximum prend la valeur de l'indice i. Sinon, on ne fait rien. On renvoie indice_maximum . L'appel \u00e0 un tableau vous est donn\u00e9. Que devez-vous \u00e9crire pour trouver la valeur du maximum une fois son indice obtenu ? Lancer b1 = (\"trouverpy-undmaximum([1]) == 0\", \"trouverpy-undmaximum([10, 3, 1 ]) == 0\", \"trouverpy-undmaximum([9, 12, 21, 7]) == 2\",)bksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def trouverpy-undmaximum(T):bksl-nl passbksl-nlbksl-nlbksl-nltableau = [4, 5, 3, 9, 12, 5, 3, 1]bksl-nlindicepy-undmax = trouverpy-undmaximum(tableau)bksl-nlprint(indicepy-undmax)bksl-nlbksl-nlbksl-nl def trouverpy-undmaximum(T):bksl-nl maximum = T[0]bksl-nl indicepy-undmaximum = 0bksl-nl for i in range(len(T)):bksl-nl if T[i] > maximum:bksl-nl maximum = T[i]bksl-nl indicepy-undmaximum = ibksl-nl return indicepy-undmaximumbksl-nlbksl-nltableau = [4, 5, 3, 9, 12, 5, 3, 1]bksl-nlindicepy-undmax = trouverpy-undmaximum(tableau)bksl-nlprint(indicepy-undmax)bksl-nl Exercice 12 Faire la m\u00eame chose que l'exercice pr\u00e9c\u00e9dent mais cette fois-ci, on ne s'int\u00e9resse qu'\u00e0 la valeur du maximum. Peut-on retrouver l'indice du maximum ? Lancer b1 = (\"trouverpy-undmaximum([1]) == 1\", \"trouverpy-undmaximum([10, 3, 1 ]) == 10\", \"trouverpy-undmaximum([9, 12, 21, 7]) == 21\",)bksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def trouverpy-undmaximum(T):bksl-nl passbksl-nlbksl-nltableau = [4, 5, 3, 9, 12, 5, 3, 1]bksl-nlmaximum = trouverpy-undmaximum(tableau)bksl-nlprint(maximum)bksl-nlbksl-nl def trouverpy-undmaximum(T):bksl-nl maximum = T[0]bksl-nl for \u00c3\u00a9l\u00c3\u00a9ment in T:bksl-nl if \u00c3\u00a9l\u00c3\u00a9ment > maximum:bksl-nl maximum = \u00c3\u00a9l\u00c3\u00a9mentbksl-nl return maximumbksl-nlbksl-nltableau = [4, 5, 3, 9, 12, 5, 3, 1]bksl-nlmaximum = trouverpy-undmaximum(tableau)bksl-nlprint(maximum)bksl-nl Modification d'un tableau \u2693\ufe0e Une partie en TP la semaine prochaine : \u00e0 venir Conclusion \u2693\ufe0e Souvenez-vous : lorsque le principe DRY n'est plus respect\u00e9, il faut souvent cr\u00e9er ou faire appel \u00e0 de nouvelles structures. \u21a9","title":"Tableaux et tuples"},{"location":"python5/#tableaux-et-tuples","text":"","title":"Tableaux et tuples"},{"location":"python5/#principe","text":"De nos jours, l'informatique a pour but de collecter et de manipuler des donn\u00e9es. Ces donn\u00e9es, en nombre tr\u00e8s important, doivent pouvoir \u00eatre organis\u00e9es dans des structures composites, faciles d'utilisation. Exemple Temp\u00e9rature Mois Temp. Jan. 27 F\u00e9v. 28 Mars 29 Avril 27 Mai 27 Juin 25 Juil. 24 Ao\u00fbt 25 Sept. 25 Oct. 26 Nov. 26 D\u00e9c. 28 On mesure la temp\u00e9rature chaque mois de 2020 dans une \u00eele du Pacifique et on l'organise dans un tableau. On souhaite ensuite utiliser ces donn\u00e9es en Python. Une premi\u00e8re solution est de cr\u00e9er 12 variables pour les 12 mois de l'ann\u00e9e : temp_01 = 27 temp_02 = 28 temp_03 = 29 temp_04 = 27 temp_05 = 27 temp_06 = 25 temp_07 = 24 temp_08 = 25 temp_09 = 25 temp_10 = 26 temp_11 = 26 temp_12 = 28 Cette m\u00e9thode ne respecte absolument pas le principe DRY . Et que va-t-il se passer si on souhaite maintenant comparer l'ann\u00e9e 2020 avec : l'ann\u00e9e 2019 ? On renomme nos variables temp_01_2020 et temp_01_2019 . Cela nous fait 24 variables \u00e0 g\u00e9rer. les ann\u00e9es 2019 et 2018 ? On renomme nos variables temp_01_2020 , temp_01_2019 et temp_01_2018 . Cela nous fait 36 variables \u00e0 g\u00e9rer. les 50 derni\u00e8res ann\u00e9es ? On part \u00e0 la p\u00eache. \u00c7a devient ing\u00e9rable. Plut\u00f4t que d'envisager chacune de ces donn\u00e9es comme repr\u00e9sent\u00e9e par une unique variable, nous allons consid\u00e9rer le tableau complet comme une variable 1 .","title":"Principe"},{"location":"python5/#creation-dun-tableau","text":"Un tableau est une structure de donn\u00e9es qui contient un ensemble de valeurs. Sch\u00e9matiquement, il existe deux types de tableaux : les tableaux statiques dont la taille est fix\u00e9e ; les tableaux dynamiques dont la taille est variable. Cours Pour cr\u00e9er un tableau de valeurs, on \u00e9crit entre crochets chaque valeur, s\u00e9par\u00e9e par des virgules. Par exemple : tableau_lettre = [ 'a' , 'b' , 'c' , 'd' , 'e' ] tableau_entier = [ 3 , 5 , 2 , 56 , 12 ] Exercices d'application directe Exercice 1 Exercice 2 Dans le terminal ci-dessous, cr\u00e9er un tableau tableau_gateau contenant les trois ingr\u00e9dients n\u00e9cessaires \u00e0 la r\u00e9alisation d'un bon gateau ( \"farine\" , \"sucre\" , \"lait\" ). Solution tableau_gateau = [ \"farine\" , \"sucre\" , \"lait\" ] Dans le terminal ci-dessous, cr\u00e9er un tableau tableau_impair contenant les 5 premiers nombres impairs. Solution tableau_entier = [ 1 , 3 , 5 , 7 , 9 ] >>> Cours La m\u00e9thode ci-dessus n'est pas id\u00e9al lorsque l'on souhaite cr\u00e9er des tableaux de grande taille. Il existe alors deux m\u00e9thodes : Initialisation rapide Initialisation en compr\u00e9hension On initialise rapidement un tableau \u00e0 l'aide de l'instruction \u00e9toile * qui permet de dupliquer un \u00e9l\u00e9ment un nombre fix\u00e9 de fois. Exemple (\u00e0 essayer dans le terminal): tableau_de_1 = [ 1 ] * 50 tableau_de_1 = [ \"a\" ] * 40 On initialise de mani\u00e8re pr\u00e9cise un tableau \u00e0 l'aide d'une initialisation en compr\u00e9hension. Dans ce cas, on indique quelle est la forme g\u00e9n\u00e9rale de l'\u00e9l\u00e9ment du tableau et on utilise une boucle for \u00e0 l'int\u00e9rieur des crochets. Exemple On veut g\u00e9n\u00e9rer un tableau contenant 10 nombres pairs. Les nombres pairs sont de la forme \\(2\\times n\\) . tableau_de_pairs = [ 2 * n for n in range ( 10 )] 2 * n est la forme g\u00e9n\u00e9rale. >>> Exercices d'application directe Exercice 3 Exercice 4 Exercice 5 Exercice 6 Dans l'IDE ci-dessous, cr\u00e9er un tableau tableau_de_0 contenant 1000 fois le nombre 0 puis, l'afficher avec l'instruction print . Solution tableau_gateau = [ 0 ] * 1000 Dans l'IDE ci-dessous, cr\u00e9er un tableau tableau_de_a contenant 25 fois le caract\u00e8re \"a\" puis, l'afficher avec l'instruction print . Dans l'IDE ci-dessous, cr\u00e9er un tableau tableau_impairs contenant les 25 premiers nombres impairs. Afficher ce tableau. Aide Les nombres impairs sont de la forme \\(2\\times n+1\\) . Dans l'IDE ci-dessous, cr\u00e9er un tableau tableau_carr\u00e9 contenant les 100 premiers nombres carr\u00e9s. Afficher ce tableau. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder","title":"Cr\u00e9ation d'un tableau"},{"location":"python5/#parcours-dun-tableau","text":"Un tableau est utile dans la mesure o\u00f9 nous pouvons acc\u00e9der aux \u00e9l\u00e9ments un par un. Nous utiliserons ces \u00e9l\u00e9ments pour calculer quelque chose (moyenner des notes, s\u00e9lectionner des donn\u00e9es, g\u00e9n\u00e9rer des phrases al\u00e9atoires...) ou pour les modifier (cours de bourse, modification de notes...).","title":"Parcours d'un tableau"},{"location":"python5/#acces-a-un-element-du-tableau","text":"Cours Important On appelle taille d'un tableau son nombre d'\u00e9l\u00e9ments. La taille d'un tableau T est obtenu avec l'instruction len ( T ) . Chaque \u00e9l\u00e9ment d'un tableau est rep\u00e9r\u00e9 par un indice commen\u00e7ant \u00e0 0 et terminant donc \u00e0 len ( T ) - 1 Exemple Prenons le tableau T = [ 'b' , 'l' , 'a' , 'c' , 'k' ] . On peut repr\u00e9senter ce tableau Python dans un tableau : indice 0 1 2 3 4 tableau 'b' 'l' 'a' 'c' 'k' lettre T [ 0 ] T [ 1 ] T [ 2 ] T [ 3 ] T [ 4 ] ou T [ len ( T ) - 1 ] Pour acc\u00e9der \u00e0 la lettre d'indice 0 , on va donc \u00e9crire T [ 0 ] . Pour acc\u00e9der \u00e0 la lettre d'indice 1 , on va donc \u00e9crire T [ 1 ] . ... Pour acc\u00e9der \u00e0 la lettre d'indice i , on va donc \u00e9crire T [ i ] . ... Pour acc\u00e9der \u00e0 la derni\u00e8re lettre, on va donc \u00e9crire T [ len ( T ) - 1 ] , car len ( T ) - 1 est l'indice du dernier \u00e9l\u00e9ment.","title":"Acc\u00e8s \u00e0 un \u00e9l\u00e9ment du tableau"},{"location":"python5/#parcours","text":"Cours Pour lire les \u00e9l\u00e9ments d'un tableau, on utilise toujours une boucle inconditionnelle for . Deux modes de lecture : Parcours par valeurs Parcours par indice Le parcours par valeurs est utile lorsque l'on souhaite utiliser les valeurs, ind\u00e9pendamment de leurs positions dans le tableau. Par exemple : Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder for lettre in ['a', 'b', 'c', 'd', 'e']:bksl-nl print(lettre)bksl-nl ou, initialisant le tableau avant la boucle : Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder tableau = ['a', 'b', 'c', 'd', 'e']bksl-nlbksl-nlfor lettre in tableau:bksl-nl print(lettre)bksl-nl Lorsque la position des \u00e9l\u00e9ments est importante, on r\u00e9alise un parcours par indice. On utilise une boucle for , avec un indice de boucle i allant de 0 jusqu'\u00e0 la len ( T ) exclus. Pour cela nous utiliserons la syntaxe : for i in range ( len ( T )): Par exemple : Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder tableau = ['a', 'b', 'c', 'd', 'e']bksl-nlbksl-nlfor i in range(len(tableau)):bksl-nl print(i, tableau[i])bksl-nl Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import random bksl-nljet\u00c3\u00a9py-und3py-undd\u00c3\u00a9s = [random.randint(1,6) for i in range(3)]bksl-nlbksl-nlfor i in range(len(jet\u00c3\u00a9py-und3py-undd\u00c3\u00a9s)):bksl-nl print(i, jet\u00c3\u00a9py-und3py-undd\u00c3\u00a9s[i])bksl-nl Exercices d'application directe Exercice 7 Exercice 8 Exercice 9 Exercice 10 Dans l'IDE ci-dessous, recopier le tableau suivant : animaux = [ \"girafe\" , \"tigre\" , \"singe\" , \"souris\" ] . En utilisant les bons indices, afficher \"tigre\" et \"souris\" . Solution animaux = [ \"girafe\" , \"tigre\" , \"singe\" , \"souris\" ] taille = len ( animaux ) print ( animaux [ 1 ]) print ( animaux [ 3 ]) # ou print(animaux[taille - 1]) Dans l'IDE ci-dessous, cr\u00e9er un tableau tableau_de_10 contenant 7 fois le nombre 10 puis, l'afficher, ligne par ligne , avec l'instruction print . On utilisera un parcours par valeurs. Solution tableau_de_10 = [ 10 ] * 7 for nombre in tableau_de_10 : print ( nombre ) Dans l'IDE ci-dessous: cr\u00e9er un tableau tableau_de_cubes contenant les 13 premiers cubes parfaits ( \\(0^3, 1^3, 2^3, 3^3\\) ...). cr\u00e9er une variable taille donnant le nombre d'\u00e9l\u00e9ments du tableau. afficher tous les \u00e9l\u00e9ments du tableau ligne par ligne en le parcourant par indice. On affichera \u00e9galement l'indice de l'\u00e9l\u00e9ment. Par exemple, avec le tableau [ 4 , 5 , 6 ] , on aura l'affichage : 0 4 1 5 2 6 Solution tableau_de_cubes = [ i ** 3 for i in range ( 13 )] taille = len ( tableau_de_cubes ) for i in range ( taille ) print ( i , tableau_de_cubes [ i ]) Dans l'IDE ci-dessous: cr\u00e9er une variable alphabet de \"a\" \u00e0 \"z\" contenant toutes les lettres de l'alphabet. Cr\u00e9er un tableau tableau_alpha contenant chaque lettre de l'alphabet doubl\u00e9. Exemple : tableau_alpha = [ 'aa' , 'bb' , 'cc' ... ] . cr\u00e9er une variable taille donnant le nombre d'\u00e9l\u00e9ments du tableau. afficher ensuite ligne par ligne chaque \u00e9l\u00e9ment de votre tableau en indiquent son indice. Aide 1 alphabet = \"abcdef...\" puis faire une cr\u00e9ation de tableau en compr\u00e9hension avec une boucle for parcourant alphabet ! Aide 2 Pour \u00e9crire une lettre deux fois, on doit la multiplier par 2 ! Solution alphabet = \"abcdefghijklmnopqrstuvwxyz\" tableau_alpha = [ lettre * 2 for lettre in alphabet ] taille = len ( tableau_alpha ) for i in range ( taille ) print ( i , tableau_alpha [ i ]) Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder Exercice 11 Nous allons essayer de trouver l'indice de l'\u00e9l\u00e9ment maximum d'un tableau de nombres T . L'exercice consiste \u00e0 \u00e9crire en Python l'algorithme ci-dessous en utilisant ce que vous avez appris sur les tableaux. On \u00e9crira cet algorithme dans la fonction trouver_maximum . Cr\u00e9er une variable maximum et l'initialiser \u00e0 l'\u00e9l\u00e9ment n\u00b0 0 de T . Cette variable repr\u00e9sente la valeur du maximum. Cr\u00e9er une variable indice_maximum et l'initialiser \u00e0 0. Cette variable repr\u00e9sente l'indice du maximum. On parcourt par indice tous les \u00e9l\u00e9ments de T : Si l'\u00e9l\u00e9ment num\u00e9ro i de T est plus grand que maximum : maximum prend la valeur de l'\u00e9l\u00e9ment num\u00e9ro i de T . indice_maximum prend la valeur de l'indice i. Sinon, on ne fait rien. On renvoie indice_maximum . L'appel \u00e0 un tableau vous est donn\u00e9. Que devez-vous \u00e9crire pour trouver la valeur du maximum une fois son indice obtenu ? Lancer b1 = (\"trouverpy-undmaximum([1]) == 0\", \"trouverpy-undmaximum([10, 3, 1 ]) == 0\", \"trouverpy-undmaximum([9, 12, 21, 7]) == 2\",)bksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def trouverpy-undmaximum(T):bksl-nl passbksl-nlbksl-nlbksl-nltableau = [4, 5, 3, 9, 12, 5, 3, 1]bksl-nlindicepy-undmax = trouverpy-undmaximum(tableau)bksl-nlprint(indicepy-undmax)bksl-nlbksl-nlbksl-nl def trouverpy-undmaximum(T):bksl-nl maximum = T[0]bksl-nl indicepy-undmaximum = 0bksl-nl for i in range(len(T)):bksl-nl if T[i] > maximum:bksl-nl maximum = T[i]bksl-nl indicepy-undmaximum = ibksl-nl return indicepy-undmaximumbksl-nlbksl-nltableau = [4, 5, 3, 9, 12, 5, 3, 1]bksl-nlindicepy-undmax = trouverpy-undmaximum(tableau)bksl-nlprint(indicepy-undmax)bksl-nl Exercice 12 Faire la m\u00eame chose que l'exercice pr\u00e9c\u00e9dent mais cette fois-ci, on ne s'int\u00e9resse qu'\u00e0 la valeur du maximum. Peut-on retrouver l'indice du maximum ? Lancer b1 = (\"trouverpy-undmaximum([1]) == 1\", \"trouverpy-undmaximum([10, 3, 1 ]) == 10\", \"trouverpy-undmaximum([9, 12, 21, 7]) == 21\",)bksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def trouverpy-undmaximum(T):bksl-nl passbksl-nlbksl-nltableau = [4, 5, 3, 9, 12, 5, 3, 1]bksl-nlmaximum = trouverpy-undmaximum(tableau)bksl-nlprint(maximum)bksl-nlbksl-nl def trouverpy-undmaximum(T):bksl-nl maximum = T[0]bksl-nl for \u00c3\u00a9l\u00c3\u00a9ment in T:bksl-nl if \u00c3\u00a9l\u00c3\u00a9ment > maximum:bksl-nl maximum = \u00c3\u00a9l\u00c3\u00a9mentbksl-nl return maximumbksl-nlbksl-nltableau = [4, 5, 3, 9, 12, 5, 3, 1]bksl-nlmaximum = trouverpy-undmaximum(tableau)bksl-nlprint(maximum)bksl-nl","title":"Parcours"},{"location":"python5/#modification-dun-tableau","text":"Une partie en TP la semaine prochaine : \u00e0 venir","title":"Modification d'un tableau"},{"location":"python5/#conclusion","text":"Souvenez-vous : lorsque le principe DRY n'est plus respect\u00e9, il faut souvent cr\u00e9er ou faire appel \u00e0 de nouvelles structures. \u21a9","title":"Conclusion"},{"location":"python6/","text":"Modularit\u00e9 \u2693\ufe0e Principe \u2693\ufe0e Pourquoi un vieux langage informatique comme C est-il toujours massivement utilis\u00e9 alors que COBOL a compl\u00e8tement disparu ? Pourquoi Python est-il devenu un langage si populaire ? Une des raisons est l'existence de modules , appel\u00e9s aussi librairies, biblioth\u00e8ques ou packages. Les modules sont des programmes qui contiennent des fonctions ou classes qu'un utilisateur est amen\u00e9 \u00e0 utiliser \u00e0 un moment donn\u00e9. On peut les voir comme des bo\u00eetes \u00e0 outils, permettant de faire des t\u00e2ches sans avoir besoin de les programmer soit-m\u00eame. Un avantage de Python est la quantit\u00e9 tr\u00e8s importante de modules disponibles dans la version standard. Et ne parlons pas des centaines de milliers de modules cr\u00e9\u00e9s par les utilisateurs de Python et simplifiant la vie de milliers d'utilisateurs 1 . Importation de modules \u2693\ufe0e Nous avons d\u00e9j\u00e0 rencontr\u00e9 les modules turtle , math et random dans les chapitres pr\u00e9c\u00e9dents. Passons en revue les m\u00e9thodes permettant d'importer un module. Charger un module \u2693\ufe0e Cours L'instruction import module donne acc\u00e8s \u00e0 toutes les \"variables\" et \"fonctions\" du module module . On appelle une fonction fonction du module module en \u00e9crivant : module . fonction ( param_1 , param_2 ... ) . param_1 , param_2 ... sont les param\u00e8tres de la fonction. Exemple import math math . pi # affiche la valeur de pi math . cos ( math . pi ) # affiche la valeur de cos(pi) Recopier ce code d'exemple dans le terminal ci-dessous. Les r\u00e9sultats sont-ils conformes \u00e0 vos attentes ? Ajouter le calcul du sinus \\(\\sin\\) de \\(\\dfrac{\\pi}{2}\\) . Ajouter le calcul de la racine carr\u00e9e (fonction sqrt ( ... ) de 3. >>> Cours Il est parfois fastidieux d'\u00e9crire syst\u00e9matiquement le nom du module. On peut alors faire appel \u00e0 un alias qui va remplacer le nom du module. L'instruction import module as md donne acc\u00e8s \u00e0 toutes les \"variables\" et \"fonctions\" du module module renomm\u00e9 par l'alias md . Exemple Avec alias Sans alias import matplotlib.pyplot as plt plt . figure ( 1 ) plt . plot ([ i / 2 for i in range ( 2 , 7 )], [ 5 , - 2 , - 5 , 1 , 3 ]) plt . show () import matplotlib.pyplot matplotlib . pyplot . figure ( 1 ) matplotlib . pyplot . plot ([ i / 2 for i in range ( 2 , 7 )], [ 5 , - 2 , - 5 , 1 , 3 ]) matplotlib . pyplot . show () Manipuler des modules Exercice 1 Importation de fonctions d'un module \u2693\ufe0e Cours Importation par wildcard Dans de rares cas, on souhaite utiliser l'int\u00e9gralit\u00e9 d'un module. Pour aller plus loin On peut afficher les m\u00e9thodes ou variables associ\u00e9es \u00e0 un programme \u00e0 l'aide de l'instruction dir () . Chercher les diff\u00e9rences entre les m\u00e9thodes accessibles lorsque vous recopiez dans le terminal le programme ci-dessous. dir (), len ( dir ()) import random dir (), len ( dir ()) from random import * dir (), len ( dir ()) >>> On remarque que seul le nom du module est charg\u00e9, pas le contenu. Cr\u00e9ation de modules \u2693\ufe0e >>> Assez rapidement, il deviendra int\u00e9ressant de cr\u00e9er vos propres modules afin de ne pas r\u00e9\u00e9crire constamment les m\u00eames programmes. ce site web va chercher une biblioth\u00e8que \u00e9crite par mes soins ici ! \u21a9","title":"Modularit\u00e9"},{"location":"python6/#modularite","text":"","title":"Modularit\u00e9"},{"location":"python6/#principe","text":"Pourquoi un vieux langage informatique comme C est-il toujours massivement utilis\u00e9 alors que COBOL a compl\u00e8tement disparu ? Pourquoi Python est-il devenu un langage si populaire ? Une des raisons est l'existence de modules , appel\u00e9s aussi librairies, biblioth\u00e8ques ou packages. Les modules sont des programmes qui contiennent des fonctions ou classes qu'un utilisateur est amen\u00e9 \u00e0 utiliser \u00e0 un moment donn\u00e9. On peut les voir comme des bo\u00eetes \u00e0 outils, permettant de faire des t\u00e2ches sans avoir besoin de les programmer soit-m\u00eame. Un avantage de Python est la quantit\u00e9 tr\u00e8s importante de modules disponibles dans la version standard. Et ne parlons pas des centaines de milliers de modules cr\u00e9\u00e9s par les utilisateurs de Python et simplifiant la vie de milliers d'utilisateurs 1 .","title":"Principe"},{"location":"python6/#importation-de-modules","text":"Nous avons d\u00e9j\u00e0 rencontr\u00e9 les modules turtle , math et random dans les chapitres pr\u00e9c\u00e9dents. Passons en revue les m\u00e9thodes permettant d'importer un module.","title":"Importation de modules"},{"location":"python6/#charger-un-module","text":"Cours L'instruction import module donne acc\u00e8s \u00e0 toutes les \"variables\" et \"fonctions\" du module module . On appelle une fonction fonction du module module en \u00e9crivant : module . fonction ( param_1 , param_2 ... ) . param_1 , param_2 ... sont les param\u00e8tres de la fonction. Exemple import math math . pi # affiche la valeur de pi math . cos ( math . pi ) # affiche la valeur de cos(pi) Recopier ce code d'exemple dans le terminal ci-dessous. Les r\u00e9sultats sont-ils conformes \u00e0 vos attentes ? Ajouter le calcul du sinus \\(\\sin\\) de \\(\\dfrac{\\pi}{2}\\) . Ajouter le calcul de la racine carr\u00e9e (fonction sqrt ( ... ) de 3. >>> Cours Il est parfois fastidieux d'\u00e9crire syst\u00e9matiquement le nom du module. On peut alors faire appel \u00e0 un alias qui va remplacer le nom du module. L'instruction import module as md donne acc\u00e8s \u00e0 toutes les \"variables\" et \"fonctions\" du module module renomm\u00e9 par l'alias md . Exemple Avec alias Sans alias import matplotlib.pyplot as plt plt . figure ( 1 ) plt . plot ([ i / 2 for i in range ( 2 , 7 )], [ 5 , - 2 , - 5 , 1 , 3 ]) plt . show () import matplotlib.pyplot matplotlib . pyplot . figure ( 1 ) matplotlib . pyplot . plot ([ i / 2 for i in range ( 2 , 7 )], [ 5 , - 2 , - 5 , 1 , 3 ]) matplotlib . pyplot . show () Manipuler des modules Exercice 1","title":"Charger un module"},{"location":"python6/#importation-de-fonctions-dun-module","text":"Cours Importation par wildcard Dans de rares cas, on souhaite utiliser l'int\u00e9gralit\u00e9 d'un module. Pour aller plus loin On peut afficher les m\u00e9thodes ou variables associ\u00e9es \u00e0 un programme \u00e0 l'aide de l'instruction dir () . Chercher les diff\u00e9rences entre les m\u00e9thodes accessibles lorsque vous recopiez dans le terminal le programme ci-dessous. dir (), len ( dir ()) import random dir (), len ( dir ()) from random import * dir (), len ( dir ()) >>> On remarque que seul le nom du module est charg\u00e9, pas le contenu.","title":"Importation de fonctions d'un module"},{"location":"python6/#creation-de-modules","text":">>> Assez rapidement, il deviendra int\u00e9ressant de cr\u00e9er vos propres modules afin de ne pas r\u00e9\u00e9crire constamment les m\u00eames programmes. ce site web va chercher une biblioth\u00e8que \u00e9crite par mes soins ici ! \u21a9","title":"Cr\u00e9ation de modules"},{"location":"python7/","text":"Dictionnaires \u2693\ufe0e Position du probl\u00e8me \u2693\ufe0e Un tableau Python poss\u00e8de une seule caract\u00e9ristique : la valeur port\u00e9e dans le tableau. On peut dire que cette valeur est en quelque sorte reli\u00e9e \u00e0 une position. Exemple Dans le tableau [ \"0626130029\" , \"0616248329\" , \"0601118218\" ] : \"0616248329\" est \u00e0 la position 1 ; \"0601118218\" \u00e0 la position 2. Toutefois, si maintenant je souhaite acc\u00e9der au nom des personnes associ\u00e9es \u00e0 ces num\u00e9ros de t\u00e9l\u00e9phone, c'est compliqu\u00e9. Il faudrait un deuxi\u00e8me tableau contenant des noms de personnes \u00e0 la m\u00eame position : [ \"Maman\" , \"Papa\" , \"M\u00e9dor\" ] . Dans un tableau, la position sert donc de cl\u00e9 primaire (pour dans l'exemple, fusionner deux tableaux). Premier contact \u2693\ufe0e Il y a beaucoup plus pratique : le dictionnaire . Comme dans un dictionnaire r\u00e9el, un dictionnaire Python est compos\u00e9 de deux champs : une cl\u00e9 ; une valeur . Exemple Tout de suite, un exemple : un_dico = { \"nom\" : \"LaTaupe\" , \"prenom\" : \"Ren\u00e9\" , \"naissance\" : 2009 } \u00e0 comparer avec : un_tableau = [ \"LaTaupe\" , \"Ren\u00e9\" , 2009 ] . >>> Cours Quelques g\u00e9n\u00e9ralit\u00e9s sur les dictionnaires : un dictionnaire se caract\u00e9rise par des accolades {} ; les cl\u00e9s sont d\u00e9finies avant les deux points. Les cl\u00e9s peuvent \u00eatre de n'importe quel type non mutable. la valeur associ\u00e9e \u00e0 la cl\u00e9 est indiqu\u00e9e apr\u00e8s les deux points. Les valeurs peuvent \u00eatre de n'importe quel type. Exemple Dans l'exemple pr\u00e9c\u00e9dent : quelles sont les cl\u00e9s de un_dico ? quelles sont les valeurs associ\u00e9es ? Solution La cl\u00e9 nom est associ\u00e9e \u00e0 la valeur LaTaupe , \u00e0 la cl\u00e9 prenom est Ren\u00e9 et \u00e0 la cl\u00e9 naissance , 2009 . Cours Il est possible d'initialiser un dictionnaire vide puis de le remplir avec les 4 lignes suivantes : un_dico = {} # monDico = dict() est une autre syntaxe possible. un_dico [ \"nom\" ] = \"LaTaupe\" un_dico [ \"prenom\" ] = \"Ren\u00e9\" un_dico [ \"naissance\" ] = 2009 Essayez de cr\u00e9er vous-m\u00eame ce dictionnaire en recopiant ces instructions. >>> Cr\u00e9er des dictionnaires Dans les exercices ci-dessous, cr\u00e9er les dictionnaires demand\u00e9s. Exercice 1 Exercice 2 Dictionnaire nomm\u00e9 genre qui indique le genre des mots suivants : table , chemin , rail . Le f\u00e9minin se notera par la lettre 'f' et le masculin par la lettre 'm' . >>> Solution genre = {} genre [ 'table' ] = 'f' genre [ 'chemin' ] = 'm' genre [ 'rail' ] = 'm' ou, en une ligne : genre = { 'table' : 'f' , 'chemin' : 'm' , 'rail' : 'm' } Dictionnaire nomm\u00e9 film qui indique les caract\u00e9ristiques de film : Pulp Fiction est associ\u00e9 \u00e0 [ 'Tarantino' , 1994 ] Kill Bill est associ\u00e9 \u00e0 [ 'Tarantino' , 2003 ] Holy Grail est associ\u00e9 \u00e0 [ 'Monty Python' , 1975 ] >>> Solution Remarquez qu'on associe \u00e0 un cl\u00e9, un tableau de valeurs. genre = {} genre [ 'Pulp Fiction' ] = [ 'Tarantino' , 1994 ] genre [ 'Kill Bill' ] = [ 'Tarantino' , 2003 ] genre [ 'Holy Grail' ] = [ 'Monty Python' , 1975 ] Je d\u00e9conseille ici la solution sur une ligne, difficile \u00e0 lire. Manipuler des dictionnaires \u2693\ufe0e Cours Pour acc\u00e9der \u00e0 la valeur associ\u00e9e \u00e0 une cl\u00e9, on utilise la syntaxe : un_dico [ cl\u00e9 ] Pour ajouter ou modifier la valeur associ\u00e9e \u00e0 une cl\u00e9, on fait simplement : un_dico [ cl\u00e9 ] = nouvelle_valeur Exemple Dans le programme ci-dessous, un dictionnaire a \u00e9t\u00e9 d\u00e9fini. Sans modifier la ligne de d\u00e9finition, afficher la valeur associ\u00e9e \u00e0 la cl\u00e9 gamma ; corriger les valeurs associ\u00e9es aux cl\u00e9s alpha et beta (respectivement, a et b ). ajouter la cl\u00e9 delta associ\u00e9e \u00e0 d . Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder unpy-unddico = {'alpha' : 'k', 'beta' : 'p', 'gamma' : 'c'}bksl-nl Exercice 3 On mod\u00e9lise un panier de fruits de la mani\u00e8re suivante : les cl\u00e9s sont les noms des fruits ; les valeurs sont la quantit\u00e9 de fruit. Cr\u00e9er une fonction liste_de_course qui prend en param\u00e8tres un dictionnaire panier et un fruit fruit et qui \u00e9crit un fruit \u00e0 acheter dans un dictionnaire. La quantit\u00e9 par d\u00e9faut est 0. Lancer panierpy-unddepy-undfruits = {}bksl-nlassert listepy-unddepy-undcourse(panierpy-unddepy-undfruits, 'mandarine')['mandarine'] == 0bksl-nlassert listepy-unddepy-undcourse(panierpy-unddepy-undfruits, 'pomme')['pomme'] == 0bksl-nlfor fruit in ['prune', 'abricot', 'coing']:bksl-nl assert listepy-unddepy-undcourse(panierpy-unddepy-undfruits, fruit)[fruit] == 0bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder panierpy-unddepy-undfruits = {}bksl-nlbksl-nldef listepy-unddepy-undcourse(panier, fruit):bksl-nl passbksl-nlbksl-nlbksl-nlbksl-nl# Testsbksl-nlassert listepy-unddepy-undcourse(panierpy-unddepy-undfruits, 'mandarine')['mandarine'] == 0bksl-nlassert listepy-unddepy-undcourse(panierpy-unddepy-undfruits, 'pomme')['pomme'] == 0bksl-nlfor fruit in ['prune', 'abricot', 'coing']:bksl-nl assert listepy-unddepy-undcourse(panierpy-unddepy-undfruits, fruit)[fruit] == 0 bksl-nl panierpy-unddepy-undfruits = {}bksl-nlbksl-nldef listepy-unddepy-undcourse(panier, fruit):bksl-nl panier[fruit] = 0bksl-nl return panierbksl-nlbksl-nlbksl-nl# Testsbksl-nlassert listepy-unddepy-undcourse(panierpy-unddepy-undfruits, 'mandarine')['mandarine'] == 0bksl-nlassert listepy-unddepy-undcourse(panierpy-unddepy-undfruits, 'pomme')['pomme'] == 0bksl-nlfor fruit in ['prune', 'abricot', 'coing']:bksl-nl assert listepy-unddepy-undcourse(panierpy-unddepy-undfruits, fruit)[fruit] == 0 bksl-nl Cours On peut boucler sur les cl\u00e9s d'un dictionnaire \u00e0 l'aide de cette syntaxe. for cl\u00e9 in un_dictionnaire : print ( cl\u00e9 ) Exemple Reprendre votre liste de course obtenue \u00e0 l'exercice pr\u00e9c\u00e9dent et, \u00e0 l'aide d'une boucle sur les cl\u00e9, afficher tous les fruits que vous devez acheter. En ajoutant une instruction, afficher quelles sont les quantit\u00e9s actuellement pr\u00e9sentes dans votre panier (cela devrait \u00eatre 0). Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder Solution for fruit in panier_de_fruits : quantit\u00e9 = panier_de_fruits [ fruit ] print ( fruit , quantit\u00e9 ) Exercice 4 Continuons sur ce panier de fruits. On peut tester si une cl\u00e9 est pr\u00e9sent dans un dictionnaire simplement en le demandant gentiment : cl\u00e9 in un_dictionnaire . Cr\u00e9er une fonction ajouter_fruit qui prend en param\u00e8tres un dictionnaire panier et un fruit fruit et qui ajoute un fruit dans un dictionnaire. Si un fruit est d\u00e9j\u00e0 pr\u00e9sent dans le panier, la quantit\u00e9 est augment\u00e9e de 1. Sinon, on affiche un message d'erreur : Ce fruit n 'est pas sur la liste de courses . Lancer panierpy-unddepy-undfruits = {}bksl-nlassert ajouterpy-undfruit(panierpy-unddepy-undfruits, 'mandarine')['mandarine'] == 0bksl-nlassert ajouterpy-undfruit(panierpy-unddepy-undfruits, 'pomme')['pomme'] == 0bksl-nlfor fruit in ['prune', 'abricot', 'coing']:bksl-nl assert ajouterpy-undfruit(panierpy-unddepy-undfruits, fruit)[fruit] == 0bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder panierpy-unddepy-undfruits = {'pomme' : 0, 'poire' : 0, 'abricot' : 0}bksl-nlbksl-nldef ajouterpy-undfruit(panier, fruit):bksl-nl passbksl-nlbksl-nlbksl-nlbksl-nl# Testsbksl-nlassert ajouterpy-undfruit(panierpy-unddepy-undfruits, 'mandarine') == panierpy-unddepy-undfruitsbksl-nlassert ajouterpy-undfruit(panierpy-unddepy-undfruits, 'pomme')['pomme'] == 1bksl-nl panierpy-unddepy-undfruits = {'pomme' : 0, 'poire' : 0, 'abricot' : 0}bksl-nlbksl-nldef ajouterpy-undfruit(panier, fruit):bksl-nl if fruit not in panier:bksl-nl print(\"Ce fruit n'est pas sur la liste de courses\")bksl-nl else :bksl-nl panier[fruit] = panier[fruit] + 1bksl-nl return panierbksl-nlbksl-nlbksl-nl# Testsbksl-nlassert ajouterpy-undfruit(panierpy-unddepy-undfruits, 'mandarine') == panierpy-unddepy-undfruitsbksl-nlassert ajouterpy-undfruit(panierpy-unddepy-undfruits, 'pomme')['pomme'] == 1bksl-nlfor i in range(10):bksl-nl assert ajouterpy-undfruit(panierpy-unddepy-undfruits, 'poire')['poire'] == i+1bksl-nl Exercice 5 Continuons encore sur ce panier de fruits. En utilisant la fonction ajouter_fruit et une boucle, cr\u00e9er une fonction avalanche_de_fruits qui prend en param\u00e8tres un dictionnaire panier et qui ajoute 1 \u00e0 la quantit\u00e9 de tous les fruits pr\u00e9sents dans le dictionnaire panier . Lancer panierpy-unddepy-undfruits = {'pomme' : 2, 'poire' : 3, 'abricot' : 1}bksl-nlassert avalanchepy-unddepy-undfruits(panierpy-unddepy-undfruits) == {'pomme' : 3, 'poire' : 4, 'abricot' : 2}bksl-nlbksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder #--- HDR ---#bksl-nldef ajouterpy-undfruit(panier, fruit):bksl-nl if fruit not in panier:bksl-nl print(\"Ce fruit n'est pas sur la liste de courses\")bksl-nl else :bksl-nl panier[fruit] = panier[fruit] + 1bksl-nl return panierbksl-nl#--- HDR ---#bksl-nlbksl-nlpanierpy-unddepy-undfruits = {'pomme' : 2, 'poire' : 3, 'abricot' : 1}bksl-nlbksl-nldef avalanchepy-unddepy-undfruits(panier):bksl-nl passbksl-nlbksl-nlbksl-nl# Testsbksl-nlassert avalanchepy-unddepy-undfruits(panierpy-unddepy-undfruits) == {'pomme' : 3, 'poire' : 4, 'abricot' : 2}bksl-nl panierpy-unddepy-undfruits = {'pomme' : 2, 'poire' : 3, 'abricot' : 1}bksl-nlbksl-nldef ajouterpy-undfruit(panier, fruit):bksl-nl if fruit not in panier:bksl-nl print(\"Ce fruit n'est pas sur la liste de courses\")bksl-nl else :bksl-nl panier[fruit] = panier[fruit] + 1bksl-nl return panierbksl-nlbksl-nldef avalanchepy-unddepy-undfruits(panier):bksl-nl for fruit in panier:bksl-nl panier = ajouterpy-undfruit(panier, fruit)bksl-nl return panierbksl-nlbksl-nlbksl-nl# Testsbksl-nlassert avalanchepy-unddepy-undfruits(panierpy-unddepy-undfruits) == {'pomme' : 3, 'poire' : 4, 'abricot' : 2}bksl-nl Parcours particuliers \u2693\ufe0e Cours De temps en temps, on souhaite parcourir les valeurs plut\u00f4t que les cl\u00e9s. On r\u00e9alise cette op\u00e9ration \u00e0 l'aide de la syntaxe suivante : for valeur in un_dictionnaire . values (): print ( valeur ) Exemple Faire la moyenne des valeurs du dictionnaire : Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder moyennepy-undFV = {'1G1' : 12, '1G2' : 14.3, '1G3' : 15.6, '1G4' : 11.3}bksl-nlbksl-nlbksl-nl Solution ```python moyenne_FV = {'1G1' : 12, '1G2' : 14.3, '1G3' : 15.6, '1G4' : 11.3} moyenne = 0 for note in moyenne_FV.values(): moyenne = moyenne + note / len(moyenne_FV) print(moyenne) De temps en temps, on souhaite parcourir les cl\u00e9s et les valeurs simultan\u00e9ment. On r\u00e9alise cette op\u00e9ration \u00e0 l'aide de la syntaxe suivante : for cl\u00e9 , valeur in un_dictionnaire . items (): print ( cl\u00e9 , valeur )","title":"Dictionnaires"},{"location":"python7/#dictionnaires","text":"","title":"Dictionnaires"},{"location":"python7/#position-du-probleme","text":"Un tableau Python poss\u00e8de une seule caract\u00e9ristique : la valeur port\u00e9e dans le tableau. On peut dire que cette valeur est en quelque sorte reli\u00e9e \u00e0 une position. Exemple Dans le tableau [ \"0626130029\" , \"0616248329\" , \"0601118218\" ] : \"0616248329\" est \u00e0 la position 1 ; \"0601118218\" \u00e0 la position 2. Toutefois, si maintenant je souhaite acc\u00e9der au nom des personnes associ\u00e9es \u00e0 ces num\u00e9ros de t\u00e9l\u00e9phone, c'est compliqu\u00e9. Il faudrait un deuxi\u00e8me tableau contenant des noms de personnes \u00e0 la m\u00eame position : [ \"Maman\" , \"Papa\" , \"M\u00e9dor\" ] . Dans un tableau, la position sert donc de cl\u00e9 primaire (pour dans l'exemple, fusionner deux tableaux).","title":"Position du probl\u00e8me"},{"location":"python7/#premier-contact","text":"Il y a beaucoup plus pratique : le dictionnaire . Comme dans un dictionnaire r\u00e9el, un dictionnaire Python est compos\u00e9 de deux champs : une cl\u00e9 ; une valeur . Exemple Tout de suite, un exemple : un_dico = { \"nom\" : \"LaTaupe\" , \"prenom\" : \"Ren\u00e9\" , \"naissance\" : 2009 } \u00e0 comparer avec : un_tableau = [ \"LaTaupe\" , \"Ren\u00e9\" , 2009 ] . >>> Cours Quelques g\u00e9n\u00e9ralit\u00e9s sur les dictionnaires : un dictionnaire se caract\u00e9rise par des accolades {} ; les cl\u00e9s sont d\u00e9finies avant les deux points. Les cl\u00e9s peuvent \u00eatre de n'importe quel type non mutable. la valeur associ\u00e9e \u00e0 la cl\u00e9 est indiqu\u00e9e apr\u00e8s les deux points. Les valeurs peuvent \u00eatre de n'importe quel type. Exemple Dans l'exemple pr\u00e9c\u00e9dent : quelles sont les cl\u00e9s de un_dico ? quelles sont les valeurs associ\u00e9es ? Solution La cl\u00e9 nom est associ\u00e9e \u00e0 la valeur LaTaupe , \u00e0 la cl\u00e9 prenom est Ren\u00e9 et \u00e0 la cl\u00e9 naissance , 2009 . Cours Il est possible d'initialiser un dictionnaire vide puis de le remplir avec les 4 lignes suivantes : un_dico = {} # monDico = dict() est une autre syntaxe possible. un_dico [ \"nom\" ] = \"LaTaupe\" un_dico [ \"prenom\" ] = \"Ren\u00e9\" un_dico [ \"naissance\" ] = 2009 Essayez de cr\u00e9er vous-m\u00eame ce dictionnaire en recopiant ces instructions. >>> Cr\u00e9er des dictionnaires Dans les exercices ci-dessous, cr\u00e9er les dictionnaires demand\u00e9s. Exercice 1 Exercice 2 Dictionnaire nomm\u00e9 genre qui indique le genre des mots suivants : table , chemin , rail . Le f\u00e9minin se notera par la lettre 'f' et le masculin par la lettre 'm' . >>> Solution genre = {} genre [ 'table' ] = 'f' genre [ 'chemin' ] = 'm' genre [ 'rail' ] = 'm' ou, en une ligne : genre = { 'table' : 'f' , 'chemin' : 'm' , 'rail' : 'm' } Dictionnaire nomm\u00e9 film qui indique les caract\u00e9ristiques de film : Pulp Fiction est associ\u00e9 \u00e0 [ 'Tarantino' , 1994 ] Kill Bill est associ\u00e9 \u00e0 [ 'Tarantino' , 2003 ] Holy Grail est associ\u00e9 \u00e0 [ 'Monty Python' , 1975 ] >>> Solution Remarquez qu'on associe \u00e0 un cl\u00e9, un tableau de valeurs. genre = {} genre [ 'Pulp Fiction' ] = [ 'Tarantino' , 1994 ] genre [ 'Kill Bill' ] = [ 'Tarantino' , 2003 ] genre [ 'Holy Grail' ] = [ 'Monty Python' , 1975 ] Je d\u00e9conseille ici la solution sur une ligne, difficile \u00e0 lire.","title":"Premier contact"},{"location":"python7/#manipuler-des-dictionnaires","text":"Cours Pour acc\u00e9der \u00e0 la valeur associ\u00e9e \u00e0 une cl\u00e9, on utilise la syntaxe : un_dico [ cl\u00e9 ] Pour ajouter ou modifier la valeur associ\u00e9e \u00e0 une cl\u00e9, on fait simplement : un_dico [ cl\u00e9 ] = nouvelle_valeur Exemple Dans le programme ci-dessous, un dictionnaire a \u00e9t\u00e9 d\u00e9fini. Sans modifier la ligne de d\u00e9finition, afficher la valeur associ\u00e9e \u00e0 la cl\u00e9 gamma ; corriger les valeurs associ\u00e9es aux cl\u00e9s alpha et beta (respectivement, a et b ). ajouter la cl\u00e9 delta associ\u00e9e \u00e0 d . Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder unpy-unddico = {'alpha' : 'k', 'beta' : 'p', 'gamma' : 'c'}bksl-nl Exercice 3 On mod\u00e9lise un panier de fruits de la mani\u00e8re suivante : les cl\u00e9s sont les noms des fruits ; les valeurs sont la quantit\u00e9 de fruit. Cr\u00e9er une fonction liste_de_course qui prend en param\u00e8tres un dictionnaire panier et un fruit fruit et qui \u00e9crit un fruit \u00e0 acheter dans un dictionnaire. La quantit\u00e9 par d\u00e9faut est 0. Lancer panierpy-unddepy-undfruits = {}bksl-nlassert listepy-unddepy-undcourse(panierpy-unddepy-undfruits, 'mandarine')['mandarine'] == 0bksl-nlassert listepy-unddepy-undcourse(panierpy-unddepy-undfruits, 'pomme')['pomme'] == 0bksl-nlfor fruit in ['prune', 'abricot', 'coing']:bksl-nl assert listepy-unddepy-undcourse(panierpy-unddepy-undfruits, fruit)[fruit] == 0bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder panierpy-unddepy-undfruits = {}bksl-nlbksl-nldef listepy-unddepy-undcourse(panier, fruit):bksl-nl passbksl-nlbksl-nlbksl-nlbksl-nl# Testsbksl-nlassert listepy-unddepy-undcourse(panierpy-unddepy-undfruits, 'mandarine')['mandarine'] == 0bksl-nlassert listepy-unddepy-undcourse(panierpy-unddepy-undfruits, 'pomme')['pomme'] == 0bksl-nlfor fruit in ['prune', 'abricot', 'coing']:bksl-nl assert listepy-unddepy-undcourse(panierpy-unddepy-undfruits, fruit)[fruit] == 0 bksl-nl panierpy-unddepy-undfruits = {}bksl-nlbksl-nldef listepy-unddepy-undcourse(panier, fruit):bksl-nl panier[fruit] = 0bksl-nl return panierbksl-nlbksl-nlbksl-nl# Testsbksl-nlassert listepy-unddepy-undcourse(panierpy-unddepy-undfruits, 'mandarine')['mandarine'] == 0bksl-nlassert listepy-unddepy-undcourse(panierpy-unddepy-undfruits, 'pomme')['pomme'] == 0bksl-nlfor fruit in ['prune', 'abricot', 'coing']:bksl-nl assert listepy-unddepy-undcourse(panierpy-unddepy-undfruits, fruit)[fruit] == 0 bksl-nl Cours On peut boucler sur les cl\u00e9s d'un dictionnaire \u00e0 l'aide de cette syntaxe. for cl\u00e9 in un_dictionnaire : print ( cl\u00e9 ) Exemple Reprendre votre liste de course obtenue \u00e0 l'exercice pr\u00e9c\u00e9dent et, \u00e0 l'aide d'une boucle sur les cl\u00e9, afficher tous les fruits que vous devez acheter. En ajoutant une instruction, afficher quelles sont les quantit\u00e9s actuellement pr\u00e9sentes dans votre panier (cela devrait \u00eatre 0). Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder Solution for fruit in panier_de_fruits : quantit\u00e9 = panier_de_fruits [ fruit ] print ( fruit , quantit\u00e9 ) Exercice 4 Continuons sur ce panier de fruits. On peut tester si une cl\u00e9 est pr\u00e9sent dans un dictionnaire simplement en le demandant gentiment : cl\u00e9 in un_dictionnaire . Cr\u00e9er une fonction ajouter_fruit qui prend en param\u00e8tres un dictionnaire panier et un fruit fruit et qui ajoute un fruit dans un dictionnaire. Si un fruit est d\u00e9j\u00e0 pr\u00e9sent dans le panier, la quantit\u00e9 est augment\u00e9e de 1. Sinon, on affiche un message d'erreur : Ce fruit n 'est pas sur la liste de courses . Lancer panierpy-unddepy-undfruits = {}bksl-nlassert ajouterpy-undfruit(panierpy-unddepy-undfruits, 'mandarine')['mandarine'] == 0bksl-nlassert ajouterpy-undfruit(panierpy-unddepy-undfruits, 'pomme')['pomme'] == 0bksl-nlfor fruit in ['prune', 'abricot', 'coing']:bksl-nl assert ajouterpy-undfruit(panierpy-unddepy-undfruits, fruit)[fruit] == 0bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder panierpy-unddepy-undfruits = {'pomme' : 0, 'poire' : 0, 'abricot' : 0}bksl-nlbksl-nldef ajouterpy-undfruit(panier, fruit):bksl-nl passbksl-nlbksl-nlbksl-nlbksl-nl# Testsbksl-nlassert ajouterpy-undfruit(panierpy-unddepy-undfruits, 'mandarine') == panierpy-unddepy-undfruitsbksl-nlassert ajouterpy-undfruit(panierpy-unddepy-undfruits, 'pomme')['pomme'] == 1bksl-nl panierpy-unddepy-undfruits = {'pomme' : 0, 'poire' : 0, 'abricot' : 0}bksl-nlbksl-nldef ajouterpy-undfruit(panier, fruit):bksl-nl if fruit not in panier:bksl-nl print(\"Ce fruit n'est pas sur la liste de courses\")bksl-nl else :bksl-nl panier[fruit] = panier[fruit] + 1bksl-nl return panierbksl-nlbksl-nlbksl-nl# Testsbksl-nlassert ajouterpy-undfruit(panierpy-unddepy-undfruits, 'mandarine') == panierpy-unddepy-undfruitsbksl-nlassert ajouterpy-undfruit(panierpy-unddepy-undfruits, 'pomme')['pomme'] == 1bksl-nlfor i in range(10):bksl-nl assert ajouterpy-undfruit(panierpy-unddepy-undfruits, 'poire')['poire'] == i+1bksl-nl Exercice 5 Continuons encore sur ce panier de fruits. En utilisant la fonction ajouter_fruit et une boucle, cr\u00e9er une fonction avalanche_de_fruits qui prend en param\u00e8tres un dictionnaire panier et qui ajoute 1 \u00e0 la quantit\u00e9 de tous les fruits pr\u00e9sents dans le dictionnaire panier . Lancer panierpy-unddepy-undfruits = {'pomme' : 2, 'poire' : 3, 'abricot' : 1}bksl-nlassert avalanchepy-unddepy-undfruits(panierpy-unddepy-undfruits) == {'pomme' : 3, 'poire' : 4, 'abricot' : 2}bksl-nlbksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder #--- HDR ---#bksl-nldef ajouterpy-undfruit(panier, fruit):bksl-nl if fruit not in panier:bksl-nl print(\"Ce fruit n'est pas sur la liste de courses\")bksl-nl else :bksl-nl panier[fruit] = panier[fruit] + 1bksl-nl return panierbksl-nl#--- HDR ---#bksl-nlbksl-nlpanierpy-unddepy-undfruits = {'pomme' : 2, 'poire' : 3, 'abricot' : 1}bksl-nlbksl-nldef avalanchepy-unddepy-undfruits(panier):bksl-nl passbksl-nlbksl-nlbksl-nl# Testsbksl-nlassert avalanchepy-unddepy-undfruits(panierpy-unddepy-undfruits) == {'pomme' : 3, 'poire' : 4, 'abricot' : 2}bksl-nl panierpy-unddepy-undfruits = {'pomme' : 2, 'poire' : 3, 'abricot' : 1}bksl-nlbksl-nldef ajouterpy-undfruit(panier, fruit):bksl-nl if fruit not in panier:bksl-nl print(\"Ce fruit n'est pas sur la liste de courses\")bksl-nl else :bksl-nl panier[fruit] = panier[fruit] + 1bksl-nl return panierbksl-nlbksl-nldef avalanchepy-unddepy-undfruits(panier):bksl-nl for fruit in panier:bksl-nl panier = ajouterpy-undfruit(panier, fruit)bksl-nl return panierbksl-nlbksl-nlbksl-nl# Testsbksl-nlassert avalanchepy-unddepy-undfruits(panierpy-unddepy-undfruits) == {'pomme' : 3, 'poire' : 4, 'abricot' : 2}bksl-nl","title":"Manipuler des dictionnaires"},{"location":"python7/#parcours-particuliers","text":"Cours De temps en temps, on souhaite parcourir les valeurs plut\u00f4t que les cl\u00e9s. On r\u00e9alise cette op\u00e9ration \u00e0 l'aide de la syntaxe suivante : for valeur in un_dictionnaire . values (): print ( valeur ) Exemple Faire la moyenne des valeurs du dictionnaire : Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder moyennepy-undFV = {'1G1' : 12, '1G2' : 14.3, '1G3' : 15.6, '1G4' : 11.3}bksl-nlbksl-nlbksl-nl Solution ```python moyenne_FV = {'1G1' : 12, '1G2' : 14.3, '1G3' : 15.6, '1G4' : 11.3} moyenne = 0 for note in moyenne_FV.values(): moyenne = moyenne + note / len(moyenne_FV) print(moyenne) De temps en temps, on souhaite parcourir les cl\u00e9s et les valeurs simultan\u00e9ment. On r\u00e9alise cette op\u00e9ration \u00e0 l'aide de la syntaxe suivante : for cl\u00e9 , valeur in un_dictionnaire . items (): print ( cl\u00e9 , valeur )","title":"Parcours particuliers"},{"location":"python8/","text":"Utilisation avanc\u00e9e \u2693\ufe0e Parler des f-strings, des tableaux de tableaux Du slicing range(start, stop, step) du type-hinting des assert D\u00e9finition \u2693\ufe0e Vocabulaire Un paradigme est une tentative pour classer diff\u00e9rents langages en fonction de leur","title":"Utilisation avanc\u00e9e"},{"location":"python8/#utilisation-avancee","text":"Parler des f-strings, des tableaux de tableaux Du slicing range(start, stop, step) du type-hinting des assert","title":"Utilisation avanc\u00e9e"},{"location":"python8/#definition","text":"Vocabulaire Un paradigme est une tentative pour classer diff\u00e9rents langages en fonction de leur","title":"D\u00e9finition"},{"location":"python9/","text":"Paradigmes \u2693\ufe0e Ce court chapitre esquisse l'id\u00e9e de paradigme. D\u00e9finition \u2693\ufe0e Vocabulaire Un paradigme est une tentative pour classer diff\u00e9rents langages en fonction de leur Paradigmes d\u00e9claratifs \u2693\ufe0e Paradigmes fonctionnels \u2693\ufe0e pointsDeMana = 6.5 et persoVivant = True Affichez les types de ces variables dans le terminal \u00e0 l'aide de l'instruction print (......). [Remarque :]{.ul} On utilise la notation anglo-saxonne avec . pour la virgule, et e pour \\\"10 puissance\\\". Par exemple : 1.5e4 = 15000 --- \u00c0 faire vous-m\u00eame 10 --- Dans votre programme, \u00e0 partir de la variable ageJoueur et des op\u00e9rations de transtypage, cr\u00e9ez les variables suivantes : Il y a 3 minuttes ageJoueurEntier, ageJoueurReel, ageJoueurBool, ageJoueurList, ageJoueurTuple qui seront de type entier, flottant, bool\u00e9en, liste et tuple. Affichez ces variables dans le terminal et \u00e9tudiez les diff\u00e9rences entre ces \u00e9critures. Un peu de math\u00e9matiques ! 1) Op\u00e9rations natives en Python Python poss\u00e8de des symboles permettant de faire des op\u00e9rations arithm\u00e9tiques. Il est possible d'effectuer des op\u00e9rations avec des nombres , mais aussi avec des variables . Les signes utilis\u00e9s sont classiques : +, - . --- \u00c0 faire vous-m\u00eame 11 --- Dans le terminal Python, en faisant de nombreux tests, d\u00e9couvrez la signification des symboles *, / , // , % et **. --- \u00c0 faire vous-m\u00eame 12 --- Cr\u00e9er un nouveau fichier appel\u00e9 addition.py. \u00c9crire un programme qui additionnera le contenu de 2 variables nomm\u00e9es a et b . Le r\u00e9sultat de cette op\u00e9ration devra \u00eatre r\u00e9f\u00e9renc\u00e9 par une troisi\u00e8me variable nomm\u00e9e resultat (attention, pas d'accent dans les noms de variable). Testez votre programme en utilisant la console pour v\u00e9rifier la valeur r\u00e9f\u00e9renc\u00e9e par la variable resultat . --- \u00c0 faire vous-m\u00eame 13 --- Cr\u00e9er un nouveau fichier appel\u00e9 conversionAge.py. Ecrire un programme qui demande votre \u00e2ge en ann\u00e9e et le convertit en nombre de jours. 5) Biblioth\u00e8que math Il est possible d'effectuer des calculs complexes en utilisant des racines carr\u00e9es, des fonctions trigonom\u00e9trique des logarithmes,... Pour utiliser ces instructions \\\"\u00e9l\u00e9mentaires\\\", il est n\u00e9cessaire d'ajouter une ligne au d\u00e9but de votre programme : import math Cette ligne permet d'importer (et donc d'utiliser) la biblioth\u00e8que \\\"math\\\" qui contient toutes les fonctions math\u00e9matiques \\\"classiques\\\". Voici quelques exemples : math.pow(x,a) permet de calculer x \u00e0 la puissance a ; math.cos(x) permet de calculer le cosinus de l'angle x (l'angle x doit \u00eatre en radian) ; math.sqrt(x) permet de calculer la racine carr\u00e9e de x. Si vous avez besoin d'autres fonctions math\u00e9matiques, je vous invite \u00e0 consulter la documentation de Python : <https://docs.python.org/3/library/math.html --- \u00c0 faire vous-m\u00eame 14 --- En calculant \u00e0 la main, d\u00e9terminez les valeurs r\u00e9f\u00e9renc\u00e9es par les variables d, e, f, g, h et i apr\u00e8s l'ex\u00e9cution du programme suivant : import math a = 5 b = 16 c = 3.14 / 2 d = b / a e = b // a f = b % a g = math.pow(a,2) h = math.sqrt(b) i = math.sin(c) V\u00e9rifiez vos r\u00e9ponses \u00e0 l'aide du terminal. --- \u00c0 faire vous-m\u00eame 15 --- \u00c9crire un programme permettant de r\u00e9pondre \u00e0 la question suivante : \\\"Quel est le type du r\u00e9sultat d'une addition d'un integer et d'un float ?\\\" [Remarque :]{.ul} Il est donc tout \u00e0 fait possible de \\\"m\u00e9langer\\\" des nombres entiers et des nombres \u00e0 virgules (\\\"3.14 / 2\\\") dans une op\u00e9ration. Attention aux float : dans le terminal essayez de faire 0.1+0.1 puis 0.1+0.1+0.1\\ Qu'en pensez-vous ? Chaine de caract\u00e8res : vive les strings. 1) Chaines de caract\u00e8res Les chaines de caract\u00e8res sont des listes de caract\u00e8res : \\\"le chat\\\" est constitu\u00e9 des caract\u00e8res 'l', 'e', ' ', 'c', 'h', 'a', 't' . On peut connaitre la longueur d'une chaine de caract\u00e8res gr\u00e2ce \u00e0 : len(string) --- \u00c0 faire vous-m\u00eame 16 --- Cr\u00e9er un nouveau fichier strings.py : maChaine = \\\"Bonjour le monde !\\\" V\u00e9rifiez que la variable maChaine est une chaine de caract\u00e8res contenant la phrase \\\"Bonjour le monde !\\\" 6) Concat\u00e9nation : le signe + L'utilisation du signe + ne se limite pas \u00e0 l'addition. Il est aussi utilis\u00e9 pour la concat\u00e9nation . Cherchez sur Wikip\u00e9dia l'\u00e9tymologie du mot. --- \u00c0 faire vous-m\u00eame 17 --- Quelle est la cha\u00eene de caract\u00e8re r\u00e9f\u00e9renc\u00e9e par la variable monExpression apr\u00e8s l'ex\u00e9cution du programme ci-dessous ? Validez votre r\u00e9ponse en testant ce programme dans strings.py. a = \\\"Hello\\\" b = \\\"World\\\" monExpression = a + b 7) Cha\u00eenes de caract\u00e8res et variables Il est aussi possible de concat\u00e9ner une cha\u00eene de caract\u00e8res et une ou plusieurs variables : --- \u00c0 faire vous-m\u00eame 18 --- Quelle est la valeur de res dans le programme ci-dessous ? Validez votre r\u00e9ponse en testant ce programme dans strings.py. myString1 = \\\"Bonjour \\\" myString2 = \\\"le \\\" res = myString1 + myString2 + \\\"monde!\\\" Les 2 variables myString1 et myString2 r\u00e9f\u00e9rencent 2 cha\u00eenes de caract\u00e8res, nous avons donc bien ici une concat\u00e9nation. Mais que se passe-t-il si la variable r\u00e9f\u00e9rence un nombre (entier ou flottant) ? --- \u00c0 faire vous-m\u00eame 19 --- Testez le code suivant dans strings.py: monNombre = 5 res = \\\"Nombre de personnes : \\\" + monNombre Que constatez-vous ? Pourquoi ? ________________________________________________________________ ________________________________________________________________ Python nous offre 2 solutions : l'utilisation de la m\u00e9thode \\\"str\\\" l'utilisation des \\\"fstring\\\" La m\u00e9thode \\\"str\\\" permet de transformer un nombre en cha\u00eene de caract\u00e8res. On appelle cela du transtypage . --- \u00c0 faire vous-m\u00eame 20 --- En utilisant la m\u00e9thode \\\"str\\\", corrigez le programme fait au #19. Les \\\"fstring\\\" (nouveaut\u00e9 de Python 3.6), permettent de r\u00e9soudre ce probl\u00e8me de combinaison variable-cha\u00eene de caract\u00e8res. --- \u00c0 faire vous-m\u00eame 21 --- Testez le code suivant dans strings.py : monAutreNombre = 10 res = f\\\"Nombre de personnes : {monAutreNombre}\\\" [Remarque :]{.ul} Notez la pr\u00e9sence du \\\"f\\\" juste avant le guillemet et des accolades qui encadrent le nom de la variable. Checkpoint 1) On dispose de la formule suivante pour convertir les degr\u00e9s Fahrenheit en degr\u00e9s Celsius : \\(C = \\frac{F - 32}{1,8}\\) , o\u00f9 F est une temp\u00e9rature en degr\u00e9s Fahrenheit et C la temp\u00e9rature correspondante en degr\u00e9s Celsius. a. Ecrire un programme qui convertit en degr\u00e9s Celsius une temp\u00e9rature rentr\u00e9e au clavier en degr\u00e9s Fahrenheit. b. M\u00eame question pour la conversion inverse. 2) \u00c9crire un programme qui permute et affiche les valeurs de trois variables a , b , c qui sont entr\u00e9es au clavier : a ==*b , b ==*c , c ==*a*. 3) Ecrire un programme qui teste si une chaine de caract\u00e8re est un palindrome.\\ Exemple de palindrome :\\ 'kayak' ou 'Engage le jeu que je le gagne' Structures de contr\u00f4le <!-- -- 1) Bool\u00e9ens Si quelqu'un vous dit que \\\"4 est \u00e9gal \u00e0 4\\\", vous lui r\u00e9pondez : \\\"ben c'est vrai\\\". Si maintenant la m\u00eame personne vous dit que \\\"7 est \u00e9gal \u00e0 12\\\", vous lui r\u00e9pondrez bien \u00e9videmment que \\\"c'est faux !\\\". Comme en langage naturel, en Python, ces deux affirmations se noterons avec un double signe \u00e9gal : par exemple, 7 == 12. --- \u00c0 faire vous-m\u00eame 22 --- Dans le terminal, tapez : 7 == 12 5 = 4 5 \\<= 5 5 != 5 5 \\12 En Python, \\\" 5 = 5 \\\" est appel\u00e9 une expression. Une expression est soit vraie (True), soit fausse (False). Dans le dernier TP, nous avons surtout travaill\u00e9 sur les entiers, les nombres flottants et les cha\u00eenes de caract\u00e8res. Ici, nous abordons les bool\u00e9ens . [Rappel :]{.ul} Un bool\u00e9en est un type de donn\u00e9es qui ne peut prendre que deux valeurs : vrai (True) ou faux (False). --- \u00c0 faire vous-m\u00eame 23 --- Dans l'\u00e9diteur de texte, entrez les valeurs a = 4 et b = 7. Quel est le r\u00e9sultat attendu apr\u00e8s l'ex\u00e9cution de ce programme si vous saisissez dans la console \\\"a == b\\\" ? si vous saisissez \\\"a != b\\\" Ajoutez la signification de ces op\u00e9rateurs sur le formulaire. On peut connecter des expressions bool\u00e9ennes les unes aux autres \u00e0 l'aide des op\u00e9rateurs logiques and (et), or (ou) ou not (non). Nous verrons leur fonctionnement exact dans un prochain chapitre. Pour l'instant, nous allons remplir les tables de v\u00e9rit\u00e9s page suivante \u00e0 l'aide de tests Python : --- \u00c0 faire vous-m\u00eame 24 --- Dans l'\u00e9diteur de texte, entrez les expressions : expr1 = (4 \\< 10) et expr2 = (12 != 10) Puis, sur une m\u00eame ligne, afficher ensuite les valeurs de : expr1 , expr2 , expr1 or expr2 . Refaites d'autres tests afin de remplir les trois tables de v\u00e9rit\u00e9 ci-dessous. [Table de v\u00e9rit\u00e9 pour le \\\"ou\\\"]{.ul} [Table de v\u00e9rit\u00e9 pour le \\\"et\\\"]{.ul} [Table de v\u00e9rit\u00e9 pour le \\\"non\\\"]{.ul} [Rem :]{.ul} il est facile de faire n'importe quoi avec des enchainements d'expressions bool\u00e9ennes. Conservez des expressions simples. --- \u00c0 faire vous-m\u00eame 25 --- En testant le programme suivant, trouvez la valeur de c en fonction des valeurs de a et de b. Bonne chance ! a = int( input(\\\"Donnez un nombre\\\") ) b = (a \\50) print( \\\"b vaut\\\", b, \\\", et est de type \\\", type(b) ) c = ( a == 3 or not(b) or not(a != 25) ) [Remarque importante :]{.ul} Flottants et bool\u00e9ens ne font pas bon m\u00e9nage ! Les flottants ne sont qu'une repr\u00e9sentation d\u00e9cimale des r\u00e9els. --- \u00c0 faire vous-m\u00eame 26 --- Dans le terminal, trouvez les valeurs des expressions bool\u00e9ennes suivantes : A = (3 * 0.1 == 0.3) A est _________________ B = (abs(3 * 0.1 - 0.3) \\< 1e-5) B est _________________ n = 1e15 C1 = (1 + 1 / n == 1) C1 est _________________ n = 1e16 C2 = (1 + 1 / n == 1) C2 est _________________ D = (1 / n == 0) D est _________________ [Conclusion :]{.ul} Pour comparer deux flottants, on v\u00e9rifie s'ils sont assez proches comme dans l'expression B. 8) Conditionnelle \\\"Si ... Alors ...\\\" Dans le chapitre 2, nous avons abord\u00e9 la structure de controle \\\"Si ... Alors ... Sinon\\\". En Python, cette structure appel\u00e9e conditionnelle s'\u00e9crit : if expressionBool\u00e9enne : blocInstructionA else : blocInstructionB Si l'expression est vraie, alors on fait le bloc d'instructions A. Sinon, on fait le bloc d'instructions B. --- \u00c0 faire vous-m\u00eame 27 --- Dans l'\u00e9diteur de texte, entrez le programme suivant : v = float(input('Vitesse du vent (en noeuds)?')) if v = 20 : meteo = 'Sortie en mer annul\u00e9e' else: meteo = 'Sortie en mer maintenue' print( meteo ) --- \u00c0 faire vous-m\u00eame 28 --- \u00c9crire un programme qui prend en entr\u00e9e un age. Si age est sup\u00e9rieur ou \u00e9gal \u00e0 18 ans, la fonction devra renvoyer la cha\u00eene de caract\u00e8res \\\"Bonjour, vous \u00eates majeur.\\\". Si age est inf\u00e9rieur \u00e0 18 ans, la fonction devra renvoyer \\\"Bonjour, tu es mineur.\\\" --- \u00c0 faire vous-m\u00eame 29 --- Dans l'\u00e9diteur de texte, modifiez le programme #27 pour obtenir : v = float(input('Vitesse du vent (en noeuds)?')) h = float(input('Houle (en m)?')) varBooleen = (v = 20 or h = 5) if varBooleen == True : meteo = 'Sortie en mer annul\u00e9e' else: meteo = 'Sortie en mer maintenue' print( meteo ) [Remarque :]{.ul} Dans le programme pr\u00e9c\u00e9dent, a-t-on besoin de sp\u00e9cifier == True ? Pourquoi ? Pour r\u00e9pondre, essayez de l'enlever dans le programme #29. --- \u00c0 faire vous-m\u00eame 30 --- Quel est le r\u00e9sultat attendu apr\u00e8s l'ex\u00e9cution de ce programme ? Est-il possible d'obtenir tous les messages? V\u00e9rifiez votre r\u00e9ponse en testant ce programme (faire varier a et b) a = 5 b = 10 if a \\5 and b == 10: varAffiche = \\\"Toto\\\" else: varAffiche = \\\"Titi\\\" if a \\5 or b == 10: varAffiche = \\\"Tata\\\" else: varAffiche = \\\"Tutu\\\" print( varAffiche ) [Rem]{.ul} : Attention aux bool\u00e9ens et aux variables opaques... 9) Conditionnelle \\\"Si ... SinonSi ... Alors ...\\\" Dans le chapitre 2, nous avons \u00e9galement discut\u00e9 de la structure de controle \\\"Si ... SinonSi ... Sinon\\\". En Python , elle s'\u00e9crit : if expressionBool\u00e9enne1 : blocInstructionA1 elif expressionBool\u00e9enne2 : blocInstructionA2 else : blocInstructionB {width=\"3.371745406824147in\" height=\"3.2762379702537183in\"} --- \u00c0 faire vous-m\u00eame 31 --- Les tarif re\u0301duits pour l'entre\u0301e a\u0300 un muse\u0301e sont : gratuit pour les moins de 5 ans mi-tarif pour les moins de 16 ans mi-tarif pour les plus de 65 ans mi-tarif pour les e\u0301tudiants. \u00c0 l'aide des instructions elif, programmez\\ l'algorithme ci-contre afin d'afficher quel\\ est le prix que doit payer un visiteur. Les deux\\ variables que l'utilisateur devra entrer au\\ clavier sont : age et statut. Tarif sera \u00e9gal \u00e0 10. --- \u00c0 faire vous-m\u00eame 32 --- On prend a = 10 : testez les trois codes ci-dessous. if a \\< 5: print(a, \\\"\\< 5\\\") if a \\2: print(a, \\\"\\2\\\") if a \\4: print(a, \\\"\\4\\\") if a \\< 5 : print(a, \\\"\\< 5\\\") elif a \\2: print(a, \\\"\\2\\\") elif a \\4: print(a, \\\"\\4\\\") if a \\< 5 : print(a, \\\"\\< 5\\\") elif a \\4: print(a, \\\"\\4\\\") elif a \\2: print(a, \\\"\\2\\\") Que pouvez-vous d\u00e9duire du test #32 ? 10) Boucle non born\u00e9e Comme nous l'avons vu dans le Chapitre 2, la boucle est fondamentale en informatique. On r\u00e9alise une boucle [non born\u00e9e]{.ul} gr\u00e2ce \u00e0 l'instruction : while expressionBool\u00e9enne : blocInstructions Le bloc d'instructions continuera tant que l'expression bool\u00e9enne est vraie. --- \u00c0 faire vous-m\u00eame 33 --- Dans l'\u00e9diteur de texte, \u00e9crire le programme suivant : i = 0 while i \\< 10: print(\\\"i vaut : \\\", i ) i = i + 1 print(\\\"C'est enfin termin\u00e9.\\\") Quel est le r\u00e9sultat attendu apr\u00e8s l'ex\u00e9cution de ce programme ? V\u00e9rifiez votre r\u00e9ponse en testant le programme [Rem]{.ul} : Dans ce programme, i s'appelle le compteur. --- \u00c0 faire vous-m\u00eame 34 --- \u00c9crire un programme permettant de cr\u00e9er \\\"un g\u00e9n\u00e9rateur automatique de punition\\\" . Il y aura deux valeurs d'entr\u00e9e : une cha\u00eene de caract\u00e8re et un nombre entier Exemple : Si l'utilisateur entre : \\\" Je ne dois pas discuter en classe \\\" et 3 Le programme devra permettre d'afficher : Je ne dois pas discuter en classe Je ne dois pas discuter en classe Je ne dois pas discuter en classe --- \u00c0 faire vous-m\u00eame 35 --- \u00c9crire un programme de jeu dont le but est de trouver le nombre 42 par essais successifs. Tant que le nombre 42 n'a pas \u00e9t\u00e9 trouv\u00e9, l'utilisateur doit entrer de nouveaux nombres. Exemple : Le programme dit : \\\"Donne un nombre\\\" --- l'utilisateur entre : 12 Le programme dit : \\\"Donne un nombre\\\" --- l'utilisateur entre : 25 Le programme dit : \\\"Donne un nombre\\\" --- l'utilisateur entre : 42 Le programme dit : \\\"Bravo! C'est gagn\u00e9 !\\\" 11) Boucle born\u00e9e On r\u00e9alise une boucle [born\u00e9e]{.ul} gr\u00e2ce \u00e0 l'instruction : for element in sequence : blocInstructions Contrairement aux boucles non born\u00e9es, la borne born\u00e9e permet de parcourir les \u00e9l\u00e9ments d'une s\u00e9quence de [longueur connue]{.ul} . --- \u00c0 faire vous-m\u00eame 36 --- Tester le programme suivant. Que fait-il ?\\ En changeant les valeurs de 0 et 8, \u00e9tudier le fonctionnement de l'instruction range. for element in range(0, 8, 1): print(element, element**2, element**3) [Remarque :]{.ul} L'instruction range(0, 8, 1) permet de g\u00e9n\u00e9rer tous les nombres successivement entre ____________________________________ . M\u00eame si ce n'est pas compl\u00e8tement exact, on peut dire que range(0, n) est \u00e9quivalent \u00e0 un tableau T avec T = [0, 1, 2, ......... , n-1] . [D\u00e9finition :]{.ul} Une s\u00e9quence peut \u00eatre un tableau ou une chaine de caract\u00e8res. [Exemple :]{.ul} tableau = [3, 1, 4, 15, 9, 2] sequence = \\\"aujourd'hui, maman est morte\\\" [Rappel :]{.ul} On acc\u00e8de \u00e0 la taille d'un tableau ou d'une chaine de caract\u00e8res avec l'instruction len( ......... ) . --- \u00c0 faire vous-m\u00eame 37 --- Tester le programme suivant. varString = \\\"un chaton\\\" for element in varString : print(element) [Question :]{.ul} Qu'affiche le programme ci-dessus ? Un compteur peut \u00e9galement \u00eatre utilis\u00e9 pour acc\u00e9der aux \u00e9l\u00e9ments de notre chaine de caract\u00e8res : --- \u00c0 faire vous-m\u00eame 38 --- Testez le programme suivant et r\u00e9pondez aux questions ci-dessous. varString = \\\"un chaton\\\" longueurString = len(varString) for i in range( longueurString ) : element = varString[i] print('Le ', i, '\u00e8me element est: ', element) Que fait la 2\u00e8me ligne ? __________________________________________ Que signifie range( longueurString ) ? _______________________________ Sur la 4\u00e8me ligne, identifiez la syntaxe permettant d'obtenir le i-\u00e8me \u00e9l\u00e9ment : ________________________________ [Remarques importantes :]{.ul} le nom de la variable de boucle est compl\u00e8tement arbitraire ! Dans un cas, elle s'appelle element , dans l'autre i , mais on aurait aussi pu l'appeler totoDansLaCuisine (mais c'est plus long \u00e0 \u00e9crire...). on peut mettre des boucles dans des boucles. Toutefois les variables de boucles doivent \u00eatre diff\u00e9rentes les unes des autres. --- \u00c0 faire vous-m\u00eame 39 --- Testez le programme suivant et comprenez son fonctionnement. for i in range(5,0,-1) : for j in range(0,5,1) : print(i, j) Checkpoint 1) [Table de multiplication]{.ul} \u00c9crire un programme permettant d'afficher une table de multiplication. Ce programme devra prendre comme variable d'entr\u00e9e la table d\u00e9sir\u00e9e. Par exemple si l'on donne le nombre 3 au programme, la fonction devra permettre d'afficher : 1 x 3 = 3 2 x 3 = 6 ... ... 10 x 3 = 30 2) [Constante de Champernowne]{.ul} On appelle constante de Champernowne le nombre 0.123456789101112131415161718192021... c'est \u00e0 dire le nombre o\u00f9 on \u00e9crit tous les nombres \u00e0 la suite les uns des autres. a) \u00c9crire un programme qui prend n en entr\u00e9e et affiche la constante de Champernowne jusqu'au nombre n inclus.\\ \\ Par exemple si n=3, il faut afficher 0.123. b) Allez sur Wikip\u00e9dia et apprenez-en un peu sur les nombres normaux. Vous pouvez aussi regarder sur Youtube : All the Numbers - Numberphile <!-- -- 4) [Division enfantine]{.ul} \\ \u00c9crire un programme permettant de faire des divisions euclidiennes comme un enfant de 7 ans.\\ L'utilisateur entre un dividende et un diviseur, puis le programme soustrait n fois le diviseur du dividende. On trouve alors le quotient et le reste que l'on affiche \u00e0 l'\u00e9cran. [Exemple]{.ul} : dividende 13 et diviseur 6. 13 - 6 = 7 7 - 6 = 1 On a soustrait 6 deux fois donc, quotient = 2 et il reste 1 donc reste = 1. 5) [Recherche d'un maximum]{.ul} \\ Dans le Chapitre 1, nous avons travaill\u00e9 sur l'algorithme de recherche d'un maximum dans une liste de nombres.\\ \\ Traduisez cet algorithme en un programme Python donnant le maximum d'une liste de nombres. Vous \u00e9crirez directement cette liste dans le programme. 6) [Nombre premier]{.ul} \\ Un nombre premier est un nombre qui a exactement 2 diviseurs qui sont 1 et lui m\u00eame. Le but de cet exercice est de cr\u00e9er un algorithme qui dit \u00e0 un utilisateur si un nombre est premier ou pas.\\ \\ Etant donn\u00e9e la d\u00e9finition, pour savoir si un nombre n est premier ou pas, on va tout simplement tester s'il est divisible par un des nombres compris entre 2 et n-1. D\u00e8s qu'on trouve un diviseur, on affiche \\\"PAS PREMIER\\\" sinon on affiche \\\"PREMIER\\\".\\ L'utilisateur doit rentrer au clavier le nombre \u00e0 tester. 7) [Mastermind]{.ul} \\ On reprend le programme #35. \u00c0 pr\u00e9sent, l'utilisateur doit trouver un nombre entier al\u00e9atoire entre 0 et 100 avec utilisant le moins de coup possible.\\ \\ Pour g\u00e9n\u00e9rer un nombre al\u00e9atoire en Python, on met sur la premi\u00e8re ligne de notre code : from random import * . Cela importe la biblioth\u00e8que random .\\ Puis, on g\u00e9n\u00e8re un nombre al\u00e9atoire avec : nbrAlea = randint(0,100) .\\ \\ [Exemple]{.ul} :\\ Le programme dit : \\\"Donne un nombre\\\" --- L'utilisateur entre : 12\\ Le programme r\u00e9pond : \\\"Non, c'est plus petit\\\".\\ Le programme dit : \\\"Donne un nombre\\\" --- L'utilisateur entre : 8\\ Le programme r\u00e9pond : \\\"Non, c'est plus grand\\\".\\ Le programme dit : \\\"Donne un nombre\\\" --- L'utilisateur entre : 9\\ Le programme r\u00e9pond : \\\"Bravo, 9 est le nombre recherch\u00e9 ! Tu as gagn\u00e9 en 3 essais !\\\" 8) [D\u00e9fi]{.ul} \\ R\u00e9\u00e9crire le code #31 en moins de 10 lignes (je l'ai fait avec 98 caract\u00e8res espaces compris et 7 lignes...) Fonctions <!-- -- 1) Le principe DRY Tous les langages informatiques sont fond\u00e9s sur une comme une oeuvre d'art ou un po\u00e8me. Comme je descendais des Fleuves impassibles, Je ne me sentis plus guid\u00e9 par les haleurs : Des Peaux-Rouges criards les avaient pris pour cibles, Les ayant clou\u00e9s nus aux poteaux de couleurs. J'\u00e9tais insoucieux de tous les \u00e9quipages, Porteur de bl\u00e9s flamands ou de cotons anglais. Quand avec mes haleurs ont fini ces tapages, Les Fleuves m'ont laiss\u00e9 descendre o\u00f9 je voulais. Id\u00e9e de beaut\u00e9 du code. Tous les langages se fondent sur la m\u00eame philosophie : DRY (Don't Repeat Yourself). 12) Introduction aux fonctions Jusqu'\u00e0 maintenant, un programme se composait de lignes que l'on lisait les unes \u00e0 la suite des autres. Cette approche (ou paradigme) peut poser des probl\u00e8mes techniques. --- \u00c0 faire vous-m\u00eame 40 --- Le jour du Black Friday, une personne ach\u00e8te : - 25 livres \u00e0 12\u20ac hors taxe (TVA est de 5,5%) ; - 2 \u00e9crans LCD \u00e0 540\u20ac hors taxe (TVA est de 20%) ; - 1 smartphone \u00e0 700\u20ac hors taxe (TVA est de 10%). \u00c9crire un programme permettant de savoir combien cette personne a d\u00e9pens\u00e9 TTC. On rappelle que le \\\"Prix TTC = Prix HT + Part TVA\\\". [Que se passerait-il si vous deviez rajouter une autre donn\u00e9e \u00e0 un taux de TVA de 15% ? puis une autre de 20% ?]{.ul} [Conclusion :]{.ul} Pour \u00e9viter la r\u00e9p\u00e9tition d'une instruction et structurer votre code informatique, on peut utiliser un objet appel\u00e9 fonction. Les fonctions permettent de d\u00e9composer un programme complexe en une s\u00e9rie de sous-programmes plus simples. En ce sens, les fonctions sont r\u00e9utilisables : si nous disposons d'une fonction capable de calculer un prix TTC \u00e0 partir d'un prix hors taxe et d'un taux de TVA , nous pouvons l'utiliser partout dans notre programme sans avoir \u00e0 faire des copier/coller. Les fonctions informatiques sont donc comparables \u00e0 la notion de fonctions math\u00e9matiques. 13) Fonctions [D\u00e9finition]{.ul} : Le prototype (d\u00e9finition) d'une fonction est constitu\u00e9 : d'un nom ; d'une liste de param\u00e8tres ; de l'ensemble des instructions \u00e0 r\u00e9aliser. Le prototype d'une fonction s'\u00e9crit : def nom(param1: type1, param2: type2 ... ) -\\typeSortie : instructions return y def permet de d\u00e9finir une fonction ; return y permet de renvoyer la valeur de la variable y ; param1, param2 ... sont les param\u00e8tres d'entr\u00e9es ; type1, type2 ... sont les types des param\u00e8tres d'entr\u00e9es ; typeSortie est le type de la variable de sortie. --- \u00c0 faire vous-m\u00eame 41 --- Dans l'\u00e9diteur de texte, entrez : def maFonction(x: int) -\\int: y = 3 * x + 2 return y On r\u00e9cup\u00e8re le r\u00e9sultat de cette fonction pour x=4 en ajoutant : solution = maFonction(4) Affichez les r\u00e9sultats de cette fonction pour x=1, x=10, x=100. [Rem :]{.ul} Quelle fonction math\u00e9matique est cod\u00e9e ci-dessus ? --- \u00c0 faire vous-m\u00eame 42 --- On d\u00e9finit la fonction \\(f(x) = 2x - 5\\) . En modifiant la fonction pr\u00e9c\u00e9dente et gr\u00e2ce \u00e0 une boucle, faites la somme des f(x) pour x allant de 0 \u00e0 121. --- \u00c0 faire vous-m\u00eame 43 --- Codez en Python la fonction maFonction2 de formule y = ( \\(x^{2}\\) + x) % 10. x et y seront des entiers. Affichez les valeurs de cette fonction pour x = 1, 3, 40 et 145. Une fonction peut prendre plusieurs param\u00e8tres en entr\u00e9e. --- \u00c0 faire vous-m\u00eame 44 --- \u00c9crivez dans l'\u00e9diteur de texte : def nouvelleFonction(x: float, a: int, b: int) -\\float : y = a * x + b return y Quel r\u00e9sultat renvoie cette fonction si x=4, a=-2 et b=8 ? ______________ Quel r\u00e9sultat renvoie cette fonction si x=-4, a=2 et b=-8 ? ______________ --- \u00c0 faire vous-m\u00eame 45 --- \u00c9crivez une fonction qui permette de r\u00e9pondre plus facilement \u00e0 l'encadr\u00e9 #40. Les deux param\u00e8tres d'entr\u00e9e seront le prix HT et le taux de TVA. 14) Jeux de tests : pr\u00e9-condition, post-condition --- \u00c0 faire vous-m\u00eame 46 --- Codez en Python la fonction maFonction2 de formule y = \\(\\sqrt{x}\\) + x % 10. x et y seront des entiers. Affichez les valeurs de cette fonction pour x = 1, 4,121 et 145. [Rem :]{.ul} Que remarquez-vous pour 145 ? Les types sont-ils respect\u00e9s ? Pour respecter les types demand\u00e9s et/ou effectuer des tests sur des fonctions, Python fournit une instruction appel\u00e9e : assert . assert permet de v\u00e9rifier si une condition est v\u00e9rifi\u00e9e : --- \u00c0 faire vous-m\u00eame 47 --- Dans la console, entrez x=2 . Que se passe-t-il si vous entrez assert(x \\1) ? _________________________ Que se passe-t-il si vous entrez assert(x \\3) ? _________________________ --- \u00c0 faire vous-m\u00eame 47 --- Dans le programme 46, apr\u00e8s la d\u00e9finition de la fonction, ajoutez la ligne suivante : assert ( int(sqrt(x)) == sqrt(x) ). Affichez \u00e0 nouveau les valeurs de cette fonction pour x = 1, 4,121 et 145. [Rem :]{.ul} Que remarquez-vous pour 145 ? Les types d'entr\u00e9e sont-ils respect\u00e9s ? [D\u00e9finition]{.ul} : le test que nous venons d'effectuer s'appelle une pr\u00e9-condition. 15) Proc\u00e9dures, fonctions particuli\u00e8res [Rem 1 :]{.ul} Les param\u00e8tres ne sont pas obligatoires. --- \u00c0 faire vous-m\u00eame 48 --- Testez la fonction suivante : def ma_fon() -\\str: return \\\"voici une fonction qui ne sert \u00e0 rien\\\" [Rem 2 :]{.ul} Une fonction ne renvoie pas forc\u00e9ment de valeur (le mot cl\u00e9 return n'est pas obligatoire). Elle peut par exemple afficher une cha\u00eene de caract\u00e8res \u00e0 l'aide d'un \\\"print\\\". Dans certains langages, on utilise les termes m\u00e9thode ou proc\u00e9dure pour qualifier une fonction \\\"qui ne renvoie rien\\\". --- \u00c0 faire vous-m\u00eame 49 --- Testez la fonction suivante : def ditBonjour(nom : str, age: str): phrase = \\\"Bonjour\\\", nom, \\\"vous avez\\\", age, \\\"ans.\\\" print(phrase) Checkpoint 1) [Autour des chaines de caract\u00e8res]{.ul} <!-- -- a. \u00c9crire une fonction \u00ab singleton \u00bb qui prend un string en param\u00e8tre et renvoie \u00ab vrai \u00bb si la liste est \u00e9gale \u00e0 [0]. b. \u00c9crire une fonction \u00ab m\u00eame longueur \u00bb qui prend deux strings en param\u00e8tres (= arguments ) et renvoie vrai si les listes sont de m\u00eame longueur. c. \u00c9crire une fonction \u00ab appartient \u00bb qui prend en entr\u00e9e un string et une lettre et renvoie \u00ab vrai \u00bb si l'\u00e9l\u00e9ment appartient \u00e0 la liste. d. Cr\u00e9er une fonction \u00ab pluriel \u00bb qui rajoute un s au string donn\u00e9 en entr\u00e9e s'il ne se termine pas d\u00e9j\u00e0 par s. <!-- -- 2) [Calcul de pi !]{.ul} <!-- -- a. \u00c9crire une fonction \u00ab factorielle \u00bb qui prend un nombre n en param\u00e8tre et renvoie la valeur de n! . On rappelle que \\(n! = n \\times (n - 1) \\times ... \\times 3 \\times 2 \\times 1\\) . <!-- -- e. \u00c9crire une fonction \u00ab piApprox \u00bb qui prend un nombre n en param\u00e8tre et renvoie la valeur approch\u00e9e de \\(\\pi\\) selon la formule :\\ \\(\\pi \\approx \\left( 2 + 2^{2} \\times \\frac{(1!)^{2}}{3!} + 2^{3} \\times \\frac{(2!)^{2}}{5!} + ... + 2^{n + 1} \\times \\frac{(n!)^{2}}{(2n + 1)!} \\right)\\) \\ On fera varier la valeur de n pour augmenter la pr\u00e9cision. f. Cr\u00e9er une fonction \u00ab checkPi \u00bb qui prend pour argument un nombre flottant eps et qui renvoie la valeur de n telle que la valeur absolue de piApprox moins pi sous inf\u00e9rieure \u00e0 eps .\\ [Aide :]{.ul} check(1e-2) doit vous renvoyer 7. <!-- -- 3) [D\u00e9cryptage]{.ul} <!-- -- a. \u00c9crire une fonction \u00ab uneLettre \u00bb qui prend en param\u00e8tres un message (type string) et une lettre (type string) et qui renvoie le nombre d'apparitions de cette lettre dans ce message.\\ Par exemple : uneLettre('ah lala','a') renvoie 3. <!-- -- g. \u00c9crire une fonction \u00ab histogramme \u00bb qui prend en param\u00e8tre un message (type string) et qui affiche \u00e0 l'\u00e9cran le nombre d'apparitions de toutes les lettres de l'alphabet.\\ Pour g\u00e9n\u00e9rer l'alphabet, on pourra utiliser :\\ from string import *\\ alphabet = ascii_lowercase \\ \\ Par exemple : \\\"ababcdaa\\\" affiche :\\ a : 4\\ b : 2\\ c : 1\\ d : 1 <!-- -- 4) [Probl\u00e8me]{.ul} Une soci\u00e9t\u00e9 de location de voitures propose \u00e0 ses clients deux contrats : Contrat 1 : un forfait de 50\u20ac puis 0,40\u20ac par km parcouru. Contrat 2 : 0,80\u20ac par km parcouru. a. \u00c9crire deux fonctions prix1(x) et prix2(x) qui renvoient le prix pay\u00e9 avec chaque contrat pour x kilom\u00e8tres parcourus. b. En utilisant les fonctions pr\u00e9c\u00e9dentes, \u00e9crire une fonction plusAvantageux(x) qui renvoie le num\u00e9ro du contrat le plus avantageux. <!-- -- 3) [Nombres de Kaprekar]{.ul} Un nombre de Kaprekar est un nombre dont l'\u00e9criture d\u00e9cimale du carr\u00e9 de ce nombre peut \u00eatre s\u00e9par\u00e9e en deux nombres (pas forc\u00e9ment de m\u00eame taille) dont la somme vaut le nombre initial. [Exemples :]{.ul} 9 est un nombre de Kaprekar car 9\u00b2=81 et on peut s\u00e9parer 81 en 8 et 1 dont la somme 8+1 = 9. 45 est un nombre de Kaprekar car 45\u00b2=2025 et on peut s\u00e9parer 2025 en 20+25=45. 12 n'est pas un nombre de Kaprekar car 12\u00b2=144 et on ne peut pas couper ce nombre pour trouver 12 (1+44=45, 14+4=18). 4 879 est un nombre de Kaprekar car 4879\u00b2 = 23804641 et 238 + 04 641 = 4 879. Cr\u00e9er un programme qui renvoie si un nombre entier n est de Kaprekar ou pas.","title":"Paradigmes"},{"location":"python9/#paradigmes","text":"Ce court chapitre esquisse l'id\u00e9e de paradigme.","title":"Paradigmes"},{"location":"python9/#definition","text":"Vocabulaire Un paradigme est une tentative pour classer diff\u00e9rents langages en fonction de leur","title":"D\u00e9finition"},{"location":"python9/#paradigmes-declaratifs","text":"","title":"Paradigmes d\u00e9claratifs"},{"location":"python9/#paradigmes-fonctionnels","text":"pointsDeMana = 6.5 et persoVivant = True Affichez les types de ces variables dans le terminal \u00e0 l'aide de l'instruction print (......). [Remarque :]{.ul} On utilise la notation anglo-saxonne avec . pour la virgule, et e pour \\\"10 puissance\\\". Par exemple : 1.5e4 = 15000 --- \u00c0 faire vous-m\u00eame 10 --- Dans votre programme, \u00e0 partir de la variable ageJoueur et des op\u00e9rations de transtypage, cr\u00e9ez les variables suivantes : Il y a 3 minuttes ageJoueurEntier, ageJoueurReel, ageJoueurBool, ageJoueurList, ageJoueurTuple qui seront de type entier, flottant, bool\u00e9en, liste et tuple. Affichez ces variables dans le terminal et \u00e9tudiez les diff\u00e9rences entre ces \u00e9critures. Un peu de math\u00e9matiques ! 1) Op\u00e9rations natives en Python Python poss\u00e8de des symboles permettant de faire des op\u00e9rations arithm\u00e9tiques. Il est possible d'effectuer des op\u00e9rations avec des nombres , mais aussi avec des variables . Les signes utilis\u00e9s sont classiques : +, - . --- \u00c0 faire vous-m\u00eame 11 --- Dans le terminal Python, en faisant de nombreux tests, d\u00e9couvrez la signification des symboles *, / , // , % et **. --- \u00c0 faire vous-m\u00eame 12 --- Cr\u00e9er un nouveau fichier appel\u00e9 addition.py. \u00c9crire un programme qui additionnera le contenu de 2 variables nomm\u00e9es a et b . Le r\u00e9sultat de cette op\u00e9ration devra \u00eatre r\u00e9f\u00e9renc\u00e9 par une troisi\u00e8me variable nomm\u00e9e resultat (attention, pas d'accent dans les noms de variable). Testez votre programme en utilisant la console pour v\u00e9rifier la valeur r\u00e9f\u00e9renc\u00e9e par la variable resultat . --- \u00c0 faire vous-m\u00eame 13 --- Cr\u00e9er un nouveau fichier appel\u00e9 conversionAge.py. Ecrire un programme qui demande votre \u00e2ge en ann\u00e9e et le convertit en nombre de jours. 5) Biblioth\u00e8que math Il est possible d'effectuer des calculs complexes en utilisant des racines carr\u00e9es, des fonctions trigonom\u00e9trique des logarithmes,... Pour utiliser ces instructions \\\"\u00e9l\u00e9mentaires\\\", il est n\u00e9cessaire d'ajouter une ligne au d\u00e9but de votre programme : import math Cette ligne permet d'importer (et donc d'utiliser) la biblioth\u00e8que \\\"math\\\" qui contient toutes les fonctions math\u00e9matiques \\\"classiques\\\". Voici quelques exemples : math.pow(x,a) permet de calculer x \u00e0 la puissance a ; math.cos(x) permet de calculer le cosinus de l'angle x (l'angle x doit \u00eatre en radian) ; math.sqrt(x) permet de calculer la racine carr\u00e9e de x. Si vous avez besoin d'autres fonctions math\u00e9matiques, je vous invite \u00e0 consulter la documentation de Python : <https://docs.python.org/3/library/math.html --- \u00c0 faire vous-m\u00eame 14 --- En calculant \u00e0 la main, d\u00e9terminez les valeurs r\u00e9f\u00e9renc\u00e9es par les variables d, e, f, g, h et i apr\u00e8s l'ex\u00e9cution du programme suivant : import math a = 5 b = 16 c = 3.14 / 2 d = b / a e = b // a f = b % a g = math.pow(a,2) h = math.sqrt(b) i = math.sin(c) V\u00e9rifiez vos r\u00e9ponses \u00e0 l'aide du terminal. --- \u00c0 faire vous-m\u00eame 15 --- \u00c9crire un programme permettant de r\u00e9pondre \u00e0 la question suivante : \\\"Quel est le type du r\u00e9sultat d'une addition d'un integer et d'un float ?\\\" [Remarque :]{.ul} Il est donc tout \u00e0 fait possible de \\\"m\u00e9langer\\\" des nombres entiers et des nombres \u00e0 virgules (\\\"3.14 / 2\\\") dans une op\u00e9ration. Attention aux float : dans le terminal essayez de faire 0.1+0.1 puis 0.1+0.1+0.1\\ Qu'en pensez-vous ? Chaine de caract\u00e8res : vive les strings. 1) Chaines de caract\u00e8res Les chaines de caract\u00e8res sont des listes de caract\u00e8res : \\\"le chat\\\" est constitu\u00e9 des caract\u00e8res 'l', 'e', ' ', 'c', 'h', 'a', 't' . On peut connaitre la longueur d'une chaine de caract\u00e8res gr\u00e2ce \u00e0 : len(string) --- \u00c0 faire vous-m\u00eame 16 --- Cr\u00e9er un nouveau fichier strings.py : maChaine = \\\"Bonjour le monde !\\\" V\u00e9rifiez que la variable maChaine est une chaine de caract\u00e8res contenant la phrase \\\"Bonjour le monde !\\\" 6) Concat\u00e9nation : le signe + L'utilisation du signe + ne se limite pas \u00e0 l'addition. Il est aussi utilis\u00e9 pour la concat\u00e9nation . Cherchez sur Wikip\u00e9dia l'\u00e9tymologie du mot. --- \u00c0 faire vous-m\u00eame 17 --- Quelle est la cha\u00eene de caract\u00e8re r\u00e9f\u00e9renc\u00e9e par la variable monExpression apr\u00e8s l'ex\u00e9cution du programme ci-dessous ? Validez votre r\u00e9ponse en testant ce programme dans strings.py. a = \\\"Hello\\\" b = \\\"World\\\" monExpression = a + b 7) Cha\u00eenes de caract\u00e8res et variables Il est aussi possible de concat\u00e9ner une cha\u00eene de caract\u00e8res et une ou plusieurs variables : --- \u00c0 faire vous-m\u00eame 18 --- Quelle est la valeur de res dans le programme ci-dessous ? Validez votre r\u00e9ponse en testant ce programme dans strings.py. myString1 = \\\"Bonjour \\\" myString2 = \\\"le \\\" res = myString1 + myString2 + \\\"monde!\\\" Les 2 variables myString1 et myString2 r\u00e9f\u00e9rencent 2 cha\u00eenes de caract\u00e8res, nous avons donc bien ici une concat\u00e9nation. Mais que se passe-t-il si la variable r\u00e9f\u00e9rence un nombre (entier ou flottant) ? --- \u00c0 faire vous-m\u00eame 19 --- Testez le code suivant dans strings.py: monNombre = 5 res = \\\"Nombre de personnes : \\\" + monNombre Que constatez-vous ? Pourquoi ? ________________________________________________________________ ________________________________________________________________ Python nous offre 2 solutions : l'utilisation de la m\u00e9thode \\\"str\\\" l'utilisation des \\\"fstring\\\" La m\u00e9thode \\\"str\\\" permet de transformer un nombre en cha\u00eene de caract\u00e8res. On appelle cela du transtypage . --- \u00c0 faire vous-m\u00eame 20 --- En utilisant la m\u00e9thode \\\"str\\\", corrigez le programme fait au #19. Les \\\"fstring\\\" (nouveaut\u00e9 de Python 3.6), permettent de r\u00e9soudre ce probl\u00e8me de combinaison variable-cha\u00eene de caract\u00e8res. --- \u00c0 faire vous-m\u00eame 21 --- Testez le code suivant dans strings.py : monAutreNombre = 10 res = f\\\"Nombre de personnes : {monAutreNombre}\\\" [Remarque :]{.ul} Notez la pr\u00e9sence du \\\"f\\\" juste avant le guillemet et des accolades qui encadrent le nom de la variable. Checkpoint 1) On dispose de la formule suivante pour convertir les degr\u00e9s Fahrenheit en degr\u00e9s Celsius : \\(C = \\frac{F - 32}{1,8}\\) , o\u00f9 F est une temp\u00e9rature en degr\u00e9s Fahrenheit et C la temp\u00e9rature correspondante en degr\u00e9s Celsius. a. Ecrire un programme qui convertit en degr\u00e9s Celsius une temp\u00e9rature rentr\u00e9e au clavier en degr\u00e9s Fahrenheit. b. M\u00eame question pour la conversion inverse. 2) \u00c9crire un programme qui permute et affiche les valeurs de trois variables a , b , c qui sont entr\u00e9es au clavier : a ==*b , b ==*c , c ==*a*. 3) Ecrire un programme qui teste si une chaine de caract\u00e8re est un palindrome.\\ Exemple de palindrome :\\ 'kayak' ou 'Engage le jeu que je le gagne' Structures de contr\u00f4le <!-- -- 1) Bool\u00e9ens Si quelqu'un vous dit que \\\"4 est \u00e9gal \u00e0 4\\\", vous lui r\u00e9pondez : \\\"ben c'est vrai\\\". Si maintenant la m\u00eame personne vous dit que \\\"7 est \u00e9gal \u00e0 12\\\", vous lui r\u00e9pondrez bien \u00e9videmment que \\\"c'est faux !\\\". Comme en langage naturel, en Python, ces deux affirmations se noterons avec un double signe \u00e9gal : par exemple, 7 == 12. --- \u00c0 faire vous-m\u00eame 22 --- Dans le terminal, tapez : 7 == 12 5 = 4 5 \\<= 5 5 != 5 5 \\12 En Python, \\\" 5 = 5 \\\" est appel\u00e9 une expression. Une expression est soit vraie (True), soit fausse (False). Dans le dernier TP, nous avons surtout travaill\u00e9 sur les entiers, les nombres flottants et les cha\u00eenes de caract\u00e8res. Ici, nous abordons les bool\u00e9ens . [Rappel :]{.ul} Un bool\u00e9en est un type de donn\u00e9es qui ne peut prendre que deux valeurs : vrai (True) ou faux (False). --- \u00c0 faire vous-m\u00eame 23 --- Dans l'\u00e9diteur de texte, entrez les valeurs a = 4 et b = 7. Quel est le r\u00e9sultat attendu apr\u00e8s l'ex\u00e9cution de ce programme si vous saisissez dans la console \\\"a == b\\\" ? si vous saisissez \\\"a != b\\\" Ajoutez la signification de ces op\u00e9rateurs sur le formulaire. On peut connecter des expressions bool\u00e9ennes les unes aux autres \u00e0 l'aide des op\u00e9rateurs logiques and (et), or (ou) ou not (non). Nous verrons leur fonctionnement exact dans un prochain chapitre. Pour l'instant, nous allons remplir les tables de v\u00e9rit\u00e9s page suivante \u00e0 l'aide de tests Python : --- \u00c0 faire vous-m\u00eame 24 --- Dans l'\u00e9diteur de texte, entrez les expressions : expr1 = (4 \\< 10) et expr2 = (12 != 10) Puis, sur une m\u00eame ligne, afficher ensuite les valeurs de : expr1 , expr2 , expr1 or expr2 . Refaites d'autres tests afin de remplir les trois tables de v\u00e9rit\u00e9 ci-dessous. [Table de v\u00e9rit\u00e9 pour le \\\"ou\\\"]{.ul} [Table de v\u00e9rit\u00e9 pour le \\\"et\\\"]{.ul} [Table de v\u00e9rit\u00e9 pour le \\\"non\\\"]{.ul} [Rem :]{.ul} il est facile de faire n'importe quoi avec des enchainements d'expressions bool\u00e9ennes. Conservez des expressions simples. --- \u00c0 faire vous-m\u00eame 25 --- En testant le programme suivant, trouvez la valeur de c en fonction des valeurs de a et de b. Bonne chance ! a = int( input(\\\"Donnez un nombre\\\") ) b = (a \\50) print( \\\"b vaut\\\", b, \\\", et est de type \\\", type(b) ) c = ( a == 3 or not(b) or not(a != 25) ) [Remarque importante :]{.ul} Flottants et bool\u00e9ens ne font pas bon m\u00e9nage ! Les flottants ne sont qu'une repr\u00e9sentation d\u00e9cimale des r\u00e9els. --- \u00c0 faire vous-m\u00eame 26 --- Dans le terminal, trouvez les valeurs des expressions bool\u00e9ennes suivantes : A = (3 * 0.1 == 0.3) A est _________________ B = (abs(3 * 0.1 - 0.3) \\< 1e-5) B est _________________ n = 1e15 C1 = (1 + 1 / n == 1) C1 est _________________ n = 1e16 C2 = (1 + 1 / n == 1) C2 est _________________ D = (1 / n == 0) D est _________________ [Conclusion :]{.ul} Pour comparer deux flottants, on v\u00e9rifie s'ils sont assez proches comme dans l'expression B. 8) Conditionnelle \\\"Si ... Alors ...\\\" Dans le chapitre 2, nous avons abord\u00e9 la structure de controle \\\"Si ... Alors ... Sinon\\\". En Python, cette structure appel\u00e9e conditionnelle s'\u00e9crit : if expressionBool\u00e9enne : blocInstructionA else : blocInstructionB Si l'expression est vraie, alors on fait le bloc d'instructions A. Sinon, on fait le bloc d'instructions B. --- \u00c0 faire vous-m\u00eame 27 --- Dans l'\u00e9diteur de texte, entrez le programme suivant : v = float(input('Vitesse du vent (en noeuds)?')) if v = 20 : meteo = 'Sortie en mer annul\u00e9e' else: meteo = 'Sortie en mer maintenue' print( meteo ) --- \u00c0 faire vous-m\u00eame 28 --- \u00c9crire un programme qui prend en entr\u00e9e un age. Si age est sup\u00e9rieur ou \u00e9gal \u00e0 18 ans, la fonction devra renvoyer la cha\u00eene de caract\u00e8res \\\"Bonjour, vous \u00eates majeur.\\\". Si age est inf\u00e9rieur \u00e0 18 ans, la fonction devra renvoyer \\\"Bonjour, tu es mineur.\\\" --- \u00c0 faire vous-m\u00eame 29 --- Dans l'\u00e9diteur de texte, modifiez le programme #27 pour obtenir : v = float(input('Vitesse du vent (en noeuds)?')) h = float(input('Houle (en m)?')) varBooleen = (v = 20 or h = 5) if varBooleen == True : meteo = 'Sortie en mer annul\u00e9e' else: meteo = 'Sortie en mer maintenue' print( meteo ) [Remarque :]{.ul} Dans le programme pr\u00e9c\u00e9dent, a-t-on besoin de sp\u00e9cifier == True ? Pourquoi ? Pour r\u00e9pondre, essayez de l'enlever dans le programme #29. --- \u00c0 faire vous-m\u00eame 30 --- Quel est le r\u00e9sultat attendu apr\u00e8s l'ex\u00e9cution de ce programme ? Est-il possible d'obtenir tous les messages? V\u00e9rifiez votre r\u00e9ponse en testant ce programme (faire varier a et b) a = 5 b = 10 if a \\5 and b == 10: varAffiche = \\\"Toto\\\" else: varAffiche = \\\"Titi\\\" if a \\5 or b == 10: varAffiche = \\\"Tata\\\" else: varAffiche = \\\"Tutu\\\" print( varAffiche ) [Rem]{.ul} : Attention aux bool\u00e9ens et aux variables opaques... 9) Conditionnelle \\\"Si ... SinonSi ... Alors ...\\\" Dans le chapitre 2, nous avons \u00e9galement discut\u00e9 de la structure de controle \\\"Si ... SinonSi ... Sinon\\\". En Python , elle s'\u00e9crit : if expressionBool\u00e9enne1 : blocInstructionA1 elif expressionBool\u00e9enne2 : blocInstructionA2 else : blocInstructionB {width=\"3.371745406824147in\" height=\"3.2762379702537183in\"} --- \u00c0 faire vous-m\u00eame 31 --- Les tarif re\u0301duits pour l'entre\u0301e a\u0300 un muse\u0301e sont : gratuit pour les moins de 5 ans mi-tarif pour les moins de 16 ans mi-tarif pour les plus de 65 ans mi-tarif pour les e\u0301tudiants. \u00c0 l'aide des instructions elif, programmez\\ l'algorithme ci-contre afin d'afficher quel\\ est le prix que doit payer un visiteur. Les deux\\ variables que l'utilisateur devra entrer au\\ clavier sont : age et statut. Tarif sera \u00e9gal \u00e0 10. --- \u00c0 faire vous-m\u00eame 32 --- On prend a = 10 : testez les trois codes ci-dessous. if a \\< 5: print(a, \\\"\\< 5\\\") if a \\2: print(a, \\\"\\2\\\") if a \\4: print(a, \\\"\\4\\\") if a \\< 5 : print(a, \\\"\\< 5\\\") elif a \\2: print(a, \\\"\\2\\\") elif a \\4: print(a, \\\"\\4\\\") if a \\< 5 : print(a, \\\"\\< 5\\\") elif a \\4: print(a, \\\"\\4\\\") elif a \\2: print(a, \\\"\\2\\\") Que pouvez-vous d\u00e9duire du test #32 ? 10) Boucle non born\u00e9e Comme nous l'avons vu dans le Chapitre 2, la boucle est fondamentale en informatique. On r\u00e9alise une boucle [non born\u00e9e]{.ul} gr\u00e2ce \u00e0 l'instruction : while expressionBool\u00e9enne : blocInstructions Le bloc d'instructions continuera tant que l'expression bool\u00e9enne est vraie. --- \u00c0 faire vous-m\u00eame 33 --- Dans l'\u00e9diteur de texte, \u00e9crire le programme suivant : i = 0 while i \\< 10: print(\\\"i vaut : \\\", i ) i = i + 1 print(\\\"C'est enfin termin\u00e9.\\\") Quel est le r\u00e9sultat attendu apr\u00e8s l'ex\u00e9cution de ce programme ? V\u00e9rifiez votre r\u00e9ponse en testant le programme [Rem]{.ul} : Dans ce programme, i s'appelle le compteur. --- \u00c0 faire vous-m\u00eame 34 --- \u00c9crire un programme permettant de cr\u00e9er \\\"un g\u00e9n\u00e9rateur automatique de punition\\\" . Il y aura deux valeurs d'entr\u00e9e : une cha\u00eene de caract\u00e8re et un nombre entier Exemple : Si l'utilisateur entre : \\\" Je ne dois pas discuter en classe \\\" et 3 Le programme devra permettre d'afficher : Je ne dois pas discuter en classe Je ne dois pas discuter en classe Je ne dois pas discuter en classe --- \u00c0 faire vous-m\u00eame 35 --- \u00c9crire un programme de jeu dont le but est de trouver le nombre 42 par essais successifs. Tant que le nombre 42 n'a pas \u00e9t\u00e9 trouv\u00e9, l'utilisateur doit entrer de nouveaux nombres. Exemple : Le programme dit : \\\"Donne un nombre\\\" --- l'utilisateur entre : 12 Le programme dit : \\\"Donne un nombre\\\" --- l'utilisateur entre : 25 Le programme dit : \\\"Donne un nombre\\\" --- l'utilisateur entre : 42 Le programme dit : \\\"Bravo! C'est gagn\u00e9 !\\\" 11) Boucle born\u00e9e On r\u00e9alise une boucle [born\u00e9e]{.ul} gr\u00e2ce \u00e0 l'instruction : for element in sequence : blocInstructions Contrairement aux boucles non born\u00e9es, la borne born\u00e9e permet de parcourir les \u00e9l\u00e9ments d'une s\u00e9quence de [longueur connue]{.ul} . --- \u00c0 faire vous-m\u00eame 36 --- Tester le programme suivant. Que fait-il ?\\ En changeant les valeurs de 0 et 8, \u00e9tudier le fonctionnement de l'instruction range. for element in range(0, 8, 1): print(element, element**2, element**3) [Remarque :]{.ul} L'instruction range(0, 8, 1) permet de g\u00e9n\u00e9rer tous les nombres successivement entre ____________________________________ . M\u00eame si ce n'est pas compl\u00e8tement exact, on peut dire que range(0, n) est \u00e9quivalent \u00e0 un tableau T avec T = [0, 1, 2, ......... , n-1] . [D\u00e9finition :]{.ul} Une s\u00e9quence peut \u00eatre un tableau ou une chaine de caract\u00e8res. [Exemple :]{.ul} tableau = [3, 1, 4, 15, 9, 2] sequence = \\\"aujourd'hui, maman est morte\\\" [Rappel :]{.ul} On acc\u00e8de \u00e0 la taille d'un tableau ou d'une chaine de caract\u00e8res avec l'instruction len( ......... ) . --- \u00c0 faire vous-m\u00eame 37 --- Tester le programme suivant. varString = \\\"un chaton\\\" for element in varString : print(element) [Question :]{.ul} Qu'affiche le programme ci-dessus ? Un compteur peut \u00e9galement \u00eatre utilis\u00e9 pour acc\u00e9der aux \u00e9l\u00e9ments de notre chaine de caract\u00e8res : --- \u00c0 faire vous-m\u00eame 38 --- Testez le programme suivant et r\u00e9pondez aux questions ci-dessous. varString = \\\"un chaton\\\" longueurString = len(varString) for i in range( longueurString ) : element = varString[i] print('Le ', i, '\u00e8me element est: ', element) Que fait la 2\u00e8me ligne ? __________________________________________ Que signifie range( longueurString ) ? _______________________________ Sur la 4\u00e8me ligne, identifiez la syntaxe permettant d'obtenir le i-\u00e8me \u00e9l\u00e9ment : ________________________________ [Remarques importantes :]{.ul} le nom de la variable de boucle est compl\u00e8tement arbitraire ! Dans un cas, elle s'appelle element , dans l'autre i , mais on aurait aussi pu l'appeler totoDansLaCuisine (mais c'est plus long \u00e0 \u00e9crire...). on peut mettre des boucles dans des boucles. Toutefois les variables de boucles doivent \u00eatre diff\u00e9rentes les unes des autres. --- \u00c0 faire vous-m\u00eame 39 --- Testez le programme suivant et comprenez son fonctionnement. for i in range(5,0,-1) : for j in range(0,5,1) : print(i, j) Checkpoint 1) [Table de multiplication]{.ul} \u00c9crire un programme permettant d'afficher une table de multiplication. Ce programme devra prendre comme variable d'entr\u00e9e la table d\u00e9sir\u00e9e. Par exemple si l'on donne le nombre 3 au programme, la fonction devra permettre d'afficher : 1 x 3 = 3 2 x 3 = 6 ... ... 10 x 3 = 30 2) [Constante de Champernowne]{.ul} On appelle constante de Champernowne le nombre 0.123456789101112131415161718192021... c'est \u00e0 dire le nombre o\u00f9 on \u00e9crit tous les nombres \u00e0 la suite les uns des autres. a) \u00c9crire un programme qui prend n en entr\u00e9e et affiche la constante de Champernowne jusqu'au nombre n inclus.\\ \\ Par exemple si n=3, il faut afficher 0.123. b) Allez sur Wikip\u00e9dia et apprenez-en un peu sur les nombres normaux. Vous pouvez aussi regarder sur Youtube : All the Numbers - Numberphile <!-- -- 4) [Division enfantine]{.ul} \\ \u00c9crire un programme permettant de faire des divisions euclidiennes comme un enfant de 7 ans.\\ L'utilisateur entre un dividende et un diviseur, puis le programme soustrait n fois le diviseur du dividende. On trouve alors le quotient et le reste que l'on affiche \u00e0 l'\u00e9cran. [Exemple]{.ul} : dividende 13 et diviseur 6. 13 - 6 = 7 7 - 6 = 1 On a soustrait 6 deux fois donc, quotient = 2 et il reste 1 donc reste = 1. 5) [Recherche d'un maximum]{.ul} \\ Dans le Chapitre 1, nous avons travaill\u00e9 sur l'algorithme de recherche d'un maximum dans une liste de nombres.\\ \\ Traduisez cet algorithme en un programme Python donnant le maximum d'une liste de nombres. Vous \u00e9crirez directement cette liste dans le programme. 6) [Nombre premier]{.ul} \\ Un nombre premier est un nombre qui a exactement 2 diviseurs qui sont 1 et lui m\u00eame. Le but de cet exercice est de cr\u00e9er un algorithme qui dit \u00e0 un utilisateur si un nombre est premier ou pas.\\ \\ Etant donn\u00e9e la d\u00e9finition, pour savoir si un nombre n est premier ou pas, on va tout simplement tester s'il est divisible par un des nombres compris entre 2 et n-1. D\u00e8s qu'on trouve un diviseur, on affiche \\\"PAS PREMIER\\\" sinon on affiche \\\"PREMIER\\\".\\ L'utilisateur doit rentrer au clavier le nombre \u00e0 tester. 7) [Mastermind]{.ul} \\ On reprend le programme #35. \u00c0 pr\u00e9sent, l'utilisateur doit trouver un nombre entier al\u00e9atoire entre 0 et 100 avec utilisant le moins de coup possible.\\ \\ Pour g\u00e9n\u00e9rer un nombre al\u00e9atoire en Python, on met sur la premi\u00e8re ligne de notre code : from random import * . Cela importe la biblioth\u00e8que random .\\ Puis, on g\u00e9n\u00e8re un nombre al\u00e9atoire avec : nbrAlea = randint(0,100) .\\ \\ [Exemple]{.ul} :\\ Le programme dit : \\\"Donne un nombre\\\" --- L'utilisateur entre : 12\\ Le programme r\u00e9pond : \\\"Non, c'est plus petit\\\".\\ Le programme dit : \\\"Donne un nombre\\\" --- L'utilisateur entre : 8\\ Le programme r\u00e9pond : \\\"Non, c'est plus grand\\\".\\ Le programme dit : \\\"Donne un nombre\\\" --- L'utilisateur entre : 9\\ Le programme r\u00e9pond : \\\"Bravo, 9 est le nombre recherch\u00e9 ! Tu as gagn\u00e9 en 3 essais !\\\" 8) [D\u00e9fi]{.ul} \\ R\u00e9\u00e9crire le code #31 en moins de 10 lignes (je l'ai fait avec 98 caract\u00e8res espaces compris et 7 lignes...) Fonctions <!-- -- 1) Le principe DRY Tous les langages informatiques sont fond\u00e9s sur une comme une oeuvre d'art ou un po\u00e8me. Comme je descendais des Fleuves impassibles, Je ne me sentis plus guid\u00e9 par les haleurs : Des Peaux-Rouges criards les avaient pris pour cibles, Les ayant clou\u00e9s nus aux poteaux de couleurs. J'\u00e9tais insoucieux de tous les \u00e9quipages, Porteur de bl\u00e9s flamands ou de cotons anglais. Quand avec mes haleurs ont fini ces tapages, Les Fleuves m'ont laiss\u00e9 descendre o\u00f9 je voulais. Id\u00e9e de beaut\u00e9 du code. Tous les langages se fondent sur la m\u00eame philosophie : DRY (Don't Repeat Yourself). 12) Introduction aux fonctions Jusqu'\u00e0 maintenant, un programme se composait de lignes que l'on lisait les unes \u00e0 la suite des autres. Cette approche (ou paradigme) peut poser des probl\u00e8mes techniques. --- \u00c0 faire vous-m\u00eame 40 --- Le jour du Black Friday, une personne ach\u00e8te : - 25 livres \u00e0 12\u20ac hors taxe (TVA est de 5,5%) ; - 2 \u00e9crans LCD \u00e0 540\u20ac hors taxe (TVA est de 20%) ; - 1 smartphone \u00e0 700\u20ac hors taxe (TVA est de 10%). \u00c9crire un programme permettant de savoir combien cette personne a d\u00e9pens\u00e9 TTC. On rappelle que le \\\"Prix TTC = Prix HT + Part TVA\\\". [Que se passerait-il si vous deviez rajouter une autre donn\u00e9e \u00e0 un taux de TVA de 15% ? puis une autre de 20% ?]{.ul} [Conclusion :]{.ul} Pour \u00e9viter la r\u00e9p\u00e9tition d'une instruction et structurer votre code informatique, on peut utiliser un objet appel\u00e9 fonction. Les fonctions permettent de d\u00e9composer un programme complexe en une s\u00e9rie de sous-programmes plus simples. En ce sens, les fonctions sont r\u00e9utilisables : si nous disposons d'une fonction capable de calculer un prix TTC \u00e0 partir d'un prix hors taxe et d'un taux de TVA , nous pouvons l'utiliser partout dans notre programme sans avoir \u00e0 faire des copier/coller. Les fonctions informatiques sont donc comparables \u00e0 la notion de fonctions math\u00e9matiques. 13) Fonctions [D\u00e9finition]{.ul} : Le prototype (d\u00e9finition) d'une fonction est constitu\u00e9 : d'un nom ; d'une liste de param\u00e8tres ; de l'ensemble des instructions \u00e0 r\u00e9aliser. Le prototype d'une fonction s'\u00e9crit : def nom(param1: type1, param2: type2 ... ) -\\typeSortie : instructions return y def permet de d\u00e9finir une fonction ; return y permet de renvoyer la valeur de la variable y ; param1, param2 ... sont les param\u00e8tres d'entr\u00e9es ; type1, type2 ... sont les types des param\u00e8tres d'entr\u00e9es ; typeSortie est le type de la variable de sortie. --- \u00c0 faire vous-m\u00eame 41 --- Dans l'\u00e9diteur de texte, entrez : def maFonction(x: int) -\\int: y = 3 * x + 2 return y On r\u00e9cup\u00e8re le r\u00e9sultat de cette fonction pour x=4 en ajoutant : solution = maFonction(4) Affichez les r\u00e9sultats de cette fonction pour x=1, x=10, x=100. [Rem :]{.ul} Quelle fonction math\u00e9matique est cod\u00e9e ci-dessus ? --- \u00c0 faire vous-m\u00eame 42 --- On d\u00e9finit la fonction \\(f(x) = 2x - 5\\) . En modifiant la fonction pr\u00e9c\u00e9dente et gr\u00e2ce \u00e0 une boucle, faites la somme des f(x) pour x allant de 0 \u00e0 121. --- \u00c0 faire vous-m\u00eame 43 --- Codez en Python la fonction maFonction2 de formule y = ( \\(x^{2}\\) + x) % 10. x et y seront des entiers. Affichez les valeurs de cette fonction pour x = 1, 3, 40 et 145. Une fonction peut prendre plusieurs param\u00e8tres en entr\u00e9e. --- \u00c0 faire vous-m\u00eame 44 --- \u00c9crivez dans l'\u00e9diteur de texte : def nouvelleFonction(x: float, a: int, b: int) -\\float : y = a * x + b return y Quel r\u00e9sultat renvoie cette fonction si x=4, a=-2 et b=8 ? ______________ Quel r\u00e9sultat renvoie cette fonction si x=-4, a=2 et b=-8 ? ______________ --- \u00c0 faire vous-m\u00eame 45 --- \u00c9crivez une fonction qui permette de r\u00e9pondre plus facilement \u00e0 l'encadr\u00e9 #40. Les deux param\u00e8tres d'entr\u00e9e seront le prix HT et le taux de TVA. 14) Jeux de tests : pr\u00e9-condition, post-condition --- \u00c0 faire vous-m\u00eame 46 --- Codez en Python la fonction maFonction2 de formule y = \\(\\sqrt{x}\\) + x % 10. x et y seront des entiers. Affichez les valeurs de cette fonction pour x = 1, 4,121 et 145. [Rem :]{.ul} Que remarquez-vous pour 145 ? Les types sont-ils respect\u00e9s ? Pour respecter les types demand\u00e9s et/ou effectuer des tests sur des fonctions, Python fournit une instruction appel\u00e9e : assert . assert permet de v\u00e9rifier si une condition est v\u00e9rifi\u00e9e : --- \u00c0 faire vous-m\u00eame 47 --- Dans la console, entrez x=2 . Que se passe-t-il si vous entrez assert(x \\1) ? _________________________ Que se passe-t-il si vous entrez assert(x \\3) ? _________________________ --- \u00c0 faire vous-m\u00eame 47 --- Dans le programme 46, apr\u00e8s la d\u00e9finition de la fonction, ajoutez la ligne suivante : assert ( int(sqrt(x)) == sqrt(x) ). Affichez \u00e0 nouveau les valeurs de cette fonction pour x = 1, 4,121 et 145. [Rem :]{.ul} Que remarquez-vous pour 145 ? Les types d'entr\u00e9e sont-ils respect\u00e9s ? [D\u00e9finition]{.ul} : le test que nous venons d'effectuer s'appelle une pr\u00e9-condition. 15) Proc\u00e9dures, fonctions particuli\u00e8res [Rem 1 :]{.ul} Les param\u00e8tres ne sont pas obligatoires. --- \u00c0 faire vous-m\u00eame 48 --- Testez la fonction suivante : def ma_fon() -\\str: return \\\"voici une fonction qui ne sert \u00e0 rien\\\" [Rem 2 :]{.ul} Une fonction ne renvoie pas forc\u00e9ment de valeur (le mot cl\u00e9 return n'est pas obligatoire). Elle peut par exemple afficher une cha\u00eene de caract\u00e8res \u00e0 l'aide d'un \\\"print\\\". Dans certains langages, on utilise les termes m\u00e9thode ou proc\u00e9dure pour qualifier une fonction \\\"qui ne renvoie rien\\\". --- \u00c0 faire vous-m\u00eame 49 --- Testez la fonction suivante : def ditBonjour(nom : str, age: str): phrase = \\\"Bonjour\\\", nom, \\\"vous avez\\\", age, \\\"ans.\\\" print(phrase) Checkpoint 1) [Autour des chaines de caract\u00e8res]{.ul} <!-- -- a. \u00c9crire une fonction \u00ab singleton \u00bb qui prend un string en param\u00e8tre et renvoie \u00ab vrai \u00bb si la liste est \u00e9gale \u00e0 [0]. b. \u00c9crire une fonction \u00ab m\u00eame longueur \u00bb qui prend deux strings en param\u00e8tres (= arguments ) et renvoie vrai si les listes sont de m\u00eame longueur. c. \u00c9crire une fonction \u00ab appartient \u00bb qui prend en entr\u00e9e un string et une lettre et renvoie \u00ab vrai \u00bb si l'\u00e9l\u00e9ment appartient \u00e0 la liste. d. Cr\u00e9er une fonction \u00ab pluriel \u00bb qui rajoute un s au string donn\u00e9 en entr\u00e9e s'il ne se termine pas d\u00e9j\u00e0 par s. <!-- -- 2) [Calcul de pi !]{.ul} <!-- -- a. \u00c9crire une fonction \u00ab factorielle \u00bb qui prend un nombre n en param\u00e8tre et renvoie la valeur de n! . On rappelle que \\(n! = n \\times (n - 1) \\times ... \\times 3 \\times 2 \\times 1\\) . <!-- -- e. \u00c9crire une fonction \u00ab piApprox \u00bb qui prend un nombre n en param\u00e8tre et renvoie la valeur approch\u00e9e de \\(\\pi\\) selon la formule :\\ \\(\\pi \\approx \\left( 2 + 2^{2} \\times \\frac{(1!)^{2}}{3!} + 2^{3} \\times \\frac{(2!)^{2}}{5!} + ... + 2^{n + 1} \\times \\frac{(n!)^{2}}{(2n + 1)!} \\right)\\) \\ On fera varier la valeur de n pour augmenter la pr\u00e9cision. f. Cr\u00e9er une fonction \u00ab checkPi \u00bb qui prend pour argument un nombre flottant eps et qui renvoie la valeur de n telle que la valeur absolue de piApprox moins pi sous inf\u00e9rieure \u00e0 eps .\\ [Aide :]{.ul} check(1e-2) doit vous renvoyer 7. <!-- -- 3) [D\u00e9cryptage]{.ul} <!-- -- a. \u00c9crire une fonction \u00ab uneLettre \u00bb qui prend en param\u00e8tres un message (type string) et une lettre (type string) et qui renvoie le nombre d'apparitions de cette lettre dans ce message.\\ Par exemple : uneLettre('ah lala','a') renvoie 3. <!-- -- g. \u00c9crire une fonction \u00ab histogramme \u00bb qui prend en param\u00e8tre un message (type string) et qui affiche \u00e0 l'\u00e9cran le nombre d'apparitions de toutes les lettres de l'alphabet.\\ Pour g\u00e9n\u00e9rer l'alphabet, on pourra utiliser :\\ from string import *\\ alphabet = ascii_lowercase \\ \\ Par exemple : \\\"ababcdaa\\\" affiche :\\ a : 4\\ b : 2\\ c : 1\\ d : 1 <!-- -- 4) [Probl\u00e8me]{.ul} Une soci\u00e9t\u00e9 de location de voitures propose \u00e0 ses clients deux contrats : Contrat 1 : un forfait de 50\u20ac puis 0,40\u20ac par km parcouru. Contrat 2 : 0,80\u20ac par km parcouru. a. \u00c9crire deux fonctions prix1(x) et prix2(x) qui renvoient le prix pay\u00e9 avec chaque contrat pour x kilom\u00e8tres parcourus. b. En utilisant les fonctions pr\u00e9c\u00e9dentes, \u00e9crire une fonction plusAvantageux(x) qui renvoie le num\u00e9ro du contrat le plus avantageux. <!-- -- 3) [Nombres de Kaprekar]{.ul} Un nombre de Kaprekar est un nombre dont l'\u00e9criture d\u00e9cimale du carr\u00e9 de ce nombre peut \u00eatre s\u00e9par\u00e9e en deux nombres (pas forc\u00e9ment de m\u00eame taille) dont la somme vaut le nombre initial. [Exemples :]{.ul} 9 est un nombre de Kaprekar car 9\u00b2=81 et on peut s\u00e9parer 81 en 8 et 1 dont la somme 8+1 = 9. 45 est un nombre de Kaprekar car 45\u00b2=2025 et on peut s\u00e9parer 2025 en 20+25=45. 12 n'est pas un nombre de Kaprekar car 12\u00b2=144 et on ne peut pas couper ce nombre pour trouver 12 (1+44=45, 14+4=18). 4 879 est un nombre de Kaprekar car 4879\u00b2 = 23804641 et 238 + 04 641 = 4 879. Cr\u00e9er un programme qui renvoie si un nombre entier n est de Kaprekar ou pas.","title":"Paradigmes fonctionnels"},{"location":"sandbox/","text":"Bac \u00e0 sable \u2693\ufe0e \u00c9diteur horizontal \u2693\ufe0e Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder \u00c9diteur vertical \u2693\ufe0e Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder Console \u2693\ufe0e >>>","title":"Bac \u00e0 sable"},{"location":"sandbox/#bac-a-sable","text":"","title":"Bac \u00e0 sable"},{"location":"sandbox/#editeur-horizontal","text":"Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder","title":"\u00c9diteur horizontal"},{"location":"sandbox/#editeur-vertical","text":"Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder","title":"\u00c9diteur vertical"},{"location":"sandbox/#console","text":">>>","title":"Console"},{"location":"tables/","text":"Des questions techniques et m\u00e9taphysiques \u2693\ufe0e Extrait de cours \u2693\ufe0e Cours_Eleves.pdf Fichiers CSV \u2693\ufe0e exemple.csv exemple3.csv exemple_age.csv csv_reader.py Naufrage du Titanic \u2693\ufe0e \u00c0 l'aide du fichier csv_reader.py et du fichier titanic.csv , r\u00e9pondre aux questions ci-dessous : quel est le nom de la passag\u00e8re ag\u00e9e de 53 ans ? A-t-elle surv\u00e9cu ? quel est le nom du passager de 38 ans, pr\u00e9sent en 3\u00e8me classe, ayant surv\u00e9cu ? quel est le nom du passager le plus ag\u00e9 ? quel est le nom du passager ayant pay\u00e9 le plus cher et n'ayant pas surv\u00e9cu \u00e0 la collision avec l'iceberg ? Jack Dawson et Rose sont-ils sur la liste d'embarquement ? On entend souvent : Les femmes et les enfants d'abord ! Vraiment ? Gr\u00e2ce \u00e0 une \u00e9tude de ces donn\u00e9es, expliquer si cette expression est correcte ou non !","title":"Fichiers utiles"},{"location":"tables/#des-questions-techniques-et-metaphysiques","text":"","title":"Des questions techniques et m\u00e9taphysiques"},{"location":"tables/#extrait-de-cours","text":"Cours_Eleves.pdf","title":"Extrait de cours"},{"location":"tables/#fichiers-csv","text":"exemple.csv exemple3.csv exemple_age.csv csv_reader.py","title":"Fichiers CSV"},{"location":"tables/#naufrage-du-titanic","text":"\u00c0 l'aide du fichier csv_reader.py et du fichier titanic.csv , r\u00e9pondre aux questions ci-dessous : quel est le nom de la passag\u00e8re ag\u00e9e de 53 ans ? A-t-elle surv\u00e9cu ? quel est le nom du passager de 38 ans, pr\u00e9sent en 3\u00e8me classe, ayant surv\u00e9cu ? quel est le nom du passager le plus ag\u00e9 ? quel est le nom du passager ayant pay\u00e9 le plus cher et n'ayant pas surv\u00e9cu \u00e0 la collision avec l'iceberg ? Jack Dawson et Rose sont-ils sur la liste d'embarquement ? On entend souvent : Les femmes et les enfants d'abord ! Vraiment ? Gr\u00e2ce \u00e0 une \u00e9tude de ces donn\u00e9es, expliquer si cette expression est correcte ou non !","title":"Naufrage du Titanic"},{"location":"todo/","text":"Des questions techniques et m\u00e9taphysiques \u2693\ufe0e Partis pris \u2693\ufe0e Namespace partag\u00e9 Je trouve ce mode tr\u00e8s pratique car on conserve nos fonctions et variables d'un terminal \u00e0 l'autre au cours d'une le\u00e7on. P\u00e9dagogiquement, c'est plus discutable car certaines variables seront initialis\u00e9es dans le Terminal 1 et utilis\u00e9es dans le Terminal 2. Cela cache la notion d'initialisation. IDE vertical Est-ce vraiment utile de les conserver ? Cela ralentit le chargement de la page web et consomme des ressources pour l'auto-redimensionnement de la partie terminal du IDE. Cela est sp\u00e9cialement visible sur mobile (ou ce mode est d'ailleurs inutile). Quelques modifications ont permis de les conserver sans alt\u00e9rer les performances. macro Python Ma solution est un peu sale mais a-t-on vraiment le choix avec l'inclusion de balise HTML ? J'ai choisi de diviser le probl\u00e8me en sous-fonctions. Cela semble plus lisible \u00e0 pr\u00e9sent avec : lecture de fichier avec def read_ext_file () et def generate_content () , une seule macro IDE avec deux modes ('v' et 'h' par d\u00e9faut). En d\u00e9veloppement \u2693\ufe0e Fichiers javascripts C'est le bazar dans l'appel des fichiers JS. Si quelqu'un peut me mettre de l'ordre dans tout cela, je suis preneur ! J'ai repris l'organisation g\u00e9n\u00e9rale. C'est toujours un peu le bazar mais cela me semble acceptable. Importation automatique de module Pyodide propose un module micropip permettant de charger les modules manquants. Nous pourrions faire des interfaces graphiques \u00e0 l'aide de cela mais est-ce vraiment utile ? Evaluateur de code Avec l'utilisation du code de fjunier , nous pourrions int\u00e9grer un juge en ligne ? Utile ou non ? L'\u00e9valuateur de code est fonctionnel et permet de faire des benchmarks complexes. Le bouton du juge en ligne n'apparaitra que s'il existe un fichier de benchmark test_nom_de_script.py . Le corrig\u00e9 n'apparaitra que si un fichier de corr_nom_de_script.py est pr\u00e9sent. Il faudra cr\u00e9er un pipe pour g\u00e9n\u00e9rer automatiquement un fichier de benchmark depuis un script de corrig\u00e9. Javascript et IDE La solution avec le -1 dans main.py , discut\u00e9e dans le guide technique du IDE, est vraiment naze. Il faut trouver autre chose. Je devais vraiment dormir. On peut tout simplement ajouter une ligne dans le template Jinja2 main.html du custom_dir de mkdocs. Cela permet de charger le javascript n\u00e9cessaire au bon fonctionnement des IDE sans s'emb\u00eater. Boutons et IDE La solution avec le -1 dans main.py , discut\u00e9e dans le guide technique du IDE, est vraiment naze. Il faut trouver autre chose. Ajout de boutons permettant de t\u00e9l\u00e9charger les scripts \u00e9crits et t\u00e9l\u00e9verser les scripts disponibles localement. Evaluateur de code ajout\u00e9. Le style des boutons a \u00e9t\u00e9 repris pour des raisons de compatibilit\u00e9 entre Firefox, Chrome, Safari et Op\u00e9ra.","title":"Des questions techniques et m\u00e9taphysiques"},{"location":"todo/#des-questions-techniques-et-metaphysiques","text":"","title":"Des questions techniques et m\u00e9taphysiques"},{"location":"todo/#partis-pris","text":"Namespace partag\u00e9 Je trouve ce mode tr\u00e8s pratique car on conserve nos fonctions et variables d'un terminal \u00e0 l'autre au cours d'une le\u00e7on. P\u00e9dagogiquement, c'est plus discutable car certaines variables seront initialis\u00e9es dans le Terminal 1 et utilis\u00e9es dans le Terminal 2. Cela cache la notion d'initialisation. IDE vertical Est-ce vraiment utile de les conserver ? Cela ralentit le chargement de la page web et consomme des ressources pour l'auto-redimensionnement de la partie terminal du IDE. Cela est sp\u00e9cialement visible sur mobile (ou ce mode est d'ailleurs inutile). Quelques modifications ont permis de les conserver sans alt\u00e9rer les performances. macro Python Ma solution est un peu sale mais a-t-on vraiment le choix avec l'inclusion de balise HTML ? J'ai choisi de diviser le probl\u00e8me en sous-fonctions. Cela semble plus lisible \u00e0 pr\u00e9sent avec : lecture de fichier avec def read_ext_file () et def generate_content () , une seule macro IDE avec deux modes ('v' et 'h' par d\u00e9faut).","title":"Partis pris"},{"location":"todo/#en-developpement","text":"Fichiers javascripts C'est le bazar dans l'appel des fichiers JS. Si quelqu'un peut me mettre de l'ordre dans tout cela, je suis preneur ! J'ai repris l'organisation g\u00e9n\u00e9rale. C'est toujours un peu le bazar mais cela me semble acceptable. Importation automatique de module Pyodide propose un module micropip permettant de charger les modules manquants. Nous pourrions faire des interfaces graphiques \u00e0 l'aide de cela mais est-ce vraiment utile ? Evaluateur de code Avec l'utilisation du code de fjunier , nous pourrions int\u00e9grer un juge en ligne ? Utile ou non ? L'\u00e9valuateur de code est fonctionnel et permet de faire des benchmarks complexes. Le bouton du juge en ligne n'apparaitra que s'il existe un fichier de benchmark test_nom_de_script.py . Le corrig\u00e9 n'apparaitra que si un fichier de corr_nom_de_script.py est pr\u00e9sent. Il faudra cr\u00e9er un pipe pour g\u00e9n\u00e9rer automatiquement un fichier de benchmark depuis un script de corrig\u00e9. Javascript et IDE La solution avec le -1 dans main.py , discut\u00e9e dans le guide technique du IDE, est vraiment naze. Il faut trouver autre chose. Je devais vraiment dormir. On peut tout simplement ajouter une ligne dans le template Jinja2 main.html du custom_dir de mkdocs. Cela permet de charger le javascript n\u00e9cessaire au bon fonctionnement des IDE sans s'emb\u00eater. Boutons et IDE La solution avec le -1 dans main.py , discut\u00e9e dans le guide technique du IDE, est vraiment naze. Il faut trouver autre chose. Ajout de boutons permettant de t\u00e9l\u00e9charger les scripts \u00e9crits et t\u00e9l\u00e9verser les scripts disponibles localement. Evaluateur de code ajout\u00e9. Le style des boutons a \u00e9t\u00e9 repris pour des raisons de compatibilit\u00e9 entre Firefox, Chrome, Safari et Op\u00e9ra.","title":"En d\u00e9veloppement"},{"location":"tp10/","text":"TP 8 : Exercices sur les tableaux et les fonctions \u2693\ufe0e Cours Depuis Python 3.6, il est possible d'indiquer les types des variables \u00e0 l'entr\u00e9e et \u00e0 la sortie des fonctions. C'est une fonctionnalit\u00e9 utile pour indiquer \u00e0 un autre programmeur ce que vos fonctions attendent en entr\u00e9e et en sortie. Syntaxe : def nom_de_fonction ( var1 : type1 , var2 : type2 ... ) -> type_sortie avec type qui peut est \u00e9gal \u00e0 str , int , bool ou list [ type ] Exemple Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def afficher(chanson: str) -> None:bksl-nl return Nonebksl-nlbksl-nldef calculerpy-undmoyennepy-und3(a: int, b: int, c: int) -> float:bksl-nl passbksl-nlbksl-nldef calculerpy-undmoyenne(tableau: list[int]) -> float:bksl-nl passbksl-nl Faites l'effort d'utiliser cette syntaxe lorsque vous \u00e9crivez vos programmes ! Exercice 1 \u272a \u2693\ufe0e \u00c9crire une fonction cr\u00e9er_tableau qui prend en param\u00e8tre : un entier n . Cette fonction renvoie un tableau rempli de n fois le nombre 0. Lancer b1 = (\"cr\u00c3\u00a9erpy-undtableau(5) == [0,0,0,0,0]\", \"cr\u00c3\u00a9erpy-undtableau(0) == []\", \"cr\u00c3\u00a9erpy-undtableau(100) == [0]py-str100\",)bksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def cr\u00c3\u00a9erpy-undtableau(n):bksl-nl # ajouter le type des variables bksl-nl # d'entr\u00c3\u00a9e et de sortiebksl-nl passbksl-nl def cr\u00c3\u00a9erpy-undtableau(n: int) -> list[int]:bksl-nl return [0] py-str nbksl-nl A Z Exercice 2 \u272a \u2693\ufe0e \u00c9crire une fonction cr\u00e9er_tableau_cyclique qui prend en param\u00e8tres : un entier n ; un entier n_cycle . Cette fonction renvoie un tableau rempli de taille n, r\u00e9p\u00e9tant les nombres 0 , 1 , 2 , 3 , ... , n_cycle - 1 . Par exemple : >>> cr\u00e9er_tableau_cyclique ( 10 , 3 ) renvoie [ 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 ] Aide Pour r\u00e9p\u00e9ter une s\u00e9quence : 1 % 3 = 1 , 2 % 3 = 2 , 3 % 3 = 0 , 4 % 3 = 1 ... Lancer def validerpy-undvaleur(T, a, b):bksl-nl return all(map(lambda x: a < =x < =b, T))bksl-nlbksl-nlb1 = (\"g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-und0(3) == [0]py-str3\", \"g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-und0(100) == [0]py-str100\", \"g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-und0(0) == []\",)bksl-nlb2 = (\"validerpy-undvaleur(g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undal\u00c3\u00a9atoire(3, 1, 6), 1, 6) == True\", \\bksl-nl \"validerpy-undvaleur(g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undal\u00c3\u00a9atoire(3, 1, 1), 1, 1) == True\", \\bksl-nl \"validerpy-undvaleur(g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undal\u00c3\u00a9atoire(100, 1, 100), 1, 100) == True\",)bksl-nlbksl-nlbenchmark = [b1, b2 ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nl def cr\u00c3\u00a9erpy-undtableaupy-undcyclique(n: int, npy-undcycle: int) -> list[int]:bksl-nl return [i % npy-undcycle for i in range(n)]bksl-nlbksl-nlprint(cr\u00c3\u00a9erpy-undtableaupy-undcyclique(10, 3))bksl-nl A Z Exercice 3 \u272a \u2693\ufe0e \u00c9crire une fonction dessiner_damier qui prend en param\u00e8tres : un entier n . Cette fonction affiche un damier True si la valeur appartient au tableau et False sinon. Lancer def validerpy-undvaleur(T, a, b):bksl-nl return all(map(lambda x: a < =x < =b, T))bksl-nlbksl-nlb1 = (\"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1,3,6], 6) == 1\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([8,8,8], 8) == 3\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1, 8, 1, 8], 8) == 2\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1,3,99], 100) == 0\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nl def v\u00c3\u00a9rifierpy-undappartenance(T, x):bksl-nl if x in T:bksl-nl return Truebksl-nl else:bksl-nl return Falsebksl-nlbksl-nl# oubksl-nlbksl-nldef v\u00c3\u00a9rifierpy-undappartenance(T, x):bksl-nl return x in Tbksl-nl A Z Exercice 4 : retour \u00e0 Syracuse \u272a \u2693\ufe0e \u00c9crire une fonction tester_conjecture qui prend en param\u00e8tres : un tableau d'entiers T ; un entier \u00e9l\u00e9ment . \u00c9crire une fonction mesurer_conjecture Cette fonction compte le nombre de fois o\u00f9 l'\u00e9l\u00e9ment \u00e9l\u00e9ment figure dans le tableau T . Aide On aura sans doute besoin d'un accumulateur comptant le nombre de r\u00e9p\u00e9titions... Lancer def validerpy-undvaleur(T, a, b):bksl-nl return all(map(lambda x: a < =x < =b, T))bksl-nlbksl-nlb1 = (\"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1,3,6], 6) == 1\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([8,8,8], 8) == 3\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1, 8, 1, 8], 8) == 2\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1,3,99], 100) == 0\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nl def compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition(T, \u00c3\u00a9l\u00c3\u00a9ment):bksl-nl compteur = 0bksl-nl for entier in T:bksl-nl if entier == \u00c3\u00a9l\u00c3\u00a9ment:bksl-nl compteur = compteur + 1bksl-nl # une fois le parcours complet du bksl-nl # tableau, on renvoie le compteurbksl-nl return compteurbksl-nl A Z Exercice 5 \u272a \u2693\ufe0e \u00c9crire une fonction spiraler qui prend en param\u00e8tres : un tableau d'entiers T . Cette fonction dessine une spirale carr\u00e9e (angle \u00e0 90\u00b0) dont la longueur est donn\u00e9e par les valeurs du tableau T. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlbksl-nldef spiraler(T):bksl-nl return Nonebksl-nlbksl-nlT = [ipy-str5 for i in range(40)]bksl-nlspiraler(T)bksl-nl import turtlebksl-nlbksl-nldef spiraler(T):bksl-nl for longueur in T:bksl-nl turtle.forward(longueur)bksl-nl turtle.right(90)bksl-nl return Nonebksl-nlbksl-nlT = [ipy-str5 for i in range(40)]bksl-nlspiraler(T)bksl-nl A Z Aide On utilisera turtle . forward ( L ) pour avancer d'une longueur L et turtle . right ( A ) pour tourner \u00e0 droite d'un angle A. Exercice 6 \u272a\u272a \u2693\ufe0e \u00c9crire la fonction trouver_indice qui prend en param\u00e8tres : un tableau d'entiers T ; un entier x . Cette fonction renvoie : l'indice i de la position du premier entier du tableau \u00e9gal \u00e0 x ; None sinon. Lancer b1 = (\"trouverpy-undindice([1,3,6], 1) == 0\", \"trouverpy-undindice([i for i in range(100), 99) == 99\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nlbksl-nlT = [2, 4, 5, 7, 12, 7, 5]bksl-nlindice = trouverpy-undindice(T, 5)bksl-nlprint(indice)bksl-nl def trouverpy-undindice(T, x):bksl-nl for indice in range(len(T)):bksl-nl # si x est trouv\u00c3\u00a9 dans le tableaubksl-nl if T[indice] == x: bksl-nl # on renvoie l'indicebksl-nl return indicebksl-nl # on a fini de parcourir T etbksl-nl # x n'est pas trouv\u00c3\u00a9bksl-nl return Nonebksl-nlbksl-nlT = [2, 4, 5, 7, 12, 7, 5]bksl-nlindice = trouverpy-undindice(T, 5)bksl-nlprint(indice)bksl-nl A Z Point cours ! \u2693\ufe0e Cours Il est \u00e9galement possible de modifier les valeurs d'un tableaux en acc\u00e9dant \u00e0 ses \u00e9l\u00e9ments par indice . Ainsi : T = [ 1 , 2 , 3 ] for i in range ( len ( T )): T [ i ] = T [ i ] * 2 print ( T ) permet de multiplier par 2 tous les \u00e9l\u00e9ments du tableau T . Essayez cet exemple dans le terminal ci-dessous : >>> Exercice 7 \u272a \u2693\ufe0e En vous aidant des commentaires, \u00e9crire la fonction ajouter_lettre qui prend en param\u00e8tres : un tableau de lettres T de taille len ( T ) ; une lettre lettre . Cette fonction renvoie un tableau de lettres T de taille len ( T ) + 1 . Par exemple : ajouter_lettre ([ 'c' , 'a' , 't' ] , 's' ) renvoie [ 'c' , 'a' , 't' , 's' ] Lancer b1 = (\"ajouterpy-undlettre(['a','b'], 'c') == ['a','b','c']\", \"ajouterpy-undlettre([], 'a') == ['a']\", \"ajouterpy-undlettre(['a']py-str3, 'b') == ['a', 'a', 'a', 'b']\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def ajouterpy-undlettre(T, lettre):bksl-nl taille = len(T)bksl-nl # cr\u00c3\u00a9er un nouveau tableau de taille len(T) + 1bksl-nl # rempli de 0bksl-nlbksl-nl # remplir ce tableau gr\u00c3\u00a2ce \u00c3 un parcours de Tbksl-nl # sur les indicesbksl-nlbksl-nl # rajouter la lettre \u00c3 la derni\u00c3\u00a8re position bksl-nl # dans le nouveau tableau (len(T))bksl-nlbksl-nl # renvoyer le nouveaupy-undtableaubksl-nl passbksl-nlbksl-nlT1 = ['c', 'a', 't']bksl-nllettre = 's'bksl-nlT2 = ajouterpy-undlettre(T1, lettre)bksl-nlprint(T2)bksl-nl def ajouterpy-undlettre(T, lettre):bksl-nl taille = len(T)bksl-nl nouveaupy-undtableau = [0] py-str (taille+1)bksl-nl bksl-nl for i in range(taille):bksl-nl nouveaupy-undtableau[i] = T[i]bksl-nl nouveaupy-undtableau[len(T)] = lettrebksl-nl bksl-nl return nouveaupy-undtableaubksl-nlbksl-nlT1 = ['c', 'a', 't']bksl-nllettre = 's'bksl-nlT2 = ajouterpy-undlettre(T1, lettre)bksl-nlprint(T2)bksl-nl A Z Exercice 8 \u272a \u2693\ufe0e Compl\u00e9ter la fonction concat\u00e9ner qui prend en param\u00e8tres : un tableau de nombres entiers T1 de taille len ( T1 ) ; un tableau de nombres entiers T2 de taille len ( T2 ) ; Cette fonction renvoie un tableau d'entiers T de taille len ( T1 ) + len ( T2 ) . Par exemple : concat\u00e9ner ([ 8 , 6 , 4 ] , [ 1 , 2 ]) renvoie [ 8 , 6 , 4 , 1 , 2 ] Lancer b1 = (\"concat\u00c3\u00a9ner([1,3,6], [6]) == [1,3,6,6]\", \"concat\u00c3\u00a9ner([6], [6,1,4]) == [6,6,1,4]\", \"concat\u00c3\u00a9ner([], [6]) == [6]\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def concat\u00c3\u00a9ner(T1, T2):bksl-nl passbksl-nlbksl-nltableau1 = [3, 4, 5]bksl-nltableau2 = [6, 7]bksl-nltableaupy-undcomplet = concat\u00c3\u00a9ner(tableau1, tableau2)bksl-nlprint(tableaupy-undcomplet)bksl-nl def concat\u00c3\u00a9ner(T1, T2):bksl-nl taille1 = len(T1)bksl-nl taille2 = len(T2)bksl-nl bksl-nl nouveaupy-undtableau = [0] py-str (taille1 + taille2)bksl-nl bksl-nl for i in range(taille1):bksl-nl nouveaupy-undtableau[i] = T1[i]bksl-nl for i in range(taille2):bksl-nl # On ne veut pas r\u00c3\u00a9\u00c3\u00a9crire sur les indices 0, 1 ,2...bksl-nl nouveaupy-undtableau[i + taille1] = T2[i]bksl-nl bksl-nl return nouveaupy-undtableaubksl-nlbksl-nltableau1 = [3, 4, 5]bksl-nltableau2 = [6, 7]bksl-nltableaupy-undcomplet = concat\u00c3\u00a9ner(tableau1, tableau2)bksl-nlprint(tableaupy-undcomplet)bksl-nl A Z Exercice 9 \u272a \u2693\ufe0e \u00c9crire la fonction prefixe qui prend en param\u00e8tres : un tableau de nombres entiers T1 de taille len ( T1 ) ; un tableau de nombres entiers T2 de taille len ( T2 ) ; Cette fonction renvoie True si le tableau T2 commence par tous les \u00e9l\u00e9ments du tableau T1 dans le m\u00eame ordre et False sinon. Lancer b1 = (\"prefixe([5], [5, 3, 1, 8, 8]) == True\", \\bksl-nl \"prefixe([3], [1, 8, 8]) == False\", \\bksl-nl \"prefixe([8,8,8], [8]) == False\", \\bksl-nl \"prefixe([], [5, 3, 1, 8, 8]) == True\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def prefixe(T1, T2):bksl-nl taillepy-undT1 = len(T1)bksl-nl taillepy-undT2 = len(T2)bksl-nl passbksl-nlbksl-nlT1 = [5, 6, 3, 1]bksl-nlT2 = [5, 6, 3, 1, 8, 8]bksl-nlprint(prefixe(T1, T2))bksl-nlprint(prefixe(T2, T1))bksl-nl def prefixe(T1, T2):bksl-nl taillepy-undT1 = len(T1)bksl-nl taillepy-undT2 = len(T2)bksl-nl # cas o\u00c3\u00b9 T2 est plus petit que T1bksl-nl # T1 ne peut pas \u00c3\u00aatre un pr\u00c3\u00a9fixe...bksl-nl if taillepy-undT2 < taillepy-undT1:bksl-nl return Falsebksl-nlbksl-nl for indice in range(taillepy-undT1):bksl-nl if T1[indice] != T2[indice]:bksl-nl return Falsebksl-nl else:bksl-nl print(\"Jusque-l\u00c3 , tout va bien...\")bksl-nl # on a parcouru tout T1 et tous les \u00c3\u00a9l\u00c3\u00a9ments bksl-nl # sont les m\u00c3\u00aamesbksl-nl return Truebksl-nlbksl-nlT1 = [5, 6, 3, 1]bksl-nlT2 = [5, 6, 3, 1, 8, 8]bksl-nlprint(prefixe(T1, T2))bksl-nlprint(prefixe(T2, T1))bksl-nlbksl-nlbksl-nl A Z Exercice 10 \u272a\u272a \u2693\ufe0e \u00c9crire la fonction suffixe qui prend en param\u00e8tres : un tableau de nombres entiers T1 de taille len ( T1 ) ; un tableau de nombres entiers T2 de taille len ( T2 ) ; Cette fonction renvoie True si le tableau T2 termine par tous les \u00e9l\u00e9ments du tableau T1 dans le m\u00eame ordre et False sinon. Lancer b1 = (\"suffixe([8, 5], [1, 8, 5]) == True\", \\bksl-nl \"suffixe([3], [1, 8, 8]) == False\",\\bksl-nl \"suffixe([8,8,8], [8]) == False\",\\bksl-nl \"suffixe([], [5, 3, 1, 8]) == True\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def suffixe(T1, T2):bksl-nl taillepy-undT1 = len(T1)bksl-nl taillepy-undT2 = len(T2)bksl-nl bksl-nlbksl-nlT1 = [1, 8, 8]bksl-nlT2 = [5, 6, 3, 1, 8, 8]bksl-nlprint(suffixe(T1, T2))bksl-nlprint(suffixe(T2, T1))bksl-nlbksl-nlbksl-nl def suffixe(T1, T2):bksl-nl taillepy-undT1 = len(T1)bksl-nl taillepy-undT2 = len(T2)bksl-nl # cas o\u00c3\u00b9 T2 est plus petit que T1bksl-nl # T1 ne peut pas \u00c3\u00aatre un pr\u00c3\u00a9fixe...bksl-nl if taillepy-undT2 < taillepy-undT1:bksl-nl return Falsebksl-nlbksl-nl for indice in range(taillepy-undT1):bksl-nl if T1[taillepy-undT1 - indice - 1] != T2[taillepy-undT2 - indice - 1]:bksl-nl return Falsebksl-nl else:bksl-nl print(\"Jusque-l\u00c3 , tout va bien...\")bksl-nl # on a parcouru tout T1 dans l'ordre inversebksl-nl # et tous les \u00c3\u00a9l\u00c3\u00a9ments sont les m\u00c3\u00aamesbksl-nl return Truebksl-nlbksl-nlT1 = [1, 8, 8]bksl-nlT2 = [5, 6, 3, 1, 8, 8]bksl-nlprint(suffixe(T1, T2))bksl-nlprint(suffixe(T2, T1))bksl-nl A Z Aide Pour lire un tableau dans le sens inverse, il faut trouver une formule \u00e0 appliquer sur les indices du tableau. Par exemple, un tableau de taille 4 va se parcourir ainsi sur l'indice i par ordre croissant : i 0 1 2 3 ??? 3 2 1 0 Quelle sera la formule \u00e0 \u00e9crire \u00e0 la place des ??? pour obtenir 3 quand i vaut 0; 2 quand i vaut 1 etc. Exercice 11 \u272a\u272a \u2693\ufe0e \u00c9crire la fonction d\u00e9terminer_minimum qui prend en param\u00e8tres : un entier taille_T1 ; un entier taille_T2 ; Cette fonction renvoie le maximum des deux tailles. \u00c9crire la fonction distance_hamming qui prend en param\u00e8tres : un tableau de cha\u00eene de caract\u00e8res T1 de taille len ( T1 ) ; un tableau de cha\u00eene de caract\u00e8res T2 de taille len ( T2 ) ; Cette fonction renvoie le nombre de lettres qui diff\u00e8re d'un tableau \u00e0 l'autre. Si les tableaux sont de taille diff\u00e9rente, les caract\u00e8res en trop seront compt\u00e9s comme des diff\u00e9rences : on utilisera la fonction d\u00e9terminer_minimum pour comparer la taille des tableaux. Par exemple : distance_hamming ([ 't' , 'o' , 't' , 'o' ] , [ 't' , 'a' , 't' , 'a' ]) renvoie [ 8 , 6 , 4 , 1 , 2 ] Lancer b1 = (\"d\u00c3\u00a9terminerpy-undminimum(8, 2) == 2\", \"d\u00c3\u00a9terminerpy-undminimum(1, 8) == 1\", \"d\u00c3\u00a9terminerpy-undminimum(-1, -2) == -2\")bksl-nlb2 = (\"distancepy-undhamming(['c', 'h', 'a', 't'], ['c', 'h', 'a', 't']) == 0\", \\bksl-nl \"distancepy-undhamming(['c', 'h', 'i', 'e', 'n'], ['c', 'h', 'i', 'o', 't']) == 2\", \\bksl-nl \"distancepy-undhamming(['c', 'h', 'a', 't'], ['c', 'h', 'a', 't', 'o', 'n']) == 2\",bksl-nl \"distancepy-undhamming(['v', 'i', 'd', 'e'], []) == 4\")bksl-nlbksl-nlbenchmark = [b1, b2 ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def d\u00c3\u00a9terminerpy-undminimum(taillepy-undT1, taillepy-undT2):bksl-nl passbksl-nlbksl-nldef distancepy-undhamming(T1, T2):bksl-nl passbksl-nlbksl-nlT1 = ['a', 'c', 'b', 'a']bksl-nlT2 = ['a', 'b', 'b', 'a', 'c', 'd', 'd']bksl-nlbksl-nlprint(distancepy-undhamming(T1, T2)) # doit renvoyer 4bksl-nl def d\u00c3\u00a9terminerpy-undminimum(taillepy-undT1, taillepy-undT2):bksl-nl if taillepy-undT2 > taillepy-undT1: return taillepy-undT1bksl-nl else: return taillepy-undT2bksl-nlbksl-nldef distancepy-undhamming(T1, T2):bksl-nl taillepy-undT1 = len(T1)bksl-nl taillepy-undT2 = len(T2)bksl-nl taillepy-undminimum = d\u00c3\u00a9terminerpy-undminimum(taillepy-undT1, taillepy-undT2)bksl-nlbksl-nl diff\u00c3\u00a9rence = 0bksl-nl for indice in range(taillepy-undminimum):bksl-nl if T1[indice] != T2[indice]:bksl-nl diff\u00c3\u00a9rence = diff\u00c3\u00a9rence + 1bksl-nlbksl-nl if taillepy-undT1 > taillepy-undminimum:bksl-nl manquant = taillepy-undT1 - taillepy-undminimumbksl-nl else:bksl-nl manquant = taillepy-undT2 - taillepy-undminimumbksl-nlbksl-nl diff\u00c3\u00a9rence = diff\u00c3\u00a9rence + manquantbksl-nl return diff\u00c3\u00a9rencebksl-nlbksl-nlT1 = ['a', 'c', 'b', 'a']bksl-nlT2 = ['a', 'b', 'b', 'a', 'c', 'd', 'd']bksl-nlbksl-nlprint(distancepy-undhamming(T1, T2))bksl-nl A Z Exercice 12 \u272a\u272a\u272a \u2693\ufe0e Comme nous le verrons par la suite, les algorithmes de tri de tableaux sont un cas fondamental en th\u00e9orie informatique. Ils permettent d'aborder la notion d'efficacit\u00e9 au travers de la complexit\u00e9 (~ le co\u00fbt) d'un algorithme. Nous proposons ici d'impl\u00e9menter une m\u00e9thode de tri tr\u00e8s simple. Prenons le tableau suivant : [ 5 , 3 , 2 , 7 ] Premier passage dans la boucle externe \u00c9tape i = 0 : pla\u00e7ons le plus petit \u00e9l\u00e9ment \u00e0 l' indice 0 du tableau. Passage j = 0 5 3 2 7 5 == 5 \u2192 On ne fait rien. Passage j = 1 5 3 2 7 3 <= 5 \u2192 On \u00e9change T [ 1 ] avec T [ 0 ] Passage j = 2 3 5 2 7 2 <= 3 \u2192 On \u00e9change T [ 2 ] avec T [ 0 ] Passage j = 3 2 5 3 7 7 >= 2 \u2192 On ne fait rien. i = 0 contient l'\u00e9l\u00e9ment le plus petit. Deuxi\u00e8me passage dans la boucle externe \u00c9tape i = 1 : pla\u00e7ons le second plus petit \u00e9l\u00e9ment \u00e0 l' indice 1 du tableau. Passage j = 0 2 5 3 7 2 <= 5 \u2192 On ne fait rien. Passage j = 1 2 5 3 7 5 == 5 \u2192 On ne fait rien Passage j = 2 2 5 3 7 3 <= 5 \u2192 On \u00e9change T [ 2 ] avec T [ 1 ] Passage j = 3 2 3 5 7 7 >= 3 \u2192 On ne fait rien. i = 1 contient le deuxi\u00e8me \u00e9l\u00e9ment le plus petit. Les deux premiers \u00e9l\u00e9ments du tableau sont tri\u00e9s dans l'ordre croissant. L'algorithme comporte donc deux boucles imbriqu\u00e9es l'une dans l'autre. \u00c0 chaque fois qu'on trouve un nouvel entier plus petit qu' l'entier situ\u00e9 \u00e0 la position i , on l'inverse avec celui situ\u00e9 \u00e0 la position j . \u00c9crire une fonction trier qui prend pour param\u00e8tre un tableau T et r\u00e9alise le tri de ce tableau selon l'algorithme ci-dessus. La fonction renvoie un tableau tri\u00e9 dans l'ordre croissant. Lancer def validerpy-undvaleur(T, a, b):bksl-nl return all(map(lambda x: a < =x < =b, T))bksl-nlbksl-nlb1 = (\"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1,3,6], 6) == 1\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([8,8,8], 8) == 3\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1, 8, 1, 8], 8) == 2\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1,3,99], 100) == 0\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def trier(T):bksl-nl for i in range(len(T)):bksl-nl for j in range(len(T)):bksl-nl if T[i] < T[j]:bksl-nl T[i], T[j] = T[j], T[i]bksl-nl return Tbksl-nlbksl-nlT = [5, 3, 9, 1, 8, 3, -1, 9, 1]bksl-nlprint(T)bksl-nlT = trier(T)bksl-nlprint(T)bksl-nl def trier(T):bksl-nl for i in range(len(T)):bksl-nl for j in range(len(T)):bksl-nl if T[i] < T[j]:bksl-nl T[i], T[j] = T[j], T[i]bksl-nl return Tbksl-nlbksl-nlT = [5, 3, 9, 1, 8, 3, -1, 9, 1]bksl-nlprint(T)bksl-nlT = trier(T)bksl-nlprint(T)bksl-nl A Z","title":"TP 10"},{"location":"tp10/#tp-8-exercices-sur-les-tableaux-et-les-fonctions","text":"Cours Depuis Python 3.6, il est possible d'indiquer les types des variables \u00e0 l'entr\u00e9e et \u00e0 la sortie des fonctions. C'est une fonctionnalit\u00e9 utile pour indiquer \u00e0 un autre programmeur ce que vos fonctions attendent en entr\u00e9e et en sortie. Syntaxe : def nom_de_fonction ( var1 : type1 , var2 : type2 ... ) -> type_sortie avec type qui peut est \u00e9gal \u00e0 str , int , bool ou list [ type ] Exemple Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def afficher(chanson: str) -> None:bksl-nl return Nonebksl-nlbksl-nldef calculerpy-undmoyennepy-und3(a: int, b: int, c: int) -> float:bksl-nl passbksl-nlbksl-nldef calculerpy-undmoyenne(tableau: list[int]) -> float:bksl-nl passbksl-nl Faites l'effort d'utiliser cette syntaxe lorsque vous \u00e9crivez vos programmes !","title":"TP 8 : Exercices sur les tableaux et les fonctions"},{"location":"tp10/#exercice-1","text":"\u00c9crire une fonction cr\u00e9er_tableau qui prend en param\u00e8tre : un entier n . Cette fonction renvoie un tableau rempli de n fois le nombre 0. Lancer b1 = (\"cr\u00c3\u00a9erpy-undtableau(5) == [0,0,0,0,0]\", \"cr\u00c3\u00a9erpy-undtableau(0) == []\", \"cr\u00c3\u00a9erpy-undtableau(100) == [0]py-str100\",)bksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def cr\u00c3\u00a9erpy-undtableau(n):bksl-nl # ajouter le type des variables bksl-nl # d'entr\u00c3\u00a9e et de sortiebksl-nl passbksl-nl def cr\u00c3\u00a9erpy-undtableau(n: int) -> list[int]:bksl-nl return [0] py-str nbksl-nl A Z","title":"Exercice 1 \u272a"},{"location":"tp10/#exercice-2","text":"\u00c9crire une fonction cr\u00e9er_tableau_cyclique qui prend en param\u00e8tres : un entier n ; un entier n_cycle . Cette fonction renvoie un tableau rempli de taille n, r\u00e9p\u00e9tant les nombres 0 , 1 , 2 , 3 , ... , n_cycle - 1 . Par exemple : >>> cr\u00e9er_tableau_cyclique ( 10 , 3 ) renvoie [ 0 , 1 , 2 , 0 , 1 , 2 , 0 , 1 , 2 , 0 ] Aide Pour r\u00e9p\u00e9ter une s\u00e9quence : 1 % 3 = 1 , 2 % 3 = 2 , 3 % 3 = 0 , 4 % 3 = 1 ... Lancer def validerpy-undvaleur(T, a, b):bksl-nl return all(map(lambda x: a < =x < =b, T))bksl-nlbksl-nlb1 = (\"g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-und0(3) == [0]py-str3\", \"g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-und0(100) == [0]py-str100\", \"g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-und0(0) == []\",)bksl-nlb2 = (\"validerpy-undvaleur(g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undal\u00c3\u00a9atoire(3, 1, 6), 1, 6) == True\", \\bksl-nl \"validerpy-undvaleur(g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undal\u00c3\u00a9atoire(3, 1, 1), 1, 1) == True\", \\bksl-nl \"validerpy-undvaleur(g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undal\u00c3\u00a9atoire(100, 1, 100), 1, 100) == True\",)bksl-nlbksl-nlbenchmark = [b1, b2 ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nl def cr\u00c3\u00a9erpy-undtableaupy-undcyclique(n: int, npy-undcycle: int) -> list[int]:bksl-nl return [i % npy-undcycle for i in range(n)]bksl-nlbksl-nlprint(cr\u00c3\u00a9erpy-undtableaupy-undcyclique(10, 3))bksl-nl A Z","title":"Exercice 2 \u272a"},{"location":"tp10/#exercice-3","text":"\u00c9crire une fonction dessiner_damier qui prend en param\u00e8tres : un entier n . Cette fonction affiche un damier True si la valeur appartient au tableau et False sinon. Lancer def validerpy-undvaleur(T, a, b):bksl-nl return all(map(lambda x: a < =x < =b, T))bksl-nlbksl-nlb1 = (\"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1,3,6], 6) == 1\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([8,8,8], 8) == 3\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1, 8, 1, 8], 8) == 2\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1,3,99], 100) == 0\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nl def v\u00c3\u00a9rifierpy-undappartenance(T, x):bksl-nl if x in T:bksl-nl return Truebksl-nl else:bksl-nl return Falsebksl-nlbksl-nl# oubksl-nlbksl-nldef v\u00c3\u00a9rifierpy-undappartenance(T, x):bksl-nl return x in Tbksl-nl A Z","title":"Exercice 3 \u272a"},{"location":"tp10/#exercice-4-retour-a-syracuse","text":"\u00c9crire une fonction tester_conjecture qui prend en param\u00e8tres : un tableau d'entiers T ; un entier \u00e9l\u00e9ment . \u00c9crire une fonction mesurer_conjecture Cette fonction compte le nombre de fois o\u00f9 l'\u00e9l\u00e9ment \u00e9l\u00e9ment figure dans le tableau T . Aide On aura sans doute besoin d'un accumulateur comptant le nombre de r\u00e9p\u00e9titions... Lancer def validerpy-undvaleur(T, a, b):bksl-nl return all(map(lambda x: a < =x < =b, T))bksl-nlbksl-nlb1 = (\"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1,3,6], 6) == 1\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([8,8,8], 8) == 3\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1, 8, 1, 8], 8) == 2\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1,3,99], 100) == 0\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nl def compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition(T, \u00c3\u00a9l\u00c3\u00a9ment):bksl-nl compteur = 0bksl-nl for entier in T:bksl-nl if entier == \u00c3\u00a9l\u00c3\u00a9ment:bksl-nl compteur = compteur + 1bksl-nl # une fois le parcours complet du bksl-nl # tableau, on renvoie le compteurbksl-nl return compteurbksl-nl A Z","title":"Exercice 4 : retour \u00e0 Syracuse \u272a"},{"location":"tp10/#exercice-5","text":"\u00c9crire une fonction spiraler qui prend en param\u00e8tres : un tableau d'entiers T . Cette fonction dessine une spirale carr\u00e9e (angle \u00e0 90\u00b0) dont la longueur est donn\u00e9e par les valeurs du tableau T. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlbksl-nldef spiraler(T):bksl-nl return Nonebksl-nlbksl-nlT = [ipy-str5 for i in range(40)]bksl-nlspiraler(T)bksl-nl import turtlebksl-nlbksl-nldef spiraler(T):bksl-nl for longueur in T:bksl-nl turtle.forward(longueur)bksl-nl turtle.right(90)bksl-nl return Nonebksl-nlbksl-nlT = [ipy-str5 for i in range(40)]bksl-nlspiraler(T)bksl-nl A Z Aide On utilisera turtle . forward ( L ) pour avancer d'une longueur L et turtle . right ( A ) pour tourner \u00e0 droite d'un angle A.","title":"Exercice 5 \u272a"},{"location":"tp10/#exercice-6","text":"\u00c9crire la fonction trouver_indice qui prend en param\u00e8tres : un tableau d'entiers T ; un entier x . Cette fonction renvoie : l'indice i de la position du premier entier du tableau \u00e9gal \u00e0 x ; None sinon. Lancer b1 = (\"trouverpy-undindice([1,3,6], 1) == 0\", \"trouverpy-undindice([i for i in range(100), 99) == 99\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nlbksl-nlT = [2, 4, 5, 7, 12, 7, 5]bksl-nlindice = trouverpy-undindice(T, 5)bksl-nlprint(indice)bksl-nl def trouverpy-undindice(T, x):bksl-nl for indice in range(len(T)):bksl-nl # si x est trouv\u00c3\u00a9 dans le tableaubksl-nl if T[indice] == x: bksl-nl # on renvoie l'indicebksl-nl return indicebksl-nl # on a fini de parcourir T etbksl-nl # x n'est pas trouv\u00c3\u00a9bksl-nl return Nonebksl-nlbksl-nlT = [2, 4, 5, 7, 12, 7, 5]bksl-nlindice = trouverpy-undindice(T, 5)bksl-nlprint(indice)bksl-nl A Z","title":"Exercice 6 \u272a\u272a"},{"location":"tp10/#point-cours","text":"Cours Il est \u00e9galement possible de modifier les valeurs d'un tableaux en acc\u00e9dant \u00e0 ses \u00e9l\u00e9ments par indice . Ainsi : T = [ 1 , 2 , 3 ] for i in range ( len ( T )): T [ i ] = T [ i ] * 2 print ( T ) permet de multiplier par 2 tous les \u00e9l\u00e9ments du tableau T . Essayez cet exemple dans le terminal ci-dessous : >>>","title":"Point cours !"},{"location":"tp10/#exercice-7","text":"En vous aidant des commentaires, \u00e9crire la fonction ajouter_lettre qui prend en param\u00e8tres : un tableau de lettres T de taille len ( T ) ; une lettre lettre . Cette fonction renvoie un tableau de lettres T de taille len ( T ) + 1 . Par exemple : ajouter_lettre ([ 'c' , 'a' , 't' ] , 's' ) renvoie [ 'c' , 'a' , 't' , 's' ] Lancer b1 = (\"ajouterpy-undlettre(['a','b'], 'c') == ['a','b','c']\", \"ajouterpy-undlettre([], 'a') == ['a']\", \"ajouterpy-undlettre(['a']py-str3, 'b') == ['a', 'a', 'a', 'b']\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def ajouterpy-undlettre(T, lettre):bksl-nl taille = len(T)bksl-nl # cr\u00c3\u00a9er un nouveau tableau de taille len(T) + 1bksl-nl # rempli de 0bksl-nlbksl-nl # remplir ce tableau gr\u00c3\u00a2ce \u00c3 un parcours de Tbksl-nl # sur les indicesbksl-nlbksl-nl # rajouter la lettre \u00c3 la derni\u00c3\u00a8re position bksl-nl # dans le nouveau tableau (len(T))bksl-nlbksl-nl # renvoyer le nouveaupy-undtableaubksl-nl passbksl-nlbksl-nlT1 = ['c', 'a', 't']bksl-nllettre = 's'bksl-nlT2 = ajouterpy-undlettre(T1, lettre)bksl-nlprint(T2)bksl-nl def ajouterpy-undlettre(T, lettre):bksl-nl taille = len(T)bksl-nl nouveaupy-undtableau = [0] py-str (taille+1)bksl-nl bksl-nl for i in range(taille):bksl-nl nouveaupy-undtableau[i] = T[i]bksl-nl nouveaupy-undtableau[len(T)] = lettrebksl-nl bksl-nl return nouveaupy-undtableaubksl-nlbksl-nlT1 = ['c', 'a', 't']bksl-nllettre = 's'bksl-nlT2 = ajouterpy-undlettre(T1, lettre)bksl-nlprint(T2)bksl-nl A Z","title":"Exercice 7 \u272a"},{"location":"tp10/#exercice-8","text":"Compl\u00e9ter la fonction concat\u00e9ner qui prend en param\u00e8tres : un tableau de nombres entiers T1 de taille len ( T1 ) ; un tableau de nombres entiers T2 de taille len ( T2 ) ; Cette fonction renvoie un tableau d'entiers T de taille len ( T1 ) + len ( T2 ) . Par exemple : concat\u00e9ner ([ 8 , 6 , 4 ] , [ 1 , 2 ]) renvoie [ 8 , 6 , 4 , 1 , 2 ] Lancer b1 = (\"concat\u00c3\u00a9ner([1,3,6], [6]) == [1,3,6,6]\", \"concat\u00c3\u00a9ner([6], [6,1,4]) == [6,6,1,4]\", \"concat\u00c3\u00a9ner([], [6]) == [6]\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def concat\u00c3\u00a9ner(T1, T2):bksl-nl passbksl-nlbksl-nltableau1 = [3, 4, 5]bksl-nltableau2 = [6, 7]bksl-nltableaupy-undcomplet = concat\u00c3\u00a9ner(tableau1, tableau2)bksl-nlprint(tableaupy-undcomplet)bksl-nl def concat\u00c3\u00a9ner(T1, T2):bksl-nl taille1 = len(T1)bksl-nl taille2 = len(T2)bksl-nl bksl-nl nouveaupy-undtableau = [0] py-str (taille1 + taille2)bksl-nl bksl-nl for i in range(taille1):bksl-nl nouveaupy-undtableau[i] = T1[i]bksl-nl for i in range(taille2):bksl-nl # On ne veut pas r\u00c3\u00a9\u00c3\u00a9crire sur les indices 0, 1 ,2...bksl-nl nouveaupy-undtableau[i + taille1] = T2[i]bksl-nl bksl-nl return nouveaupy-undtableaubksl-nlbksl-nltableau1 = [3, 4, 5]bksl-nltableau2 = [6, 7]bksl-nltableaupy-undcomplet = concat\u00c3\u00a9ner(tableau1, tableau2)bksl-nlprint(tableaupy-undcomplet)bksl-nl A Z","title":"Exercice 8 \u272a"},{"location":"tp10/#exercice-9","text":"\u00c9crire la fonction prefixe qui prend en param\u00e8tres : un tableau de nombres entiers T1 de taille len ( T1 ) ; un tableau de nombres entiers T2 de taille len ( T2 ) ; Cette fonction renvoie True si le tableau T2 commence par tous les \u00e9l\u00e9ments du tableau T1 dans le m\u00eame ordre et False sinon. Lancer b1 = (\"prefixe([5], [5, 3, 1, 8, 8]) == True\", \\bksl-nl \"prefixe([3], [1, 8, 8]) == False\", \\bksl-nl \"prefixe([8,8,8], [8]) == False\", \\bksl-nl \"prefixe([], [5, 3, 1, 8, 8]) == True\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def prefixe(T1, T2):bksl-nl taillepy-undT1 = len(T1)bksl-nl taillepy-undT2 = len(T2)bksl-nl passbksl-nlbksl-nlT1 = [5, 6, 3, 1]bksl-nlT2 = [5, 6, 3, 1, 8, 8]bksl-nlprint(prefixe(T1, T2))bksl-nlprint(prefixe(T2, T1))bksl-nl def prefixe(T1, T2):bksl-nl taillepy-undT1 = len(T1)bksl-nl taillepy-undT2 = len(T2)bksl-nl # cas o\u00c3\u00b9 T2 est plus petit que T1bksl-nl # T1 ne peut pas \u00c3\u00aatre un pr\u00c3\u00a9fixe...bksl-nl if taillepy-undT2 < taillepy-undT1:bksl-nl return Falsebksl-nlbksl-nl for indice in range(taillepy-undT1):bksl-nl if T1[indice] != T2[indice]:bksl-nl return Falsebksl-nl else:bksl-nl print(\"Jusque-l\u00c3 , tout va bien...\")bksl-nl # on a parcouru tout T1 et tous les \u00c3\u00a9l\u00c3\u00a9ments bksl-nl # sont les m\u00c3\u00aamesbksl-nl return Truebksl-nlbksl-nlT1 = [5, 6, 3, 1]bksl-nlT2 = [5, 6, 3, 1, 8, 8]bksl-nlprint(prefixe(T1, T2))bksl-nlprint(prefixe(T2, T1))bksl-nlbksl-nlbksl-nl A Z","title":"Exercice 9 \u272a"},{"location":"tp10/#exercice-10","text":"\u00c9crire la fonction suffixe qui prend en param\u00e8tres : un tableau de nombres entiers T1 de taille len ( T1 ) ; un tableau de nombres entiers T2 de taille len ( T2 ) ; Cette fonction renvoie True si le tableau T2 termine par tous les \u00e9l\u00e9ments du tableau T1 dans le m\u00eame ordre et False sinon. Lancer b1 = (\"suffixe([8, 5], [1, 8, 5]) == True\", \\bksl-nl \"suffixe([3], [1, 8, 8]) == False\",\\bksl-nl \"suffixe([8,8,8], [8]) == False\",\\bksl-nl \"suffixe([], [5, 3, 1, 8]) == True\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def suffixe(T1, T2):bksl-nl taillepy-undT1 = len(T1)bksl-nl taillepy-undT2 = len(T2)bksl-nl bksl-nlbksl-nlT1 = [1, 8, 8]bksl-nlT2 = [5, 6, 3, 1, 8, 8]bksl-nlprint(suffixe(T1, T2))bksl-nlprint(suffixe(T2, T1))bksl-nlbksl-nlbksl-nl def suffixe(T1, T2):bksl-nl taillepy-undT1 = len(T1)bksl-nl taillepy-undT2 = len(T2)bksl-nl # cas o\u00c3\u00b9 T2 est plus petit que T1bksl-nl # T1 ne peut pas \u00c3\u00aatre un pr\u00c3\u00a9fixe...bksl-nl if taillepy-undT2 < taillepy-undT1:bksl-nl return Falsebksl-nlbksl-nl for indice in range(taillepy-undT1):bksl-nl if T1[taillepy-undT1 - indice - 1] != T2[taillepy-undT2 - indice - 1]:bksl-nl return Falsebksl-nl else:bksl-nl print(\"Jusque-l\u00c3 , tout va bien...\")bksl-nl # on a parcouru tout T1 dans l'ordre inversebksl-nl # et tous les \u00c3\u00a9l\u00c3\u00a9ments sont les m\u00c3\u00aamesbksl-nl return Truebksl-nlbksl-nlT1 = [1, 8, 8]bksl-nlT2 = [5, 6, 3, 1, 8, 8]bksl-nlprint(suffixe(T1, T2))bksl-nlprint(suffixe(T2, T1))bksl-nl A Z Aide Pour lire un tableau dans le sens inverse, il faut trouver une formule \u00e0 appliquer sur les indices du tableau. Par exemple, un tableau de taille 4 va se parcourir ainsi sur l'indice i par ordre croissant : i 0 1 2 3 ??? 3 2 1 0 Quelle sera la formule \u00e0 \u00e9crire \u00e0 la place des ??? pour obtenir 3 quand i vaut 0; 2 quand i vaut 1 etc.","title":"Exercice 10 \u272a\u272a"},{"location":"tp10/#exercice-11","text":"\u00c9crire la fonction d\u00e9terminer_minimum qui prend en param\u00e8tres : un entier taille_T1 ; un entier taille_T2 ; Cette fonction renvoie le maximum des deux tailles. \u00c9crire la fonction distance_hamming qui prend en param\u00e8tres : un tableau de cha\u00eene de caract\u00e8res T1 de taille len ( T1 ) ; un tableau de cha\u00eene de caract\u00e8res T2 de taille len ( T2 ) ; Cette fonction renvoie le nombre de lettres qui diff\u00e8re d'un tableau \u00e0 l'autre. Si les tableaux sont de taille diff\u00e9rente, les caract\u00e8res en trop seront compt\u00e9s comme des diff\u00e9rences : on utilisera la fonction d\u00e9terminer_minimum pour comparer la taille des tableaux. Par exemple : distance_hamming ([ 't' , 'o' , 't' , 'o' ] , [ 't' , 'a' , 't' , 'a' ]) renvoie [ 8 , 6 , 4 , 1 , 2 ] Lancer b1 = (\"d\u00c3\u00a9terminerpy-undminimum(8, 2) == 2\", \"d\u00c3\u00a9terminerpy-undminimum(1, 8) == 1\", \"d\u00c3\u00a9terminerpy-undminimum(-1, -2) == -2\")bksl-nlb2 = (\"distancepy-undhamming(['c', 'h', 'a', 't'], ['c', 'h', 'a', 't']) == 0\", \\bksl-nl \"distancepy-undhamming(['c', 'h', 'i', 'e', 'n'], ['c', 'h', 'i', 'o', 't']) == 2\", \\bksl-nl \"distancepy-undhamming(['c', 'h', 'a', 't'], ['c', 'h', 'a', 't', 'o', 'n']) == 2\",bksl-nl \"distancepy-undhamming(['v', 'i', 'd', 'e'], []) == 4\")bksl-nlbksl-nlbenchmark = [b1, b2 ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def d\u00c3\u00a9terminerpy-undminimum(taillepy-undT1, taillepy-undT2):bksl-nl passbksl-nlbksl-nldef distancepy-undhamming(T1, T2):bksl-nl passbksl-nlbksl-nlT1 = ['a', 'c', 'b', 'a']bksl-nlT2 = ['a', 'b', 'b', 'a', 'c', 'd', 'd']bksl-nlbksl-nlprint(distancepy-undhamming(T1, T2)) # doit renvoyer 4bksl-nl def d\u00c3\u00a9terminerpy-undminimum(taillepy-undT1, taillepy-undT2):bksl-nl if taillepy-undT2 > taillepy-undT1: return taillepy-undT1bksl-nl else: return taillepy-undT2bksl-nlbksl-nldef distancepy-undhamming(T1, T2):bksl-nl taillepy-undT1 = len(T1)bksl-nl taillepy-undT2 = len(T2)bksl-nl taillepy-undminimum = d\u00c3\u00a9terminerpy-undminimum(taillepy-undT1, taillepy-undT2)bksl-nlbksl-nl diff\u00c3\u00a9rence = 0bksl-nl for indice in range(taillepy-undminimum):bksl-nl if T1[indice] != T2[indice]:bksl-nl diff\u00c3\u00a9rence = diff\u00c3\u00a9rence + 1bksl-nlbksl-nl if taillepy-undT1 > taillepy-undminimum:bksl-nl manquant = taillepy-undT1 - taillepy-undminimumbksl-nl else:bksl-nl manquant = taillepy-undT2 - taillepy-undminimumbksl-nlbksl-nl diff\u00c3\u00a9rence = diff\u00c3\u00a9rence + manquantbksl-nl return diff\u00c3\u00a9rencebksl-nlbksl-nlT1 = ['a', 'c', 'b', 'a']bksl-nlT2 = ['a', 'b', 'b', 'a', 'c', 'd', 'd']bksl-nlbksl-nlprint(distancepy-undhamming(T1, T2))bksl-nl A Z","title":"Exercice 11 \u272a\u272a"},{"location":"tp10/#exercice-12","text":"Comme nous le verrons par la suite, les algorithmes de tri de tableaux sont un cas fondamental en th\u00e9orie informatique. Ils permettent d'aborder la notion d'efficacit\u00e9 au travers de la complexit\u00e9 (~ le co\u00fbt) d'un algorithme. Nous proposons ici d'impl\u00e9menter une m\u00e9thode de tri tr\u00e8s simple. Prenons le tableau suivant : [ 5 , 3 , 2 , 7 ] Premier passage dans la boucle externe \u00c9tape i = 0 : pla\u00e7ons le plus petit \u00e9l\u00e9ment \u00e0 l' indice 0 du tableau. Passage j = 0 5 3 2 7 5 == 5 \u2192 On ne fait rien. Passage j = 1 5 3 2 7 3 <= 5 \u2192 On \u00e9change T [ 1 ] avec T [ 0 ] Passage j = 2 3 5 2 7 2 <= 3 \u2192 On \u00e9change T [ 2 ] avec T [ 0 ] Passage j = 3 2 5 3 7 7 >= 2 \u2192 On ne fait rien. i = 0 contient l'\u00e9l\u00e9ment le plus petit. Deuxi\u00e8me passage dans la boucle externe \u00c9tape i = 1 : pla\u00e7ons le second plus petit \u00e9l\u00e9ment \u00e0 l' indice 1 du tableau. Passage j = 0 2 5 3 7 2 <= 5 \u2192 On ne fait rien. Passage j = 1 2 5 3 7 5 == 5 \u2192 On ne fait rien Passage j = 2 2 5 3 7 3 <= 5 \u2192 On \u00e9change T [ 2 ] avec T [ 1 ] Passage j = 3 2 3 5 7 7 >= 3 \u2192 On ne fait rien. i = 1 contient le deuxi\u00e8me \u00e9l\u00e9ment le plus petit. Les deux premiers \u00e9l\u00e9ments du tableau sont tri\u00e9s dans l'ordre croissant. L'algorithme comporte donc deux boucles imbriqu\u00e9es l'une dans l'autre. \u00c0 chaque fois qu'on trouve un nouvel entier plus petit qu' l'entier situ\u00e9 \u00e0 la position i , on l'inverse avec celui situ\u00e9 \u00e0 la position j . \u00c9crire une fonction trier qui prend pour param\u00e8tre un tableau T et r\u00e9alise le tri de ce tableau selon l'algorithme ci-dessus. La fonction renvoie un tableau tri\u00e9 dans l'ordre croissant. Lancer def validerpy-undvaleur(T, a, b):bksl-nl return all(map(lambda x: a < =x < =b, T))bksl-nlbksl-nlb1 = (\"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1,3,6], 6) == 1\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([8,8,8], 8) == 3\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1, 8, 1, 8], 8) == 2\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1,3,99], 100) == 0\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def trier(T):bksl-nl for i in range(len(T)):bksl-nl for j in range(len(T)):bksl-nl if T[i] < T[j]:bksl-nl T[i], T[j] = T[j], T[i]bksl-nl return Tbksl-nlbksl-nlT = [5, 3, 9, 1, 8, 3, -1, 9, 1]bksl-nlprint(T)bksl-nlT = trier(T)bksl-nlprint(T)bksl-nl def trier(T):bksl-nl for i in range(len(T)):bksl-nl for j in range(len(T)):bksl-nl if T[i] < T[j]:bksl-nl T[i], T[j] = T[j], T[i]bksl-nl return Tbksl-nlbksl-nlT = [5, 3, 9, 1, 8, 3, -1, 9, 1]bksl-nlprint(T)bksl-nlT = trier(T)bksl-nlprint(T)bksl-nl A Z","title":"Exercice 12 \u272a\u272a\u272a"},{"location":"tp11/","text":"TP 11 : Exercices sur les tableaux et les fonctions \u2693\ufe0e Cours Depuis Python 3.6, il est possible d'indiquer les types des variables \u00e0 l'entr\u00e9e et \u00e0 la sortie des fonctions. C'est une fonctionnalit\u00e9 utile pour indiquer \u00e0 un autre programmeur ce que vos fonctions attendent en entr\u00e9e et en sortie. Syntaxe : def nom_de_fonction ( var1 : type1 , var2 : type2 ... ) -> type_sortie avec type qui peut est \u00e9gal \u00e0 str , int , bool ou m\u00eame list [ type ] def mettre_au_carr\u00e9 ( T : list [ int ]) -> list [ int ]: return [ i ** 2 for i in T ] Faites l'effort d'utiliser cette syntaxe lorsque vous \u00e9crivez vos programmes ! Exercice 0 \u272a \u2693\ufe0e Ceci est un \u00e9chauffement... \u00c9crire une fonction additionner_tableau qui prend en param\u00e8tre : un tableau tableau . Cette fonction renvoie un entier \u00e9gal \u00e0 la somme des \u00e9l\u00e9ments du tableau. Lancer assert additionnerpy-undtableau([1,2,3]) == 6, \\bksl-nl 'additionnerpy-undtableau([1,2,3] == 6'bksl-nlassert additionnerpy-undtableau([1,0,-1]) == 0, \\bksl-nl 'additionnerpy-undtableau([1,0,-1]) == 0'bksl-nlassert additionnerpy-undtableau([]) == 0, \\bksl-nl 'additionnerpy-undtableau([]) == 0'bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def additionnerpy-undtableau(tableau : list[int]) -> int:bksl-nl passbksl-nlbksl-nlT = [1, 2, 3]bksl-nlsomme = additionnerpy-undtableau(T)bksl-nlprint(somme)bksl-nl def additionnerpy-undtableau(tableau : list[int]) -> int:bksl-nl somme = 0bksl-nl for valeur in tableau:bksl-nl somme = somme + valeurbksl-nl return sommebksl-nlbksl-nlT = [1, 2, 3]bksl-nlsomme = additionnerpy-undtableau(T)bksl-nlprint(somme)bksl-nl A Z Exercice 1 \u272a \u2693\ufe0e Exemple Cet exercice se propose de vous faire d\u00e9couvrir le principe des tableaux de tableaux. De mani\u00e8re simple, un tableau de tableaux s'\u00e9crit : T = [[ 'Case 00' , 'Case 01' , 'Case 02' ], [ 'C 10' , 'C 11' , 'C 12' ]] Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder T = [['00', '01', '02'], ['10', '11', '12', '13'], ['20']]bksl-nlbksl-nl# qu'affiche la ligne ci-dessous ?bksl-nlprint(T[0])bksl-nlbksl-nl# Tapez l'instruction permettant d'afficher ['20']bksl-nlbksl-nlbksl-nl# qu'affiche la ligne ci-dessous ?bksl-nlprint(T[0][2])bksl-nlbksl-nl# Tapez l'instruction permettant d'afficher '11'bksl-nlbksl-nl \u00c9crire une fonction renvoyer_ligne qui prend deux param\u00e8tres : un tableau de tableaux tableau ; un num\u00e9ro de ligne n_ligne . Cette fonction renvoie un tableau constitu\u00e9 de la n-\u00e8me ligne du tableau de tableaux. Lancer assert renvoyerpy-undligne([[1,2,3], [4,5,6,7], [8,9]], 0) == [1,2,3], \\bksl-nl 'renvoyerpy-undligne([[1,2,3], [4,5,6,7], [8,9]], 0) == [1,2,3]'bksl-nlassert renvoyerpy-undligne([[], [4,5,6,7], [8,9]], 2) == [8, 9], \\bksl-nl 'renvoyerpy-undligne([[], [4,5,6,7], [8,9]], 2) == [8, 9]'bksl-nlbksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def renvoyerpy-undligne(tableau : list[list[int]], npy-undligne : int) -> list[int]:bksl-nl passbksl-nlbksl-nlT = [[1,2,3], [4,5,6,7], [8,9]]bksl-nlnouveaupy-undtableau = renvoyerpy-undligne(T, 1)bksl-nlprint(nouveaupy-undtableau)bksl-nl def renvoyerpy-undligne(tableau : list[list[int]], npy-undligne : int) -> list[int]:bksl-nl return tableau[npy-undligne]bksl-nlbksl-nlT = [[1,2,3], [4,5,6,7], [8,9]]bksl-nlnouveaupy-undtableau = renvoyerpy-undligne(T, 1)bksl-nlprint(nouveaupy-undtableau)bksl-nl A Z Exercice 2 \u272a \u2693\ufe0e La fonction renvoyer_ligne cr\u00e9\u00e9e \u00e0 l'exercice 1 ne marche pas dans tous les cas. Modifier le code pr\u00e9c\u00e9dent afin de renvoyer [] si on ne peut pas extraire la n-\u00e8me ligne du tableau car celle-ci est trop grande ou trop petite... Lancer assert renvoyerpy-undligne([[1,2,3], [4,5,6,7], [8,9]], 0) == [1,2,3], \\bksl-nl 'renvoyerpy-undligne([[1,2,3], [4,5,6,7], [8,9]], 0) == [1,2,3]'bksl-nlassert renvoyerpy-undligne([[], [4,5,6,7], [8,9]], 2) == [8, 9], \\bksl-nl 'renvoyerpy-undligne([[], [4,5,6,7], [8,9]], 2) == [8, 9]'bksl-nlassert renvoyerpy-undligne([[1], [4,5,6,7], [8,9]], 10) == [], \\bksl-nl 'renvoyerpy-undligne([[1], [4,5,6,7], [8,9]], 10) == []'bksl-nlassert renvoyerpy-undligne([[1], [4,5,6,7], [8,9]], -1) == [], \\bksl-nl 'renvoyerpy-undligne([[1], [4,5,6,7], [8,9]], -1) == []'bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def renvoyerpy-undligne(tableau : list[list[int]], npy-undligne : int) -> list[int]:bksl-nl passbksl-nlbksl-nlT = [[1,2,3], [4,5,6,7], [8,9]]bksl-nlnouveaupy-undtableau = renvoyerpy-undligne(T, 1)bksl-nlprint(nouveaupy-undtableau)bksl-nl def renvoyerpy-undligne(tableau : list[list[int]], npy-undligne : int) -> list[int]:bksl-nl if not (0 < npy-undligne < len(tableau)):bksl-nl return []bksl-nl return tableau[npy-undligne]bksl-nlbksl-nlT = [[1,2,3], [4,5,6,7], [8,9]]bksl-nlnouveaupy-undtableau = renvoyerpy-undligne(T, 1)bksl-nlprint(nouveaupy-undtableau)bksl-nl A Z Exercice 3 \u272a \u2693\ufe0e On souhaite \u00e0 pr\u00e9sent \u00e9crire une fonction renvoyer_diagonale_down qui prend en param\u00e8tre : un tableau de tableaux tableau de taille 3 par 3; ; Cette fonction renvoie un tableau constitu\u00e9 des valeurs de la diagonale descendante du tableau de tableaux. On peut se r\u00e9f\u00e9rer au sch\u00e9ma ci-dessous repr\u00e9sentant un tableau python T = [[ 00 , 01 , 02 ], [ 10 , 11 , 12 ], [ 20 , 21 , 22 ]] de taille 3 par 3. 00 01 02 10 11 12 20 21 22 Lancer assert renvoyerpy-unddiagonalepy-unddown([[0, 0, 0], [1, -1, 1], [1, -1, 1]]) == [0,-1,1], \\bksl-nl 'renvoyerpy-unddiagonalepy-unddown([[0, 0, 0], [1, -1, 1], [1, -1, 1]]) == [0,-1,1]'bksl-nlassert renvoyerpy-unddiagonalepy-unddown([[0, 0, 0], [1, 0, 1], [1, -1, 0]]) == [0,0,0], \\bksl-nl 'renvoyerpy-unddiagonalepy-unddown([[0, 0, 0], [1, 0, 1], [1, -1, 0]]) == [0,0,0]'bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def renvoyerpy-unddiagonalepy-unddown(tableau : list[list[int]]) -> list[int]:bksl-nl taillepy-undtableau = len(tableau) # nombre de lignesbksl-nl tableaupy-undsortie = [0] py-str taillepy-undtableaubksl-nl for i in range(taillepy-undtableau):bksl-nl passbksl-nl return bksl-nlbksl-nl# ou en une ligne si vous avez la motivation et la foi!bksl-nlbksl-nltableau = [[0, 0, 0], [1, -1, 1], [1, -1, 1]]bksl-nldiagonalepy-unddown = renvoyerpy-unddiagonalepy-unddown(tableau)bksl-nlprint(diagonalepy-unddown)bksl-nl def renvoyerpy-unddiagonalepy-unddown(tableau : list[list[int]]) -> list[int]:bksl-nl taillepy-undtableau = len(tableau) # nombre de lignesbksl-nl tableaupy-undsortie = [0] py-str taillepy-undtableaubksl-nl for i in range(taillepy-undtableau):bksl-nl tableaupy-undsortie[i] = tableau[i][i]bksl-nl return tableaupy-undsortiebksl-nlbksl-nl# ou en une ligne !bksl-nldef renvoyerpy-unddiagonalepy-unddown(tableau : list[list[int]]) -> list[int]:bksl-nl return [tableau[i][i] for i in range(len(tableau))]bksl-nlbksl-nltableau = [[0, 0, 0], [1, -1, 1], [1, -1, 1]]bksl-nldiagonalepy-unddown = renvoyerpy-unddiagonalepy-unddown(tableau)bksl-nlprint(diagonalepy-unddown)bksl-nl A Z Exercice 4 \u272a \u2693\ufe0e On souhaite \u00e0 pr\u00e9sent \u00e9crire une fonction renvoyer_diagonale_up qui prend en param\u00e8tre : un tableau de tableaux tableau de taille 3 par 3. Cette fonction renvoie un tableau constitu\u00e9 des valeurs de la diagonale ascendante du tableau de tableaux. Au lieu de proc\u00e9der de mani\u00e8re brutale, on trouvera une relation math\u00e9matique entre les indices i des lignes et les indices j des colonnes. Remarquer les nombres en gras... 00 01 02 10 11 12 20 21 22 Lancer assert renvoyerpy-unddiagonalepy-undup([[0, 0, 0], [1, -1, 1], [1, -1, 1]]) == [1,-1,0], \\bksl-nl 'renvoyerpy-unddiagonalepy-unddown([[0, 0, 0], [1, -1, 1], [1, -1, 1]]) == [1,-1,0]'bksl-nlassert renvoyerpy-unddiagonalepy-undup([[0, 0, 0], [1, 0, 1], [1, -1, 0]]) == [1,0,0], \\bksl-nl 'renvoyerpy-unddiagonalepy-unddown([[0, 0, 0], [1, 0, 1], [1, -1, 0]]) == [1,0,0]'bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def renvoyerpy-unddiagonalepy-undup(tableau : list[list[int]]) -> list[int]:bksl-nl bksl-nl return bksl-nlbksl-nl# ou en une ligne si vous avez la motivation et la foi!bksl-nlbksl-nltableau = [[0, 0, 0], [1, -1, 1], [1, -1, 1]]bksl-nldiagonalepy-unddown = renvoyerpy-unddiagonalepy-undup(tableau)bksl-nlprint(diagonalepy-unddown)bksl-nl def renvoyerpy-unddiagonalepy-undup(tableau : list[list[int]]) -> list[int]:bksl-nl taillepy-undtableau = len(tableau) # nombre de lignesbksl-nl taillepy-undcolonne = len(tableau[0]) # nombre de colonnesbksl-nl tableaupy-undsortie = [0] py-str taillepy-undtableaubksl-nl for i in range(taillepy-undtableau):bksl-nl # i + j == 2:bksl-nl tableaupy-undsortie[i] = tableau[i][2-i]bksl-nl return tableaupy-undsortiebksl-nlbksl-nl# ou en une ligne !bksl-nldef renvoyerpy-unddiagonalepy-undup(tableau : list[list[int]]) -> list[int]:bksl-nl return [tableau[i][2-i] for i in range(len(tableau))]bksl-nlbksl-nltableau = [[0, 0, 0], [1, -1, 1], [1, -1, 1]]bksl-nldiagonalepy-unddown = renvoyerpy-unddiagonalepy-undup(tableau)bksl-nlprint(diagonalepy-unddown)bksl-nl A Z Exercice 5 \u272a\u272a \u2693\ufe0e \u00c9crire une fonction renvoyer_colonne qui prend deux param\u00e8tres : un tableau de tableaux tableau de taille carr\u00e9e (3 par 3, 4 par 4...) ; un num\u00e9ro de colonne n_col . Cette fonction renvoie un tableau constitu\u00e9 de la n-\u00e8me colonne du tableau de tableaux. On sera amen\u00e9 \u00e0 utiliser l'instruction append . Lancer assert renvoyerpy-undcolonne([[1,2,3], [4,5,7], [8,9,7]], 0) == [1,4,8], \\bksl-nl 'renvoyerpy-undcolonne([[1,2,3], [4,5,7], [8,9,7]], 0) == [1,4,8]'bksl-nlassert renvoyerpy-undcolonne([[1,1,0], [4,5,0], [8,9,0]], 2) == [0,0,0], \\bksl-nl 'renvoyerpy-undcolonne([[1,1,0], [4,5,0], [8,9,0]], 2) == [0,0,0]'bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def renvoyerpy-undcolonne(tableau : list[list[int]], npy-undcolonne : int) -> list[int]:bksl-nl passbksl-nlbksl-nlT = [[1,2,3], [4,5,6,7], [8,9]]bksl-nlnouveaupy-undtableau = renvoyerpy-undcolonne(T, 1)bksl-nlprint(nouveaupy-undtableau)bksl-nl def renvoyerpy-undcolonne(tableau : list[list[int]], npy-undcolonne : int) -> list[int]:bksl-nl # on doit reconstruire un tableau \u00c3 partir des valeursbksl-nl # extraites ligne par lignebksl-nl # on nn connait pas la taille finale du tableau...bksl-nl tableaupy-undsortie = [] bksl-nl for i in range(len(tableau)):bksl-nl for j in range(len(tableau[i])):bksl-nl if j == npy-undcolonne:bksl-nl tableaupy-undsortie.append(tableau[i][npy-undcolonne])bksl-nl return tableaupy-undsortiebksl-nlbksl-nlT = [[1,2,3], [4,5,6], [8,9, 10]]bksl-nlnouveaupy-undtableau = renvoyerpy-undcolonne(T, 1)bksl-nlprint(nouveaupy-undtableau)bksl-nl A Z Exercice 6 \u272a\u272a \u2693\ufe0e \u00c9crire une fonction convertir_tableau_tableau qui prend en param\u00e8tres : un tableau de tableaux tableau constitu\u00e9 de 1 et de -1 ; Cette fonction renvoie un tableau constitu\u00e9 de croix et de ronds suivant les r\u00e8gles suivantes : un 1 devient la cha\u00eene de caract\u00e8re \" \\u00D7 \" un -1 devient la cha\u00eene de caract\u00e8re \" \\u25CB \" un 0 devient \" \" Lancer assert convertirpy-undtableaupy-undtableau([[0,1,-1], [1,-1,1], [0, 0, 1]]) == [[' ', '\u00c3\u2014', '\u00e2\u2014\u00af'], ['\u00c3\u2014', '\u00e2\u2014\u00af', '\u00c3\u2014'], [' ', ' ', '\u00c3\u2014']], \\bksl-nl \"convertirpy-undtableaupy-undtableau([[0,1,-1], [1,-1,1], [0, 0, 1]]) == [[' ', '\u00c3\u2014', '\u00e2\u2014\u00af'], ['\u00c3\u2014', '\u00e2\u2014\u00af', '\u00c3\u2014'], [' ', ' ', '\u00c3\u2014']]\"bksl-nlbksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def convertirpy-undtableaupy-undtableau(tableau : list[list[int]]) -> list[list[int]]:bksl-nl tableaupy-undsortie = [[0 for i in range(3)] for j in range(3)]bksl-nl bksl-nl return tableaupy-undsortiebksl-nlbksl-nl# afficher le tableau Python sous une forme sympathiquebksl-nldef afficher(tableau: list[list[int]]) -> None:bksl-nl for ligne in tableau:bksl-nl for valeur in ligne:bksl-nl print(valeur, end = \"\")bksl-nl print()bksl-nlbksl-nlT = [[0,1,-1], [1,-1,1], [0, 0, 1]]bksl-nlnouveaupy-undtableau = convertirpy-undtableaupy-undtableau(T)bksl-nlafficher(nouveaupy-undtableau)bksl-nl def convertirpy-undtableaupy-undtableau(tableau : list[list[int]]) -> list[list[int]]:bksl-nl tableaupy-undsortie = [[0 for i in range(3)] for j in range(3)]bksl-nl for i in range(len(tableau)):bksl-nl for j in range(len(tableau)):bksl-nl if tableau[i][j] == 1:bksl-nl tableaupy-undsortie[i][j] = \"\\u00D7\"bksl-nl elif tableau[i][j] == -1:bksl-nl tableaupy-undsortie[i][j] = \"\\u25EF\"bksl-nl else:bksl-nl tableaupy-undsortie[i][j] = \" \"bksl-nl return tableaupy-undsortiebksl-nlbksl-nldef afficher(tableau: list[list[int]]) -> None:bksl-nl for ligne in tableau:bksl-nl for valeur in ligne:bksl-nl print(valeur, end = \"\")bksl-nl print()bksl-nlbksl-nlT = [[0,1,-1], [1,-1,1], [0, 0, 1]]bksl-nlnouveaupy-undtableau = convertirpy-undtableaupy-undtableau(T)bksl-nlafficher(nouveaupy-undtableau)bksl-nlprint(nouveaupy-undtableau)bksl-nl A Z Exercice 7 \u272a\u272a\u272a \u2693\ufe0e Peut-\u00eatre que certains d'entre vous l'on vu arriver : \u00e0 l'aide de nos fonctions pr\u00e9c\u00e9dentes, nous allons r\u00e9aliser un jeu du Morpion. Pour cela, vous allez devoir aller sur Thonny sur le Raspberry et copier toutes les fonctions pr\u00e9c\u00e9dentes. \u00c9crire une fonction finir_partie qui v\u00e9rifie si un des joueurs a gagn\u00e9. Cette fonction prend le tableau de tableau en param\u00e8tre et renvoie un bool\u00e9en. \u00c9crire une fonction jouer_morpion qui ne prend aucun param\u00e8tre et qui renvoie le nom du joueur gagnant. Je vous donne gentiment la fonction poser_jeton qui prend en param\u00e8tre un tableau de tableau et un num\u00e9ro de joueur (1 ou -1) . Cette fonction ajoute un jeton dans le tableau de tableaux. Pour ajouter un nouveau jeton en (1, 3), taper dans le terminal 1 , 3 . Prener le temps de tester cette fonction dans Thonny et de comprendre chaque partie!! Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def poserpy-undjeton(tableau : list[list[int]], npy-undjoueur : int) -> list[list[int]]:bksl-nl # Mmmm... Pourquoi ce input et ce split ?bksl-nl npy-undligne, npy-undcolonne = map(int, input('Positionne ton pion : ').split(','))bksl-nlbksl-nl # ca sert \u00c3 quoi ces lignes 5 et 6 ??bksl-nl while not(1 <= npy-undligne <= 3 and 1 <= npy-undcolonne <= 3):bksl-nl npy-undligne, npy-undcolonne = map(int, input(\"Positionne ton pion : \").split(','))bksl-nlbksl-nl # des -1, mais quelle id\u00c3\u00a9e ??bksl-nl npy-undligne = npy-undligne - 1bksl-nl npy-undcolonne = npy-undcolonne - 1bksl-nlbksl-nl # Woah. C'est quoi \u00c3\u00a7a ?bksl-nl tableau[npy-undligne][npy-undcolonne] = npy-undjoueurbksl-nlbksl-nl # Monsieur, c'est obligatoire ce return ?bksl-nl return tableaubksl-nlbksl-nl# print(poserpy-undjeton([[0]py-str3 for i in range(3)], 1))bksl-nl A Z","title":"TP 11"},{"location":"tp11/#tp-11-exercices-sur-les-tableaux-et-les-fonctions","text":"Cours Depuis Python 3.6, il est possible d'indiquer les types des variables \u00e0 l'entr\u00e9e et \u00e0 la sortie des fonctions. C'est une fonctionnalit\u00e9 utile pour indiquer \u00e0 un autre programmeur ce que vos fonctions attendent en entr\u00e9e et en sortie. Syntaxe : def nom_de_fonction ( var1 : type1 , var2 : type2 ... ) -> type_sortie avec type qui peut est \u00e9gal \u00e0 str , int , bool ou m\u00eame list [ type ] def mettre_au_carr\u00e9 ( T : list [ int ]) -> list [ int ]: return [ i ** 2 for i in T ] Faites l'effort d'utiliser cette syntaxe lorsque vous \u00e9crivez vos programmes !","title":"TP 11 : Exercices sur les tableaux et les fonctions"},{"location":"tp11/#exercice-0","text":"Ceci est un \u00e9chauffement... \u00c9crire une fonction additionner_tableau qui prend en param\u00e8tre : un tableau tableau . Cette fonction renvoie un entier \u00e9gal \u00e0 la somme des \u00e9l\u00e9ments du tableau. Lancer assert additionnerpy-undtableau([1,2,3]) == 6, \\bksl-nl 'additionnerpy-undtableau([1,2,3] == 6'bksl-nlassert additionnerpy-undtableau([1,0,-1]) == 0, \\bksl-nl 'additionnerpy-undtableau([1,0,-1]) == 0'bksl-nlassert additionnerpy-undtableau([]) == 0, \\bksl-nl 'additionnerpy-undtableau([]) == 0'bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def additionnerpy-undtableau(tableau : list[int]) -> int:bksl-nl passbksl-nlbksl-nlT = [1, 2, 3]bksl-nlsomme = additionnerpy-undtableau(T)bksl-nlprint(somme)bksl-nl def additionnerpy-undtableau(tableau : list[int]) -> int:bksl-nl somme = 0bksl-nl for valeur in tableau:bksl-nl somme = somme + valeurbksl-nl return sommebksl-nlbksl-nlT = [1, 2, 3]bksl-nlsomme = additionnerpy-undtableau(T)bksl-nlprint(somme)bksl-nl A Z","title":"Exercice 0 \u272a"},{"location":"tp11/#exercice-1","text":"Exemple Cet exercice se propose de vous faire d\u00e9couvrir le principe des tableaux de tableaux. De mani\u00e8re simple, un tableau de tableaux s'\u00e9crit : T = [[ 'Case 00' , 'Case 01' , 'Case 02' ], [ 'C 10' , 'C 11' , 'C 12' ]] Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder T = [['00', '01', '02'], ['10', '11', '12', '13'], ['20']]bksl-nlbksl-nl# qu'affiche la ligne ci-dessous ?bksl-nlprint(T[0])bksl-nlbksl-nl# Tapez l'instruction permettant d'afficher ['20']bksl-nlbksl-nlbksl-nl# qu'affiche la ligne ci-dessous ?bksl-nlprint(T[0][2])bksl-nlbksl-nl# Tapez l'instruction permettant d'afficher '11'bksl-nlbksl-nl \u00c9crire une fonction renvoyer_ligne qui prend deux param\u00e8tres : un tableau de tableaux tableau ; un num\u00e9ro de ligne n_ligne . Cette fonction renvoie un tableau constitu\u00e9 de la n-\u00e8me ligne du tableau de tableaux. Lancer assert renvoyerpy-undligne([[1,2,3], [4,5,6,7], [8,9]], 0) == [1,2,3], \\bksl-nl 'renvoyerpy-undligne([[1,2,3], [4,5,6,7], [8,9]], 0) == [1,2,3]'bksl-nlassert renvoyerpy-undligne([[], [4,5,6,7], [8,9]], 2) == [8, 9], \\bksl-nl 'renvoyerpy-undligne([[], [4,5,6,7], [8,9]], 2) == [8, 9]'bksl-nlbksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def renvoyerpy-undligne(tableau : list[list[int]], npy-undligne : int) -> list[int]:bksl-nl passbksl-nlbksl-nlT = [[1,2,3], [4,5,6,7], [8,9]]bksl-nlnouveaupy-undtableau = renvoyerpy-undligne(T, 1)bksl-nlprint(nouveaupy-undtableau)bksl-nl def renvoyerpy-undligne(tableau : list[list[int]], npy-undligne : int) -> list[int]:bksl-nl return tableau[npy-undligne]bksl-nlbksl-nlT = [[1,2,3], [4,5,6,7], [8,9]]bksl-nlnouveaupy-undtableau = renvoyerpy-undligne(T, 1)bksl-nlprint(nouveaupy-undtableau)bksl-nl A Z","title":"Exercice 1 \u272a"},{"location":"tp11/#exercice-2","text":"La fonction renvoyer_ligne cr\u00e9\u00e9e \u00e0 l'exercice 1 ne marche pas dans tous les cas. Modifier le code pr\u00e9c\u00e9dent afin de renvoyer [] si on ne peut pas extraire la n-\u00e8me ligne du tableau car celle-ci est trop grande ou trop petite... Lancer assert renvoyerpy-undligne([[1,2,3], [4,5,6,7], [8,9]], 0) == [1,2,3], \\bksl-nl 'renvoyerpy-undligne([[1,2,3], [4,5,6,7], [8,9]], 0) == [1,2,3]'bksl-nlassert renvoyerpy-undligne([[], [4,5,6,7], [8,9]], 2) == [8, 9], \\bksl-nl 'renvoyerpy-undligne([[], [4,5,6,7], [8,9]], 2) == [8, 9]'bksl-nlassert renvoyerpy-undligne([[1], [4,5,6,7], [8,9]], 10) == [], \\bksl-nl 'renvoyerpy-undligne([[1], [4,5,6,7], [8,9]], 10) == []'bksl-nlassert renvoyerpy-undligne([[1], [4,5,6,7], [8,9]], -1) == [], \\bksl-nl 'renvoyerpy-undligne([[1], [4,5,6,7], [8,9]], -1) == []'bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def renvoyerpy-undligne(tableau : list[list[int]], npy-undligne : int) -> list[int]:bksl-nl passbksl-nlbksl-nlT = [[1,2,3], [4,5,6,7], [8,9]]bksl-nlnouveaupy-undtableau = renvoyerpy-undligne(T, 1)bksl-nlprint(nouveaupy-undtableau)bksl-nl def renvoyerpy-undligne(tableau : list[list[int]], npy-undligne : int) -> list[int]:bksl-nl if not (0 < npy-undligne < len(tableau)):bksl-nl return []bksl-nl return tableau[npy-undligne]bksl-nlbksl-nlT = [[1,2,3], [4,5,6,7], [8,9]]bksl-nlnouveaupy-undtableau = renvoyerpy-undligne(T, 1)bksl-nlprint(nouveaupy-undtableau)bksl-nl A Z","title":"Exercice 2 \u272a"},{"location":"tp11/#exercice-3","text":"On souhaite \u00e0 pr\u00e9sent \u00e9crire une fonction renvoyer_diagonale_down qui prend en param\u00e8tre : un tableau de tableaux tableau de taille 3 par 3; ; Cette fonction renvoie un tableau constitu\u00e9 des valeurs de la diagonale descendante du tableau de tableaux. On peut se r\u00e9f\u00e9rer au sch\u00e9ma ci-dessous repr\u00e9sentant un tableau python T = [[ 00 , 01 , 02 ], [ 10 , 11 , 12 ], [ 20 , 21 , 22 ]] de taille 3 par 3. 00 01 02 10 11 12 20 21 22 Lancer assert renvoyerpy-unddiagonalepy-unddown([[0, 0, 0], [1, -1, 1], [1, -1, 1]]) == [0,-1,1], \\bksl-nl 'renvoyerpy-unddiagonalepy-unddown([[0, 0, 0], [1, -1, 1], [1, -1, 1]]) == [0,-1,1]'bksl-nlassert renvoyerpy-unddiagonalepy-unddown([[0, 0, 0], [1, 0, 1], [1, -1, 0]]) == [0,0,0], \\bksl-nl 'renvoyerpy-unddiagonalepy-unddown([[0, 0, 0], [1, 0, 1], [1, -1, 0]]) == [0,0,0]'bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def renvoyerpy-unddiagonalepy-unddown(tableau : list[list[int]]) -> list[int]:bksl-nl taillepy-undtableau = len(tableau) # nombre de lignesbksl-nl tableaupy-undsortie = [0] py-str taillepy-undtableaubksl-nl for i in range(taillepy-undtableau):bksl-nl passbksl-nl return bksl-nlbksl-nl# ou en une ligne si vous avez la motivation et la foi!bksl-nlbksl-nltableau = [[0, 0, 0], [1, -1, 1], [1, -1, 1]]bksl-nldiagonalepy-unddown = renvoyerpy-unddiagonalepy-unddown(tableau)bksl-nlprint(diagonalepy-unddown)bksl-nl def renvoyerpy-unddiagonalepy-unddown(tableau : list[list[int]]) -> list[int]:bksl-nl taillepy-undtableau = len(tableau) # nombre de lignesbksl-nl tableaupy-undsortie = [0] py-str taillepy-undtableaubksl-nl for i in range(taillepy-undtableau):bksl-nl tableaupy-undsortie[i] = tableau[i][i]bksl-nl return tableaupy-undsortiebksl-nlbksl-nl# ou en une ligne !bksl-nldef renvoyerpy-unddiagonalepy-unddown(tableau : list[list[int]]) -> list[int]:bksl-nl return [tableau[i][i] for i in range(len(tableau))]bksl-nlbksl-nltableau = [[0, 0, 0], [1, -1, 1], [1, -1, 1]]bksl-nldiagonalepy-unddown = renvoyerpy-unddiagonalepy-unddown(tableau)bksl-nlprint(diagonalepy-unddown)bksl-nl A Z","title":"Exercice 3 \u272a"},{"location":"tp11/#exercice-4","text":"On souhaite \u00e0 pr\u00e9sent \u00e9crire une fonction renvoyer_diagonale_up qui prend en param\u00e8tre : un tableau de tableaux tableau de taille 3 par 3. Cette fonction renvoie un tableau constitu\u00e9 des valeurs de la diagonale ascendante du tableau de tableaux. Au lieu de proc\u00e9der de mani\u00e8re brutale, on trouvera une relation math\u00e9matique entre les indices i des lignes et les indices j des colonnes. Remarquer les nombres en gras... 00 01 02 10 11 12 20 21 22 Lancer assert renvoyerpy-unddiagonalepy-undup([[0, 0, 0], [1, -1, 1], [1, -1, 1]]) == [1,-1,0], \\bksl-nl 'renvoyerpy-unddiagonalepy-unddown([[0, 0, 0], [1, -1, 1], [1, -1, 1]]) == [1,-1,0]'bksl-nlassert renvoyerpy-unddiagonalepy-undup([[0, 0, 0], [1, 0, 1], [1, -1, 0]]) == [1,0,0], \\bksl-nl 'renvoyerpy-unddiagonalepy-unddown([[0, 0, 0], [1, 0, 1], [1, -1, 0]]) == [1,0,0]'bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def renvoyerpy-unddiagonalepy-undup(tableau : list[list[int]]) -> list[int]:bksl-nl bksl-nl return bksl-nlbksl-nl# ou en une ligne si vous avez la motivation et la foi!bksl-nlbksl-nltableau = [[0, 0, 0], [1, -1, 1], [1, -1, 1]]bksl-nldiagonalepy-unddown = renvoyerpy-unddiagonalepy-undup(tableau)bksl-nlprint(diagonalepy-unddown)bksl-nl def renvoyerpy-unddiagonalepy-undup(tableau : list[list[int]]) -> list[int]:bksl-nl taillepy-undtableau = len(tableau) # nombre de lignesbksl-nl taillepy-undcolonne = len(tableau[0]) # nombre de colonnesbksl-nl tableaupy-undsortie = [0] py-str taillepy-undtableaubksl-nl for i in range(taillepy-undtableau):bksl-nl # i + j == 2:bksl-nl tableaupy-undsortie[i] = tableau[i][2-i]bksl-nl return tableaupy-undsortiebksl-nlbksl-nl# ou en une ligne !bksl-nldef renvoyerpy-unddiagonalepy-undup(tableau : list[list[int]]) -> list[int]:bksl-nl return [tableau[i][2-i] for i in range(len(tableau))]bksl-nlbksl-nltableau = [[0, 0, 0], [1, -1, 1], [1, -1, 1]]bksl-nldiagonalepy-unddown = renvoyerpy-unddiagonalepy-undup(tableau)bksl-nlprint(diagonalepy-unddown)bksl-nl A Z","title":"Exercice 4 \u272a"},{"location":"tp11/#exercice-5","text":"\u00c9crire une fonction renvoyer_colonne qui prend deux param\u00e8tres : un tableau de tableaux tableau de taille carr\u00e9e (3 par 3, 4 par 4...) ; un num\u00e9ro de colonne n_col . Cette fonction renvoie un tableau constitu\u00e9 de la n-\u00e8me colonne du tableau de tableaux. On sera amen\u00e9 \u00e0 utiliser l'instruction append . Lancer assert renvoyerpy-undcolonne([[1,2,3], [4,5,7], [8,9,7]], 0) == [1,4,8], \\bksl-nl 'renvoyerpy-undcolonne([[1,2,3], [4,5,7], [8,9,7]], 0) == [1,4,8]'bksl-nlassert renvoyerpy-undcolonne([[1,1,0], [4,5,0], [8,9,0]], 2) == [0,0,0], \\bksl-nl 'renvoyerpy-undcolonne([[1,1,0], [4,5,0], [8,9,0]], 2) == [0,0,0]'bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def renvoyerpy-undcolonne(tableau : list[list[int]], npy-undcolonne : int) -> list[int]:bksl-nl passbksl-nlbksl-nlT = [[1,2,3], [4,5,6,7], [8,9]]bksl-nlnouveaupy-undtableau = renvoyerpy-undcolonne(T, 1)bksl-nlprint(nouveaupy-undtableau)bksl-nl def renvoyerpy-undcolonne(tableau : list[list[int]], npy-undcolonne : int) -> list[int]:bksl-nl # on doit reconstruire un tableau \u00c3 partir des valeursbksl-nl # extraites ligne par lignebksl-nl # on nn connait pas la taille finale du tableau...bksl-nl tableaupy-undsortie = [] bksl-nl for i in range(len(tableau)):bksl-nl for j in range(len(tableau[i])):bksl-nl if j == npy-undcolonne:bksl-nl tableaupy-undsortie.append(tableau[i][npy-undcolonne])bksl-nl return tableaupy-undsortiebksl-nlbksl-nlT = [[1,2,3], [4,5,6], [8,9, 10]]bksl-nlnouveaupy-undtableau = renvoyerpy-undcolonne(T, 1)bksl-nlprint(nouveaupy-undtableau)bksl-nl A Z","title":"Exercice 5 \u272a\u272a"},{"location":"tp11/#exercice-6","text":"\u00c9crire une fonction convertir_tableau_tableau qui prend en param\u00e8tres : un tableau de tableaux tableau constitu\u00e9 de 1 et de -1 ; Cette fonction renvoie un tableau constitu\u00e9 de croix et de ronds suivant les r\u00e8gles suivantes : un 1 devient la cha\u00eene de caract\u00e8re \" \\u00D7 \" un -1 devient la cha\u00eene de caract\u00e8re \" \\u25CB \" un 0 devient \" \" Lancer assert convertirpy-undtableaupy-undtableau([[0,1,-1], [1,-1,1], [0, 0, 1]]) == [[' ', '\u00c3\u2014', '\u00e2\u2014\u00af'], ['\u00c3\u2014', '\u00e2\u2014\u00af', '\u00c3\u2014'], [' ', ' ', '\u00c3\u2014']], \\bksl-nl \"convertirpy-undtableaupy-undtableau([[0,1,-1], [1,-1,1], [0, 0, 1]]) == [[' ', '\u00c3\u2014', '\u00e2\u2014\u00af'], ['\u00c3\u2014', '\u00e2\u2014\u00af', '\u00c3\u2014'], [' ', ' ', '\u00c3\u2014']]\"bksl-nlbksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def convertirpy-undtableaupy-undtableau(tableau : list[list[int]]) -> list[list[int]]:bksl-nl tableaupy-undsortie = [[0 for i in range(3)] for j in range(3)]bksl-nl bksl-nl return tableaupy-undsortiebksl-nlbksl-nl# afficher le tableau Python sous une forme sympathiquebksl-nldef afficher(tableau: list[list[int]]) -> None:bksl-nl for ligne in tableau:bksl-nl for valeur in ligne:bksl-nl print(valeur, end = \"\")bksl-nl print()bksl-nlbksl-nlT = [[0,1,-1], [1,-1,1], [0, 0, 1]]bksl-nlnouveaupy-undtableau = convertirpy-undtableaupy-undtableau(T)bksl-nlafficher(nouveaupy-undtableau)bksl-nl def convertirpy-undtableaupy-undtableau(tableau : list[list[int]]) -> list[list[int]]:bksl-nl tableaupy-undsortie = [[0 for i in range(3)] for j in range(3)]bksl-nl for i in range(len(tableau)):bksl-nl for j in range(len(tableau)):bksl-nl if tableau[i][j] == 1:bksl-nl tableaupy-undsortie[i][j] = \"\\u00D7\"bksl-nl elif tableau[i][j] == -1:bksl-nl tableaupy-undsortie[i][j] = \"\\u25EF\"bksl-nl else:bksl-nl tableaupy-undsortie[i][j] = \" \"bksl-nl return tableaupy-undsortiebksl-nlbksl-nldef afficher(tableau: list[list[int]]) -> None:bksl-nl for ligne in tableau:bksl-nl for valeur in ligne:bksl-nl print(valeur, end = \"\")bksl-nl print()bksl-nlbksl-nlT = [[0,1,-1], [1,-1,1], [0, 0, 1]]bksl-nlnouveaupy-undtableau = convertirpy-undtableaupy-undtableau(T)bksl-nlafficher(nouveaupy-undtableau)bksl-nlprint(nouveaupy-undtableau)bksl-nl A Z","title":"Exercice 6 \u272a\u272a"},{"location":"tp11/#exercice-7","text":"Peut-\u00eatre que certains d'entre vous l'on vu arriver : \u00e0 l'aide de nos fonctions pr\u00e9c\u00e9dentes, nous allons r\u00e9aliser un jeu du Morpion. Pour cela, vous allez devoir aller sur Thonny sur le Raspberry et copier toutes les fonctions pr\u00e9c\u00e9dentes. \u00c9crire une fonction finir_partie qui v\u00e9rifie si un des joueurs a gagn\u00e9. Cette fonction prend le tableau de tableau en param\u00e8tre et renvoie un bool\u00e9en. \u00c9crire une fonction jouer_morpion qui ne prend aucun param\u00e8tre et qui renvoie le nom du joueur gagnant. Je vous donne gentiment la fonction poser_jeton qui prend en param\u00e8tre un tableau de tableau et un num\u00e9ro de joueur (1 ou -1) . Cette fonction ajoute un jeton dans le tableau de tableaux. Pour ajouter un nouveau jeton en (1, 3), taper dans le terminal 1 , 3 . Prener le temps de tester cette fonction dans Thonny et de comprendre chaque partie!! Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def poserpy-undjeton(tableau : list[list[int]], npy-undjoueur : int) -> list[list[int]]:bksl-nl # Mmmm... Pourquoi ce input et ce split ?bksl-nl npy-undligne, npy-undcolonne = map(int, input('Positionne ton pion : ').split(','))bksl-nlbksl-nl # ca sert \u00c3 quoi ces lignes 5 et 6 ??bksl-nl while not(1 <= npy-undligne <= 3 and 1 <= npy-undcolonne <= 3):bksl-nl npy-undligne, npy-undcolonne = map(int, input(\"Positionne ton pion : \").split(','))bksl-nlbksl-nl # des -1, mais quelle id\u00c3\u00a9e ??bksl-nl npy-undligne = npy-undligne - 1bksl-nl npy-undcolonne = npy-undcolonne - 1bksl-nlbksl-nl # Woah. C'est quoi \u00c3\u00a7a ?bksl-nl tableau[npy-undligne][npy-undcolonne] = npy-undjoueurbksl-nlbksl-nl # Monsieur, c'est obligatoire ce return ?bksl-nl return tableaubksl-nlbksl-nl# print(poserpy-undjeton([[0]py-str3 for i in range(3)], 1))bksl-nl A Z","title":"Exercice 7 \u272a\u272a\u272a"},{"location":"tp12/","text":"TP 12 : Programmation \u00e9v\u00e8nementielle \u2693\ufe0e Cours Python propose de la programmation \u00e9v\u00e8nementielle. Ce style de programmation (aussi appel\u00e9 paradigme ) permet de g\u00e9rer des \u00e9v\u00e9nements (clic de souris) via une boucle d'\u00e9v\u00e9nements. Elle est largement utilis\u00e9e pour r\u00e9aliser des interfaces graphiques. Les biblioth\u00e8ques les plus utilis\u00e9s sont tkinter , pygame et Qt . Le but de l'activit\u00e9 est simplement de vous faire d\u00e9couvrir la programmation \u00e9v\u00e8nement en r\u00e9alisant l'interface graphique du morpion du TP 11. Python dans le navigateur Attention, tkinter ne fonctionne pas (encore) dans le navigateur. Vous travaillerez donc sur Thonny. Exercice 1 \u272a \u2693\ufe0e Voici un script simple proposant une interface graphique. Copier le script dans Thonny, lancer-le et observer le r\u00e9sultat. Avez-vous d\u00e9j\u00e0 vu cette instruction . mainloop () ? Ajouter un bouton dont le texte est Play again . Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import tkinter as tkbksl-nlbksl-nllargeur, hauteur = 390, 390bksl-nlbksl-nlfenetre = tk.Tk()bksl-nlfenetre.title('Une fen\u00c3\u00aatre !')bksl-nlbksl-nllab = tk.Label(fenetre, text='')bksl-nllab.grid(row = 0, column = 0, padx=3, pady=3, columnspan = 2)bksl-nlbksl-nlbtn1 = tk.Button(fenetre, text= 'Quit', command = fenetre.quit)bksl-nlbtn1.grid(row = 2, column = 1, padx=3, pady=3, sticky = tk.E + tk.W)bksl-nlbksl-nlcanvas = tk.Canvas(fenetre, width= largeur, height = hauteur, background = 'black')bksl-nlcanvas.grid(row = 1, column = 0, padx=3, pady=3, columnspan = 2)bksl-nlbksl-nlfenetre.mainloop()bksl-nl import tkinter as tkbksl-nlbksl-nldef tracerpy-undcroix(xpy-undclic : int, ypy-undclic : int) -> None:bksl-nl canvas.createpy-undline(xpy-undclic, ypy-undclic, xpy-undclic + 130, ypy-undclic + 130, width=5, fill='blue')bksl-nl canvas.createpy-undline(xpy-undclic, ypy-undclic + 130, xpy-undclic + 130, ypy-undclic, width=5, fill='blue')bksl-nlbksl-nllargeur, hauteur = 390, 390bksl-nlbksl-nlfenetre = tk.Tk()bksl-nlfenetre.title('Une fen\u00c3\u00aatre !')bksl-nlbksl-nllab = tk.Label(fenetre, text='')bksl-nllab.grid(row = 0, column = 0, padx=3, pady=3, columnspan = 2)bksl-nlbksl-nlbtn1 = tk.Button(fenetre, text= 'Quit', command = fenetre.quit)bksl-nlbtn1.grid(row = 2, column = 1, padx=3, pady=3, sticky = tk.E + tk.W)bksl-nlbksl-nlbtn2 = tk.Button(fenetre, text= 'Play again')#, command = clear)bksl-nlbtn2.grid(row = 2, column = 0, padx=3, pady=3, sticky = tk.E + tk.W)bksl-nlbksl-nlcanvas = tk.Canvas(fenetre, width= largeur, height = hauteur, background = 'black')bksl-nlcanvas.grid(row = 1, column = 0, padx=3, pady=3, columnspan = 2)bksl-nlbksl-nltracerpy-undcroix(0, 0)bksl-nlbksl-nlfenetre.mainloop()bksl-nl A Z Exercice 2 \u272a \u2693\ufe0e On peut tracer sur le canvas des figures g\u00e9om\u00e9triques . Le rep\u00e8re est orient\u00e9 de mani\u00e8re particuli\u00e8re : Par exemple : canvas . create_line ( x0 , y0 , x1 , y1 , width = 5 , fill = 'blue' ) cr\u00e9e une ligne bleue d'\u00e9paisseur 5px qui commence en (x0, y0) et finit en (x1, y1) . sur le canvas, cr\u00e9er une ligne blanche d'\u00e9paisseur 3 commen\u00e7ant en (0, 0) et se terminant en (130, 130) cr\u00e9er une seconde ligne de mani\u00e8re \u00e0 obtenir une croix blanche. En utilisant les tests ci-dessus, cr\u00e9er une fonction tracer_croix prenant en param\u00e8tres : une abscisse x_clic de type enti\u00e8re une ordonn\u00e9e y_clic de type enti\u00e8re Cette fonction trace une croix de 130 pixels par 130 pixels (sous forme de x) avec le coin en haut \u00e0 gauche \u00e0 la position ( x_clic , y_clic ) . Elle ne renvoie rien. Tester votre fonction en ajoutant tracer_croix ( 25 , 25 ) dans votre code. Exercice 2 \u272a \u2693\ufe0e En utilisant le site web donn\u00e9 pr\u00e9c\u00e9demment, cr\u00e9er une fonction tracer_cercle prenant en param\u00e8tres : une abscisse x_clic de type enti\u00e8re une ordonn\u00e9e y_clic de type enti\u00e8re Cette fonction trace un cercle de diam\u00e8tre 130 pixels avec le coin en haut \u00e0 gauche \u00e0 la position ( x_clic , y_clic ) . Elle ne renvoie rien. Tester votre fonction en ajoutant tracer_cercle ( 25 , 25 ) dans votre code. Exercice 3 \u272a\u272a \u2693\ufe0e Introduisons \u00e0 pr\u00e9sent les \u00e9v\u00e9nements. Pour cr\u00e9er des \u00e9v\u00e9nements, il faut relier un clic sur une touche ou un d\u00e9placement de souris \u00e0 un \u00e9l\u00e9ment de notre fen\u00eatre graphique. Exemple Nous utiliserons canvas . bind ( '<Button-1>' , jouer ) pour d\u00e9clencher la fonction joueur lors d'un clic sur le canvas. Dans le d\u00e9tail, un \u00e9v\u00e9nement event est d\u00e9clench\u00e9 et pass\u00e9 en argument de la fonction jouer . Cet \u00e9v\u00e9nement contient des informations: event . x et event . y permettent d'acc\u00e9der aux coordonn\u00e9es du clic. Ajouter la liaison entre canvas et clic de souris ; Compl\u00e9ter la fonction jouer qui prend en param\u00e8tre un \u00e9v\u00e9nement event . Cette fonction trace une croix en bas \u00e0 droite de la position du clic. Elle ne renvoie rien. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import tkinter as tkbksl-nlbksl-nllargeur, hauteur = 390, 390bksl-nlbksl-nlfenetre = tk.Tk()bksl-nlfenetre.title('Une fen\u00c3\u00aatre !')bksl-nlbksl-nllab = tk.Label(fenetre, text='')bksl-nllab.grid(row = 0, column = 0, padx=3, pady=3, columnspan = 2)bksl-nlbksl-nlbtn1 = tk.Button(fenetre, text= 'Quit', command = fenetre.quit)bksl-nlbtn1.grid(row = 2, column = 1, padx=3, pady=3, sticky = tk.E + tk.W)bksl-nlbksl-nlbtn2 = tk.Button(fenetre, text= 'Play again')#, command = clear)bksl-nlbtn2.grid(row = 2, column = 0, padx=3, pady=3, sticky = tk.E + tk.W)bksl-nlbksl-nlcanvas = tk.Canvas(fenetre, width= largeur, height = hauteur, background = 'black')bksl-nlcanvas.grid(row = 1, column = 0, padx=3, pady=3, columnspan = 2)bksl-nlbksl-nlbksl-nlTOUR = 1bksl-nlbksl-nldef jouer(event):bksl-nl global TOUR # d\u00c3\u00a9finit une variable accessible partout dans le programmebksl-nl passbksl-nlbksl-nlcanvas.bind(' ', jouer)bksl-nlbksl-nlfenetre.mainloop()bksl-nl import tkinter as tkbksl-nlbksl-nllargeur, hauteur = 390, 390bksl-nlbksl-nlfenetre = tk.Tk()bksl-nlfenetre.title('Une fen\u00c3\u00aatre !')bksl-nlbksl-nllab = tk.Label(fenetre, text='')bksl-nllab.grid(row = 0, column = 0, padx=3, pady=3, columnspan = 2)bksl-nlbksl-nlbtn1 = tk.Button(fenetre, text= 'Quit', command = fenetre.quit)bksl-nlbtn1.grid(row = 2, column = 1, padx=3, pady=3, sticky = tk.E + tk.W)bksl-nlbksl-nlbtn2 = tk.Button(fenetre, text= 'Play again')#, command = clear)bksl-nlbtn2.grid(row = 2, column = 0, padx=3, pady=3, sticky = tk.E + tk.W)bksl-nlbksl-nlcanvas = tk.Canvas(fenetre, width= largeur, height = hauteur, background = 'black')bksl-nlcanvas.grid(row = 1, column = 0, padx=3, pady=3, columnspan = 2)bksl-nlbksl-nlTOUR = 1bksl-nlbksl-nldef tracerpy-undcroix(xpy-undclic : int, ypy-undclic : int) -> None:bksl-nl canvas.createpy-undline(xpy-undclic, ypy-undclic, xpy-undclic + 130, ypy-undclic + 130, width=5, fill='blue')bksl-nl canvas.createpy-undline(xpy-undclic, ypy-undclic + 130, xpy-undclic + 130, ypy-undclic, width=5, fill='blue')bksl-nlbksl-nldef tracerpy-undcercle(xpy-undclic : int, ypy-undclic : int) -> None:bksl-nl canvas.createpy-undoval(xpy-undclic, ypy-undclic, xpy-undclic + 130, ypy-undclic + 130, width=5, outline='white')bksl-nlbksl-nldef tracerpy-unddamier():bksl-nl for i in [0, 130, 260]:bksl-nl for j in [0, 130, 260]:bksl-nl canvas.createpy-undrectangle(i, j, i + 130, j + 130, width=2, fill='white')bksl-nlTOUR = 1bksl-nlbksl-nldef jouer(event):bksl-nl global TOUR # d\u00c3\u00a9finit une variable accessible partout dans le programmebksl-nl tracerpy-undcroix(event.x, event.y)bksl-nlbksl-nlbksl-nltracerpy-unddamier()bksl-nlbksl-nlbksl-nlcanvas.bind(' ', jouer)bksl-nlbksl-nlfenetre.mainloop()bksl-nl A Z Exercice 4 \u272a \u2693\ufe0e Il faut maintenant tracer un damier pour faire le morpion. \u00c9crire une fonction tracer_damier qui ne prend aucun param\u00e8tre en entr\u00e9e. Cette fonction trace un damier avec des cases de taille 130 par 130. On pourra utiliser : canvas . create_rectangle ( x0 , y0 , x1 , y1 ) Exercice 5 \u272a\u272a \u2693\ufe0e Il faut \u00e9galement r\u00e9gler le positionnement des croix et des cercles. En effet, un clic \u00e0 un endroit quelconque doit positionner la croix exactement dans la case correspondante. Nous num\u00e9rotons les cases par leurs coordonn\u00e9es, qui vont nous permettre de trouver facilement leurs coordonn\u00e9es en pixels : Des maths Faire le tableau suivant sur votre feuille et le compl\u00e9ter : coordonn\u00e9es clic (pixels) cordonn\u00e9es case cordonn\u00e9es case (pixels) (0, 0) .... .... (140, 0) .... .... (240, 0) .... .... (0, 140) .... .... (0, 240) .... .... (140, 140) .... .... (140, 240) .... .... En d\u00e9duire l'op\u00e9ration \u00e0 r\u00e9aliser pour transformer des coordonn\u00e9es en pixels d'un clic en coordonn\u00e9es en pixels de case. \u00c9crire une fonction calculer_coordonn\u00e9es qui prend en param\u00e8tres : une abscisse x d'un clic en pixels; une ordonn\u00e9e x d'un clic en pixels. Cette fonction renvoie les coordonn\u00e9es en pixels d'une case du damier. Tester votre fonction sur les exemples du tableau que vous avez r\u00e9alis\u00e9. Modifier votre fonction jouer pour int\u00e9grer le calcul des coordonn\u00e9es. V\u00e9rifier que les croix se positionnent correctement. Exercice 6 \u272a\u272a \u2693\ufe0e Introduisons finalement le tour par tour. Nous voulons que chaque fois qu'un joueur clique, le tour passe au joueur suivant. Pour cela, nous allons modifier la variable globale TOUR dans la fonction jouer . Ainsi, nous dirons que : si la variable est pair, nous dessinons une croix et \"nous passons au joueur suivant\". si la variable est impair, nous dessinons un cercle et \"nous passons au joueur suivant\". Exercice 6 \u272a\u272a\u272a \u2693\ufe0e L'interface graphique est fonctionnelle. La derni\u00e8re fois, nous avons fait le moteur de jeu. R\u00e9aliser le Morpion en version graphique ! Pour la fusion, l\u00e0... c'est vous qui voyez !","title":"TP 12"},{"location":"tp12/#tp-12-programmation-evenementielle","text":"Cours Python propose de la programmation \u00e9v\u00e8nementielle. Ce style de programmation (aussi appel\u00e9 paradigme ) permet de g\u00e9rer des \u00e9v\u00e9nements (clic de souris) via une boucle d'\u00e9v\u00e9nements. Elle est largement utilis\u00e9e pour r\u00e9aliser des interfaces graphiques. Les biblioth\u00e8ques les plus utilis\u00e9s sont tkinter , pygame et Qt . Le but de l'activit\u00e9 est simplement de vous faire d\u00e9couvrir la programmation \u00e9v\u00e8nement en r\u00e9alisant l'interface graphique du morpion du TP 11. Python dans le navigateur Attention, tkinter ne fonctionne pas (encore) dans le navigateur. Vous travaillerez donc sur Thonny.","title":"TP 12 : Programmation \u00e9v\u00e8nementielle"},{"location":"tp12/#exercice-1","text":"Voici un script simple proposant une interface graphique. Copier le script dans Thonny, lancer-le et observer le r\u00e9sultat. Avez-vous d\u00e9j\u00e0 vu cette instruction . mainloop () ? Ajouter un bouton dont le texte est Play again . Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import tkinter as tkbksl-nlbksl-nllargeur, hauteur = 390, 390bksl-nlbksl-nlfenetre = tk.Tk()bksl-nlfenetre.title('Une fen\u00c3\u00aatre !')bksl-nlbksl-nllab = tk.Label(fenetre, text='')bksl-nllab.grid(row = 0, column = 0, padx=3, pady=3, columnspan = 2)bksl-nlbksl-nlbtn1 = tk.Button(fenetre, text= 'Quit', command = fenetre.quit)bksl-nlbtn1.grid(row = 2, column = 1, padx=3, pady=3, sticky = tk.E + tk.W)bksl-nlbksl-nlcanvas = tk.Canvas(fenetre, width= largeur, height = hauteur, background = 'black')bksl-nlcanvas.grid(row = 1, column = 0, padx=3, pady=3, columnspan = 2)bksl-nlbksl-nlfenetre.mainloop()bksl-nl import tkinter as tkbksl-nlbksl-nldef tracerpy-undcroix(xpy-undclic : int, ypy-undclic : int) -> None:bksl-nl canvas.createpy-undline(xpy-undclic, ypy-undclic, xpy-undclic + 130, ypy-undclic + 130, width=5, fill='blue')bksl-nl canvas.createpy-undline(xpy-undclic, ypy-undclic + 130, xpy-undclic + 130, ypy-undclic, width=5, fill='blue')bksl-nlbksl-nllargeur, hauteur = 390, 390bksl-nlbksl-nlfenetre = tk.Tk()bksl-nlfenetre.title('Une fen\u00c3\u00aatre !')bksl-nlbksl-nllab = tk.Label(fenetre, text='')bksl-nllab.grid(row = 0, column = 0, padx=3, pady=3, columnspan = 2)bksl-nlbksl-nlbtn1 = tk.Button(fenetre, text= 'Quit', command = fenetre.quit)bksl-nlbtn1.grid(row = 2, column = 1, padx=3, pady=3, sticky = tk.E + tk.W)bksl-nlbksl-nlbtn2 = tk.Button(fenetre, text= 'Play again')#, command = clear)bksl-nlbtn2.grid(row = 2, column = 0, padx=3, pady=3, sticky = tk.E + tk.W)bksl-nlbksl-nlcanvas = tk.Canvas(fenetre, width= largeur, height = hauteur, background = 'black')bksl-nlcanvas.grid(row = 1, column = 0, padx=3, pady=3, columnspan = 2)bksl-nlbksl-nltracerpy-undcroix(0, 0)bksl-nlbksl-nlfenetre.mainloop()bksl-nl A Z","title":"Exercice 1 \u272a"},{"location":"tp12/#exercice-2","text":"On peut tracer sur le canvas des figures g\u00e9om\u00e9triques . Le rep\u00e8re est orient\u00e9 de mani\u00e8re particuli\u00e8re : Par exemple : canvas . create_line ( x0 , y0 , x1 , y1 , width = 5 , fill = 'blue' ) cr\u00e9e une ligne bleue d'\u00e9paisseur 5px qui commence en (x0, y0) et finit en (x1, y1) . sur le canvas, cr\u00e9er une ligne blanche d'\u00e9paisseur 3 commen\u00e7ant en (0, 0) et se terminant en (130, 130) cr\u00e9er une seconde ligne de mani\u00e8re \u00e0 obtenir une croix blanche. En utilisant les tests ci-dessus, cr\u00e9er une fonction tracer_croix prenant en param\u00e8tres : une abscisse x_clic de type enti\u00e8re une ordonn\u00e9e y_clic de type enti\u00e8re Cette fonction trace une croix de 130 pixels par 130 pixels (sous forme de x) avec le coin en haut \u00e0 gauche \u00e0 la position ( x_clic , y_clic ) . Elle ne renvoie rien. Tester votre fonction en ajoutant tracer_croix ( 25 , 25 ) dans votre code.","title":"Exercice 2 \u272a"},{"location":"tp12/#exercice-2_1","text":"En utilisant le site web donn\u00e9 pr\u00e9c\u00e9demment, cr\u00e9er une fonction tracer_cercle prenant en param\u00e8tres : une abscisse x_clic de type enti\u00e8re une ordonn\u00e9e y_clic de type enti\u00e8re Cette fonction trace un cercle de diam\u00e8tre 130 pixels avec le coin en haut \u00e0 gauche \u00e0 la position ( x_clic , y_clic ) . Elle ne renvoie rien. Tester votre fonction en ajoutant tracer_cercle ( 25 , 25 ) dans votre code.","title":"Exercice 2 \u272a"},{"location":"tp12/#exercice-3","text":"Introduisons \u00e0 pr\u00e9sent les \u00e9v\u00e9nements. Pour cr\u00e9er des \u00e9v\u00e9nements, il faut relier un clic sur une touche ou un d\u00e9placement de souris \u00e0 un \u00e9l\u00e9ment de notre fen\u00eatre graphique. Exemple Nous utiliserons canvas . bind ( '<Button-1>' , jouer ) pour d\u00e9clencher la fonction joueur lors d'un clic sur le canvas. Dans le d\u00e9tail, un \u00e9v\u00e9nement event est d\u00e9clench\u00e9 et pass\u00e9 en argument de la fonction jouer . Cet \u00e9v\u00e9nement contient des informations: event . x et event . y permettent d'acc\u00e9der aux coordonn\u00e9es du clic. Ajouter la liaison entre canvas et clic de souris ; Compl\u00e9ter la fonction jouer qui prend en param\u00e8tre un \u00e9v\u00e9nement event . Cette fonction trace une croix en bas \u00e0 droite de la position du clic. Elle ne renvoie rien. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import tkinter as tkbksl-nlbksl-nllargeur, hauteur = 390, 390bksl-nlbksl-nlfenetre = tk.Tk()bksl-nlfenetre.title('Une fen\u00c3\u00aatre !')bksl-nlbksl-nllab = tk.Label(fenetre, text='')bksl-nllab.grid(row = 0, column = 0, padx=3, pady=3, columnspan = 2)bksl-nlbksl-nlbtn1 = tk.Button(fenetre, text= 'Quit', command = fenetre.quit)bksl-nlbtn1.grid(row = 2, column = 1, padx=3, pady=3, sticky = tk.E + tk.W)bksl-nlbksl-nlbtn2 = tk.Button(fenetre, text= 'Play again')#, command = clear)bksl-nlbtn2.grid(row = 2, column = 0, padx=3, pady=3, sticky = tk.E + tk.W)bksl-nlbksl-nlcanvas = tk.Canvas(fenetre, width= largeur, height = hauteur, background = 'black')bksl-nlcanvas.grid(row = 1, column = 0, padx=3, pady=3, columnspan = 2)bksl-nlbksl-nlbksl-nlTOUR = 1bksl-nlbksl-nldef jouer(event):bksl-nl global TOUR # d\u00c3\u00a9finit une variable accessible partout dans le programmebksl-nl passbksl-nlbksl-nlcanvas.bind(' ', jouer)bksl-nlbksl-nlfenetre.mainloop()bksl-nl import tkinter as tkbksl-nlbksl-nllargeur, hauteur = 390, 390bksl-nlbksl-nlfenetre = tk.Tk()bksl-nlfenetre.title('Une fen\u00c3\u00aatre !')bksl-nlbksl-nllab = tk.Label(fenetre, text='')bksl-nllab.grid(row = 0, column = 0, padx=3, pady=3, columnspan = 2)bksl-nlbksl-nlbtn1 = tk.Button(fenetre, text= 'Quit', command = fenetre.quit)bksl-nlbtn1.grid(row = 2, column = 1, padx=3, pady=3, sticky = tk.E + tk.W)bksl-nlbksl-nlbtn2 = tk.Button(fenetre, text= 'Play again')#, command = clear)bksl-nlbtn2.grid(row = 2, column = 0, padx=3, pady=3, sticky = tk.E + tk.W)bksl-nlbksl-nlcanvas = tk.Canvas(fenetre, width= largeur, height = hauteur, background = 'black')bksl-nlcanvas.grid(row = 1, column = 0, padx=3, pady=3, columnspan = 2)bksl-nlbksl-nlTOUR = 1bksl-nlbksl-nldef tracerpy-undcroix(xpy-undclic : int, ypy-undclic : int) -> None:bksl-nl canvas.createpy-undline(xpy-undclic, ypy-undclic, xpy-undclic + 130, ypy-undclic + 130, width=5, fill='blue')bksl-nl canvas.createpy-undline(xpy-undclic, ypy-undclic + 130, xpy-undclic + 130, ypy-undclic, width=5, fill='blue')bksl-nlbksl-nldef tracerpy-undcercle(xpy-undclic : int, ypy-undclic : int) -> None:bksl-nl canvas.createpy-undoval(xpy-undclic, ypy-undclic, xpy-undclic + 130, ypy-undclic + 130, width=5, outline='white')bksl-nlbksl-nldef tracerpy-unddamier():bksl-nl for i in [0, 130, 260]:bksl-nl for j in [0, 130, 260]:bksl-nl canvas.createpy-undrectangle(i, j, i + 130, j + 130, width=2, fill='white')bksl-nlTOUR = 1bksl-nlbksl-nldef jouer(event):bksl-nl global TOUR # d\u00c3\u00a9finit une variable accessible partout dans le programmebksl-nl tracerpy-undcroix(event.x, event.y)bksl-nlbksl-nlbksl-nltracerpy-unddamier()bksl-nlbksl-nlbksl-nlcanvas.bind(' ', jouer)bksl-nlbksl-nlfenetre.mainloop()bksl-nl A Z","title":"Exercice 3 \u272a\u272a"},{"location":"tp12/#exercice-4","text":"Il faut maintenant tracer un damier pour faire le morpion. \u00c9crire une fonction tracer_damier qui ne prend aucun param\u00e8tre en entr\u00e9e. Cette fonction trace un damier avec des cases de taille 130 par 130. On pourra utiliser : canvas . create_rectangle ( x0 , y0 , x1 , y1 )","title":"Exercice 4 \u272a"},{"location":"tp12/#exercice-5","text":"Il faut \u00e9galement r\u00e9gler le positionnement des croix et des cercles. En effet, un clic \u00e0 un endroit quelconque doit positionner la croix exactement dans la case correspondante. Nous num\u00e9rotons les cases par leurs coordonn\u00e9es, qui vont nous permettre de trouver facilement leurs coordonn\u00e9es en pixels : Des maths Faire le tableau suivant sur votre feuille et le compl\u00e9ter : coordonn\u00e9es clic (pixels) cordonn\u00e9es case cordonn\u00e9es case (pixels) (0, 0) .... .... (140, 0) .... .... (240, 0) .... .... (0, 140) .... .... (0, 240) .... .... (140, 140) .... .... (140, 240) .... .... En d\u00e9duire l'op\u00e9ration \u00e0 r\u00e9aliser pour transformer des coordonn\u00e9es en pixels d'un clic en coordonn\u00e9es en pixels de case. \u00c9crire une fonction calculer_coordonn\u00e9es qui prend en param\u00e8tres : une abscisse x d'un clic en pixels; une ordonn\u00e9e x d'un clic en pixels. Cette fonction renvoie les coordonn\u00e9es en pixels d'une case du damier. Tester votre fonction sur les exemples du tableau que vous avez r\u00e9alis\u00e9. Modifier votre fonction jouer pour int\u00e9grer le calcul des coordonn\u00e9es. V\u00e9rifier que les croix se positionnent correctement.","title":"Exercice 5 \u272a\u272a"},{"location":"tp12/#exercice-6","text":"Introduisons finalement le tour par tour. Nous voulons que chaque fois qu'un joueur clique, le tour passe au joueur suivant. Pour cela, nous allons modifier la variable globale TOUR dans la fonction jouer . Ainsi, nous dirons que : si la variable est pair, nous dessinons une croix et \"nous passons au joueur suivant\". si la variable est impair, nous dessinons un cercle et \"nous passons au joueur suivant\".","title":"Exercice 6 \u272a\u272a"},{"location":"tp12/#exercice-6_1","text":"L'interface graphique est fonctionnelle. La derni\u00e8re fois, nous avons fait le moteur de jeu. R\u00e9aliser le Morpion en version graphique ! Pour la fusion, l\u00e0... c'est vous qui voyez !","title":"Exercice 6 \u272a\u272a\u272a"},{"location":"tp13/","text":"TP 13 : Un morpion complet \u2693\ufe0e Cours Un projet est toujours organis\u00e9 en deux volets : le moteur algorithmique qui va faire fonctionner le projet ; la partie graphique qui va proposer une interface utilisateur agr\u00e9able. Dans le TP11 , nous avons cr\u00e9\u00e9 le moteur de jeu du Morpion, avec une grille repr\u00e9sent\u00e9e par un tableau de taille 3 contenant des tableaux de taille 3. Cette partie est essentielle pour le jeu du Morpion : sans elle, rien ne peut fonctionner. Je vous propose une correction en t\u00e9l\u00e9chargement ici : Correction . Vous pouvez tester le jeu en le lan\u00e7ant sur Thonny. Il faut rentrer les coordonn\u00e9es des cases au format i , j avec \\(i \\in [1, 3]\\) et \\(j \\in [1, 3]\\) . Dans le TP12 , nous avons cr\u00e9\u00e9 le moteur graphique du jeu du Morpion \u00e0 l'aide de la librairie tkinter . Cette partie est accessoire. Il n'est pas agr\u00e9able de jouer au Morpion en ligne de commande mais cela fonctionne et le projet est d\u00e9j\u00e0 fonctionnel. Je vous propose une correction en t\u00e9l\u00e9chargement ici : Correction . Projet \u2693\ufe0e Le but de ce TP est de fusionner les deux projets et de proposer un Morpion fonctionnel avec interface graphique. Cela va supposer faire de nombreuses modifications. Vous travaillerez sur Thonny \u00e0 partir de vos fichiers ou \u00e0 partir des fichiers corrig\u00e9s propos\u00e9s en t\u00e9l\u00e9chargement ci-dessus. Appelez moi quand vous avez fini et je validerais votre projet dans un match \u00e0 mort.","title":"TP 13"},{"location":"tp13/#tp-13-un-morpion-complet","text":"Cours Un projet est toujours organis\u00e9 en deux volets : le moteur algorithmique qui va faire fonctionner le projet ; la partie graphique qui va proposer une interface utilisateur agr\u00e9able. Dans le TP11 , nous avons cr\u00e9\u00e9 le moteur de jeu du Morpion, avec une grille repr\u00e9sent\u00e9e par un tableau de taille 3 contenant des tableaux de taille 3. Cette partie est essentielle pour le jeu du Morpion : sans elle, rien ne peut fonctionner. Je vous propose une correction en t\u00e9l\u00e9chargement ici : Correction . Vous pouvez tester le jeu en le lan\u00e7ant sur Thonny. Il faut rentrer les coordonn\u00e9es des cases au format i , j avec \\(i \\in [1, 3]\\) et \\(j \\in [1, 3]\\) . Dans le TP12 , nous avons cr\u00e9\u00e9 le moteur graphique du jeu du Morpion \u00e0 l'aide de la librairie tkinter . Cette partie est accessoire. Il n'est pas agr\u00e9able de jouer au Morpion en ligne de commande mais cela fonctionne et le projet est d\u00e9j\u00e0 fonctionnel. Je vous propose une correction en t\u00e9l\u00e9chargement ici : Correction .","title":"TP 13 : Un morpion complet"},{"location":"tp13/#projet","text":"Le but de ce TP est de fusionner les deux projets et de proposer un Morpion fonctionnel avec interface graphique. Cela va supposer faire de nombreuses modifications. Vous travaillerez sur Thonny \u00e0 partir de vos fichiers ou \u00e0 partir des fichiers corrig\u00e9s propos\u00e9s en t\u00e9l\u00e9chargement ci-dessus. Appelez moi quand vous avez fini et je validerais votre projet dans un match \u00e0 mort.","title":"Projet"},{"location":"tp3/","text":"TP 3 : Boucles conditionnelles avec Turtle \u2693\ufe0e Exercice 4 \u2693\ufe0e Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlbksl-nllongueur = 30bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.penup() # utile pour le site web.bksl-nlfred.goto(350,200) # utile pour le site web.bksl-nlfred.pendown() # utile pour le site web.bksl-nlbksl-nln = 0bksl-nlwhile n < 8:bksl-nl fred.fd(longueur)bksl-nl fred.right(45)bksl-nl n = n + 1bksl-nlbksl-nlfred.mainloop()bksl-nlbksl-nl A Z Exercice 5 \u2693\ufe0e Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlbksl-nllongueur = 30bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.penup() # utile pour le site web.bksl-nlfred.goto(350,200) # utile pour le site web.bksl-nlfred.pendown() # utile pour le site web.bksl-nlbksl-nln = 0bksl-nlwhile n < 8:bksl-nl fred.fd(longueur)bksl-nl fred.right(45)bksl-nl n = n + 1bksl-nlbksl-nlfred.mainloop()bksl-nlbksl-nl import turtlebksl-nlbksl-nllongueur = 30bksl-nlnombrepy-undc\u00c3\u00b4t\u00c3\u00a9 = 13bksl-nlangle = 360 / nombrepy-undc\u00c3\u00b4t\u00c3\u00a9bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.penup() # utile pour le site web.bksl-nlfred.goto(350,200) # utile pour le site web.bksl-nlfred.pendown() # utile pour le site web.bksl-nlbksl-nln = 0bksl-nlwhile n < nombrepy-undc\u00c3\u00b4t\u00c3\u00a9:bksl-nl fred.fd(longueur)bksl-nl fred.right(angle)bksl-nl n = n + 1bksl-nlbksl-nlfred.mainloop()bksl-nlbksl-nl A Z Exercice 6 \u2693\ufe0e Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlbksl-nllongueur = 30bksl-nlnombrepy-undc\u00c3\u00b4t\u00c3\u00a9 = 13bksl-nlangle = 360 / nombrepy-undc\u00c3\u00b4t\u00c3\u00a9bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.penup() # utile pour le site web.bksl-nlfred.goto(350,200) # utile pour le site web.bksl-nlfred.pendown() # utile pour le site web.bksl-nlbksl-nln = 0bksl-nlwhile n < 8:bksl-nl fred.fd(longueur)bksl-nl fred.right(45)bksl-nl n = n + 1bksl-nlbksl-nlfred.mainloop()bksl-nlbksl-nl import turtlebksl-nlbksl-nllongueur = 30bksl-nlnombrepy-undc\u00c3\u00b4t\u00c3\u00a9 = 13bksl-nlangle = 360 / nombrepy-undc\u00c3\u00b4t\u00c3\u00a9bksl-nlnombrepy-undmaxpy-undtraits = 30bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.penup() # utile pour le site web.bksl-nlfred.goto(350,200) # utile pour le site web.bksl-nlfred.pendown() # utile pour le site web.bksl-nlbksl-nln = 0bksl-nlwhile n < nombrepy-undmaxpy-undtraits:bksl-nl fred.fd(longueur)bksl-nl fred.right(angle)bksl-nl n = n + 1bksl-nlbksl-nlfred.mainloop()bksl-nlbksl-nl A Z Exercice 7 \u2693\ufe0e Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlbksl-nllongueur = 30bksl-nlnombrepy-undc\u00c3\u00b4t\u00c3\u00a9 = 13bksl-nlangle = 360 / nombrepy-undc\u00c3\u00b4t\u00c3\u00a9bksl-nlnombrepy-undmaxpy-undtraits = 30bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.penup() # utile pour le site web.bksl-nlfred.goto(350,200) # utile pour le site web.bksl-nlfred.pendown() # utile pour le site web.bksl-nlbksl-nln = 0bksl-nlwhile n < nombrepy-undmaxpy-undtraits:bksl-nl fred.fd(longueur)bksl-nl fred.right(angle)bksl-nl n = n + 1bksl-nlbksl-nlfred.mainloop()bksl-nlbksl-nl import turtlebksl-nlbksl-nllongueur = 100bksl-nlnombrepy-undc\u00c3\u00b4t\u00c3\u00a9 = 10bksl-nlangle = 360 / nombrepy-undc\u00c3\u00b4t\u00c3\u00a9bksl-nlnombrepy-undmaxpy-undtraits = 30bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.penup() # utile pour le site web.bksl-nlfred.goto(350,200) # utile pour le site web.bksl-nlfred.pendown() # utile pour le site web.bksl-nlbksl-nln = 0bksl-nlwhile n < nombrepy-undmaxpy-undtraits:bksl-nl fred.fd(longueur)bksl-nl fred.right(angle)bksl-nl # modifier le d\u00c3\u00a9cr\u00c3\u00a9ment et observer le r\u00c3\u00a9sultatbksl-nl print(longueur)bksl-nl longueur = longueur - 1 bksl-nl n = n + 1bksl-nlbksl-nlfred.mainloop()bksl-nlbksl-nl A Z Exercice 8 \u2693\ufe0e Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlbksl-nllongueur = 100bksl-nlnombrepy-undc\u00c3\u00b4t\u00c3\u00a9 = 10bksl-nlangle = 360 / nombrepy-undc\u00c3\u00b4t\u00c3\u00a9bksl-nlnombrepy-undmaxpy-undtraits = 30bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.penup() # utile pour le site web.bksl-nlfred.goto(350,200) # utile pour le site web.bksl-nlfred.pendown() # utile pour le site web.bksl-nlbksl-nln = 0bksl-nlwhile n < nombrepy-undmaxpy-undtraits:bksl-nl fred.fd(longueur)bksl-nl fred.right(angle)bksl-nl # modifier le d\u00c3\u00a9cr\u00c3\u00a9ment et observer le r\u00c3\u00a9sultatbksl-nl print(longueur)bksl-nl longueur = longueur - 1 bksl-nl n = n + 1bksl-nlbksl-nlfred.mainloop()bksl-nlbksl-nl import turtlebksl-nlbksl-nllongueur = 100bksl-nlnombrepy-undc\u00c3\u00b4t\u00c3\u00a9 = 10bksl-nlangle = 360 / nombrepy-undc\u00c3\u00b4t\u00c3\u00a9bksl-nlnombrepy-undmaxpy-undtraits = 30bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.penup() # utile pour le site web.bksl-nlfred.goto(350,200) # utile pour le site web.bksl-nlfred.pendown() # utile pour le site web.bksl-nlbksl-nln = 0bksl-nlwhile n < nombrepy-undmaxpy-undtraits:bksl-nl if longueur >= 0:bksl-nl fred.fd(longueur)bksl-nl fred.right(angle)bksl-nl # modifier le d\u00c3\u00a9cr\u00c3\u00a9ment et observer le r\u00c3\u00a9sultatbksl-nl print(longueur)bksl-nl longueur = longueur - 5bksl-nl n = n + 1bksl-nlbksl-nlfred.mainloop()bksl-nlbksl-nl A Z Exercice 9 \u2693\ufe0e Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlbksl-nllongueur = 100bksl-nlnombrepy-undc\u00c3\u00b4t\u00c3\u00a9 = 10bksl-nlangle = 360 / nombrepy-undc\u00c3\u00b4t\u00c3\u00a9bksl-nlnombrepy-undmaxpy-undtraits = 30bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.penup() # utile pour le site web.bksl-nlfred.goto(350,200) # utile pour le site web.bksl-nlfred.pendown() # utile pour le site web.bksl-nlbksl-nln = 0bksl-nlwhile n < nombrepy-undmaxpy-undtraits:bksl-nl if longueur >= 0:bksl-nl fred.fd(longueur)bksl-nl fred.right(angle)bksl-nl # modifier le d\u00c3\u00a9cr\u00c3\u00a9ment et observer le r\u00c3\u00a9sultatbksl-nl print(longueur)bksl-nl longueur = longueur - 5bksl-nl n = n + 1bksl-nlbksl-nlfred.mainloop()bksl-nlbksl-nl import turtlebksl-nlbksl-nllongueur = 100bksl-nlnombrepy-undc\u00c3\u00b4t\u00c3\u00a9 = 10bksl-nlangle = 360 / nombrepy-undc\u00c3\u00b4t\u00c3\u00a9bksl-nlnombrepy-undmaxpy-undtraits = 30bksl-nllargeur = 8bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.penup() # utile pour le site web.bksl-nlfred.goto(350,200) # utile pour le site web.bksl-nlfred.pendown() # utile pour le site web.bksl-nlfred.width(largeur)bksl-nlbksl-nln = 0bksl-nlwhile n < nombrepy-undmaxpy-undtraits:bksl-nl if longueur >= 0:bksl-nl fred.fd(longueur)bksl-nl fred.right(angle)bksl-nl # modifier le d\u00c3\u00a9cr\u00c3\u00a9ment et observer le r\u00c3\u00a9sultatbksl-nl print(longueur)bksl-nl longueur = longueur - 5bksl-nl if n % 5 == 0: bksl-nl largeur = largeur py-str 0.75bksl-nl fred.width(largeur)bksl-nl n = n + 1bksl-nlbksl-nlfred.mainloop()bksl-nlbksl-nl A Z Exercice 10 \u2693\ufe0e Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlbksl-nllongueur = 100bksl-nlnombrepy-undc\u00c3\u00b4t\u00c3\u00a9 = 10bksl-nlangle = 360 / nombrepy-undc\u00c3\u00b4t\u00c3\u00a9bksl-nlnombrepy-undmaxpy-undtraits = 30bksl-nllargeur = 8bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.penup() # utile pour le site web.bksl-nlfred.goto(350,200) # utile pour le site web.bksl-nlfred.pendown() # utile pour le site web.bksl-nlfred.width(largeur)bksl-nlbksl-nln = 0bksl-nlwhile n < nombrepy-undmaxpy-undtraits:bksl-nl if longueur >= 0:bksl-nl fred.fd(longueur)bksl-nl fred.right(angle)bksl-nl # modifier le d\u00c3\u00a9cr\u00c3\u00a9ment et observer le r\u00c3\u00a9sultatbksl-nl print(longueur)bksl-nl longueur = longueur - 5bksl-nl if n % 5 == 0: bksl-nl largeur = largeur py-str 0.75bksl-nl fred.width(largeur)bksl-nl n = n + 1bksl-nlbksl-nlfred.mainloop()bksl-nlbksl-nl import turtlebksl-nlbksl-nllongueur = 100bksl-nlnombrepy-undc\u00c3\u00b4t\u00c3\u00a9 = 10bksl-nlangle = 360 / nombrepy-undc\u00c3\u00b4t\u00c3\u00a9bksl-nlnombrepy-undmaxpy-undtraits = 30bksl-nllargeur = 8bksl-nlcouleurpy-undrouge = 1bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.penup() # utile pour le site web.bksl-nlfred.goto(350,200) # utile pour le site web.bksl-nlfred.pendown() # utile pour le site web.bksl-nlfred.width(largeur)bksl-nlfred.color(couleurpy-undrouge, 0, 0)bksl-nlbksl-nln = 0bksl-nlwhile n < nombrepy-undmaxpy-undtraits:bksl-nl if longueur >= 0:bksl-nl fred.fd(longueur)bksl-nl fred.right(angle)bksl-nl # modifier le d\u00c3\u00a9cr\u00c3\u00a9ment et observer le r\u00c3\u00a9sultatbksl-nl print(longueur)bksl-nl longueur = longueur - 5bksl-nl if n % 5 == 0: bksl-nl largeur = largeur py-str 0.75bksl-nl fred.width(largeur)bksl-nl n = n + 1bksl-nl couleurpy-undrouge = couleurpy-undrouge py-str 0.95bksl-nl fred.color(couleurpy-undrouge, 0, 0)bksl-nlbksl-nlfred.mainloop()bksl-nlbksl-nl A Z","title":"TP 3"},{"location":"tp3/#tp-3-boucles-conditionnelles-avec-turtle","text":"","title":"TP 3 : Boucles conditionnelles avec Turtle"},{"location":"tp3/#exercice-4","text":"Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlbksl-nllongueur = 30bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.penup() # utile pour le site web.bksl-nlfred.goto(350,200) # utile pour le site web.bksl-nlfred.pendown() # utile pour le site web.bksl-nlbksl-nln = 0bksl-nlwhile n < 8:bksl-nl fred.fd(longueur)bksl-nl fred.right(45)bksl-nl n = n + 1bksl-nlbksl-nlfred.mainloop()bksl-nlbksl-nl A Z","title":"Exercice 4"},{"location":"tp3/#exercice-5","text":"Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlbksl-nllongueur = 30bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.penup() # utile pour le site web.bksl-nlfred.goto(350,200) # utile pour le site web.bksl-nlfred.pendown() # utile pour le site web.bksl-nlbksl-nln = 0bksl-nlwhile n < 8:bksl-nl fred.fd(longueur)bksl-nl fred.right(45)bksl-nl n = n + 1bksl-nlbksl-nlfred.mainloop()bksl-nlbksl-nl import turtlebksl-nlbksl-nllongueur = 30bksl-nlnombrepy-undc\u00c3\u00b4t\u00c3\u00a9 = 13bksl-nlangle = 360 / nombrepy-undc\u00c3\u00b4t\u00c3\u00a9bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.penup() # utile pour le site web.bksl-nlfred.goto(350,200) # utile pour le site web.bksl-nlfred.pendown() # utile pour le site web.bksl-nlbksl-nln = 0bksl-nlwhile n < nombrepy-undc\u00c3\u00b4t\u00c3\u00a9:bksl-nl fred.fd(longueur)bksl-nl fred.right(angle)bksl-nl n = n + 1bksl-nlbksl-nlfred.mainloop()bksl-nlbksl-nl A Z","title":"Exercice 5"},{"location":"tp3/#exercice-6","text":"Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlbksl-nllongueur = 30bksl-nlnombrepy-undc\u00c3\u00b4t\u00c3\u00a9 = 13bksl-nlangle = 360 / nombrepy-undc\u00c3\u00b4t\u00c3\u00a9bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.penup() # utile pour le site web.bksl-nlfred.goto(350,200) # utile pour le site web.bksl-nlfred.pendown() # utile pour le site web.bksl-nlbksl-nln = 0bksl-nlwhile n < 8:bksl-nl fred.fd(longueur)bksl-nl fred.right(45)bksl-nl n = n + 1bksl-nlbksl-nlfred.mainloop()bksl-nlbksl-nl import turtlebksl-nlbksl-nllongueur = 30bksl-nlnombrepy-undc\u00c3\u00b4t\u00c3\u00a9 = 13bksl-nlangle = 360 / nombrepy-undc\u00c3\u00b4t\u00c3\u00a9bksl-nlnombrepy-undmaxpy-undtraits = 30bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.penup() # utile pour le site web.bksl-nlfred.goto(350,200) # utile pour le site web.bksl-nlfred.pendown() # utile pour le site web.bksl-nlbksl-nln = 0bksl-nlwhile n < nombrepy-undmaxpy-undtraits:bksl-nl fred.fd(longueur)bksl-nl fred.right(angle)bksl-nl n = n + 1bksl-nlbksl-nlfred.mainloop()bksl-nlbksl-nl A Z","title":"Exercice 6"},{"location":"tp3/#exercice-7","text":"Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlbksl-nllongueur = 30bksl-nlnombrepy-undc\u00c3\u00b4t\u00c3\u00a9 = 13bksl-nlangle = 360 / nombrepy-undc\u00c3\u00b4t\u00c3\u00a9bksl-nlnombrepy-undmaxpy-undtraits = 30bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.penup() # utile pour le site web.bksl-nlfred.goto(350,200) # utile pour le site web.bksl-nlfred.pendown() # utile pour le site web.bksl-nlbksl-nln = 0bksl-nlwhile n < nombrepy-undmaxpy-undtraits:bksl-nl fred.fd(longueur)bksl-nl fred.right(angle)bksl-nl n = n + 1bksl-nlbksl-nlfred.mainloop()bksl-nlbksl-nl import turtlebksl-nlbksl-nllongueur = 100bksl-nlnombrepy-undc\u00c3\u00b4t\u00c3\u00a9 = 10bksl-nlangle = 360 / nombrepy-undc\u00c3\u00b4t\u00c3\u00a9bksl-nlnombrepy-undmaxpy-undtraits = 30bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.penup() # utile pour le site web.bksl-nlfred.goto(350,200) # utile pour le site web.bksl-nlfred.pendown() # utile pour le site web.bksl-nlbksl-nln = 0bksl-nlwhile n < nombrepy-undmaxpy-undtraits:bksl-nl fred.fd(longueur)bksl-nl fred.right(angle)bksl-nl # modifier le d\u00c3\u00a9cr\u00c3\u00a9ment et observer le r\u00c3\u00a9sultatbksl-nl print(longueur)bksl-nl longueur = longueur - 1 bksl-nl n = n + 1bksl-nlbksl-nlfred.mainloop()bksl-nlbksl-nl A Z","title":"Exercice 7"},{"location":"tp3/#exercice-8","text":"Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlbksl-nllongueur = 100bksl-nlnombrepy-undc\u00c3\u00b4t\u00c3\u00a9 = 10bksl-nlangle = 360 / nombrepy-undc\u00c3\u00b4t\u00c3\u00a9bksl-nlnombrepy-undmaxpy-undtraits = 30bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.penup() # utile pour le site web.bksl-nlfred.goto(350,200) # utile pour le site web.bksl-nlfred.pendown() # utile pour le site web.bksl-nlbksl-nln = 0bksl-nlwhile n < nombrepy-undmaxpy-undtraits:bksl-nl fred.fd(longueur)bksl-nl fred.right(angle)bksl-nl # modifier le d\u00c3\u00a9cr\u00c3\u00a9ment et observer le r\u00c3\u00a9sultatbksl-nl print(longueur)bksl-nl longueur = longueur - 1 bksl-nl n = n + 1bksl-nlbksl-nlfred.mainloop()bksl-nlbksl-nl import turtlebksl-nlbksl-nllongueur = 100bksl-nlnombrepy-undc\u00c3\u00b4t\u00c3\u00a9 = 10bksl-nlangle = 360 / nombrepy-undc\u00c3\u00b4t\u00c3\u00a9bksl-nlnombrepy-undmaxpy-undtraits = 30bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.penup() # utile pour le site web.bksl-nlfred.goto(350,200) # utile pour le site web.bksl-nlfred.pendown() # utile pour le site web.bksl-nlbksl-nln = 0bksl-nlwhile n < nombrepy-undmaxpy-undtraits:bksl-nl if longueur >= 0:bksl-nl fred.fd(longueur)bksl-nl fred.right(angle)bksl-nl # modifier le d\u00c3\u00a9cr\u00c3\u00a9ment et observer le r\u00c3\u00a9sultatbksl-nl print(longueur)bksl-nl longueur = longueur - 5bksl-nl n = n + 1bksl-nlbksl-nlfred.mainloop()bksl-nlbksl-nl A Z","title":"Exercice 8"},{"location":"tp3/#exercice-9","text":"Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlbksl-nllongueur = 100bksl-nlnombrepy-undc\u00c3\u00b4t\u00c3\u00a9 = 10bksl-nlangle = 360 / nombrepy-undc\u00c3\u00b4t\u00c3\u00a9bksl-nlnombrepy-undmaxpy-undtraits = 30bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.penup() # utile pour le site web.bksl-nlfred.goto(350,200) # utile pour le site web.bksl-nlfred.pendown() # utile pour le site web.bksl-nlbksl-nln = 0bksl-nlwhile n < nombrepy-undmaxpy-undtraits:bksl-nl if longueur >= 0:bksl-nl fred.fd(longueur)bksl-nl fred.right(angle)bksl-nl # modifier le d\u00c3\u00a9cr\u00c3\u00a9ment et observer le r\u00c3\u00a9sultatbksl-nl print(longueur)bksl-nl longueur = longueur - 5bksl-nl n = n + 1bksl-nlbksl-nlfred.mainloop()bksl-nlbksl-nl import turtlebksl-nlbksl-nllongueur = 100bksl-nlnombrepy-undc\u00c3\u00b4t\u00c3\u00a9 = 10bksl-nlangle = 360 / nombrepy-undc\u00c3\u00b4t\u00c3\u00a9bksl-nlnombrepy-undmaxpy-undtraits = 30bksl-nllargeur = 8bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.penup() # utile pour le site web.bksl-nlfred.goto(350,200) # utile pour le site web.bksl-nlfred.pendown() # utile pour le site web.bksl-nlfred.width(largeur)bksl-nlbksl-nln = 0bksl-nlwhile n < nombrepy-undmaxpy-undtraits:bksl-nl if longueur >= 0:bksl-nl fred.fd(longueur)bksl-nl fred.right(angle)bksl-nl # modifier le d\u00c3\u00a9cr\u00c3\u00a9ment et observer le r\u00c3\u00a9sultatbksl-nl print(longueur)bksl-nl longueur = longueur - 5bksl-nl if n % 5 == 0: bksl-nl largeur = largeur py-str 0.75bksl-nl fred.width(largeur)bksl-nl n = n + 1bksl-nlbksl-nlfred.mainloop()bksl-nlbksl-nl A Z","title":"Exercice 9"},{"location":"tp3/#exercice-10","text":"Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlbksl-nllongueur = 100bksl-nlnombrepy-undc\u00c3\u00b4t\u00c3\u00a9 = 10bksl-nlangle = 360 / nombrepy-undc\u00c3\u00b4t\u00c3\u00a9bksl-nlnombrepy-undmaxpy-undtraits = 30bksl-nllargeur = 8bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.penup() # utile pour le site web.bksl-nlfred.goto(350,200) # utile pour le site web.bksl-nlfred.pendown() # utile pour le site web.bksl-nlfred.width(largeur)bksl-nlbksl-nln = 0bksl-nlwhile n < nombrepy-undmaxpy-undtraits:bksl-nl if longueur >= 0:bksl-nl fred.fd(longueur)bksl-nl fred.right(angle)bksl-nl # modifier le d\u00c3\u00a9cr\u00c3\u00a9ment et observer le r\u00c3\u00a9sultatbksl-nl print(longueur)bksl-nl longueur = longueur - 5bksl-nl if n % 5 == 0: bksl-nl largeur = largeur py-str 0.75bksl-nl fred.width(largeur)bksl-nl n = n + 1bksl-nlbksl-nlfred.mainloop()bksl-nlbksl-nl import turtlebksl-nlbksl-nllongueur = 100bksl-nlnombrepy-undc\u00c3\u00b4t\u00c3\u00a9 = 10bksl-nlangle = 360 / nombrepy-undc\u00c3\u00b4t\u00c3\u00a9bksl-nlnombrepy-undmaxpy-undtraits = 30bksl-nllargeur = 8bksl-nlcouleurpy-undrouge = 1bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.penup() # utile pour le site web.bksl-nlfred.goto(350,200) # utile pour le site web.bksl-nlfred.pendown() # utile pour le site web.bksl-nlfred.width(largeur)bksl-nlfred.color(couleurpy-undrouge, 0, 0)bksl-nlbksl-nln = 0bksl-nlwhile n < nombrepy-undmaxpy-undtraits:bksl-nl if longueur >= 0:bksl-nl fred.fd(longueur)bksl-nl fred.right(angle)bksl-nl # modifier le d\u00c3\u00a9cr\u00c3\u00a9ment et observer le r\u00c3\u00a9sultatbksl-nl print(longueur)bksl-nl longueur = longueur - 5bksl-nl if n % 5 == 0: bksl-nl largeur = largeur py-str 0.75bksl-nl fred.width(largeur)bksl-nl n = n + 1bksl-nl couleurpy-undrouge = couleurpy-undrouge py-str 0.95bksl-nl fred.color(couleurpy-undrouge, 0, 0)bksl-nlbksl-nlfred.mainloop()bksl-nlbksl-nl A Z","title":"Exercice 10"},{"location":"tp4/","text":"TP 4 : Boucles inconditionnelles avec Turtle \u2693\ufe0e Exercice 1 - 2 \u2693\ufe0e Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.pu()bksl-nlfred.goto(-200, 40)bksl-nlfred.pd()bksl-nlcouleur = 1bksl-nlbksl-nlbksl-nlbksl-nlturtle.exitonclick()bksl-nlbksl-nl A Z Exercice 3 \u2693\ufe0e Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlbksl-nlxpy-undfred = -200bksl-nlypy-undfred = 40bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.pu()bksl-nlfred.goto(xpy-undfred, ypy-undfred)bksl-nlfred.pd()bksl-nlcouleur = 1bksl-nlbksl-nlfor i in range(11):bksl-nl if i % 2 == 0: taille = 40bksl-nl else: taille = 20bksl-nl fred.dot(taille, (couleur, 0, 0))bksl-nl fred.pu()bksl-nl fred.fd(40)bksl-nl fred.pd()bksl-nlbksl-nlfred.speed(10)bksl-nlturtle.exitonclick()bksl-nlbksl-nl import turtlebksl-nlimport randombksl-nlbksl-nlxpy-undfred = -200bksl-nlypy-undfred = 40bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.pu()bksl-nlfred.goto(xpy-undfred, ypy-undfred)bksl-nlfred.pd()bksl-nlcouleur = 1bksl-nlbksl-nlfor j in range(3):bksl-nl for i in range(11):bksl-nl if (i+j) % 2 == 0: taille = 40bksl-nl else: taille = 20bksl-nl fred.dot(taille, (random.random(), random.random(), random.random()))bksl-nl fred.pu()bksl-nl fred.fd(40)bksl-nl fred.pd()bksl-nl ypy-undfred = ypy-undfred - 40bksl-nl fred.pu()bksl-nl fred.goto(-200, ypy-undfred)bksl-nl fred.pd()bksl-nlbksl-nlturtle.exitonclick()bksl-nlbksl-nlbksl-nlaccumulateur = 0bksl-nlfor nombre in []bksl-nl A Z","title":"TP 4"},{"location":"tp4/#tp-4-boucles-inconditionnelles-avec-turtle","text":"","title":"TP 4 : Boucles inconditionnelles avec Turtle"},{"location":"tp4/#exercice-1-2","text":"Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.pu()bksl-nlfred.goto(-200, 40)bksl-nlfred.pd()bksl-nlcouleur = 1bksl-nlbksl-nlbksl-nlbksl-nlturtle.exitonclick()bksl-nlbksl-nl A Z","title":"Exercice 1 - 2"},{"location":"tp4/#exercice-3","text":"Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlbksl-nlxpy-undfred = -200bksl-nlypy-undfred = 40bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.pu()bksl-nlfred.goto(xpy-undfred, ypy-undfred)bksl-nlfred.pd()bksl-nlcouleur = 1bksl-nlbksl-nlfor i in range(11):bksl-nl if i % 2 == 0: taille = 40bksl-nl else: taille = 20bksl-nl fred.dot(taille, (couleur, 0, 0))bksl-nl fred.pu()bksl-nl fred.fd(40)bksl-nl fred.pd()bksl-nlbksl-nlfred.speed(10)bksl-nlturtle.exitonclick()bksl-nlbksl-nl import turtlebksl-nlimport randombksl-nlbksl-nlxpy-undfred = -200bksl-nlypy-undfred = 40bksl-nlbksl-nlfred = turtle.Turtle()bksl-nlfred.pu()bksl-nlfred.goto(xpy-undfred, ypy-undfred)bksl-nlfred.pd()bksl-nlcouleur = 1bksl-nlbksl-nlfor j in range(3):bksl-nl for i in range(11):bksl-nl if (i+j) % 2 == 0: taille = 40bksl-nl else: taille = 20bksl-nl fred.dot(taille, (random.random(), random.random(), random.random()))bksl-nl fred.pu()bksl-nl fred.fd(40)bksl-nl fred.pd()bksl-nl ypy-undfred = ypy-undfred - 40bksl-nl fred.pu()bksl-nl fred.goto(-200, ypy-undfred)bksl-nl fred.pd()bksl-nlbksl-nlturtle.exitonclick()bksl-nlbksl-nlbksl-nlaccumulateur = 0bksl-nlfor nombre in []bksl-nl A Z","title":"Exercice 3"},{"location":"tp8/","text":"TP 8 : Exercices sur les tableaux et les fonctions \u2693\ufe0e Exercice 1 \u272a \u2693\ufe0e \u00c9crire une fonction mesurer qui prend en param\u00e8tre : un tableau de taille quelconque. Cette fonction renvoie la taille du tableau. Lancer b1 = (\"mesurer([1,2,5]) == 3\", \"mesurer([10]py-str100) == 100\", \"mesurer([]) == 0\",)bksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nl def mesurer(tableau):bksl-nl taille = len(tableau)bksl-nl return taillebksl-nlbksl-nl# oubksl-nlbksl-nldef mesurer(tableau):bksl-nl return len(tableau)bksl-nl A Z Exercice 2 \u272a \u2693\ufe0e Compl\u00e9ter la fonction g\u00e9n\u00e9rer_tableau_0 qui prend en param\u00e8tre : un entier nombre_\u00e9l\u00e9ments . Cette fonction renvoie un tableau de taille nombre_\u00e9l\u00e9ments contenant uniquement des 0. Modifier la fonction g\u00e9n\u00e9rer_tableau_al\u00e9atoire qui prend en param\u00e8tres : un entier nombre_\u00e9l\u00e9ments ; deux entiers a et b ; Cette fonction renvoie un tableau de taille nombre_\u00e9l\u00e9ments contenant des nombres entiers al\u00e9atoires entre a et b . Rappel : pour g\u00e9n\u00e9rer des nombres al\u00e9atoires entre a et b , on utilisera random . randint ( a , b ) . Lancer def validerpy-undvaleur(T, a, b):bksl-nl return all(map(lambda x: a < =x < =b, T))bksl-nlbksl-nlb1 = (\"g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-und0(3) == [0]py-str3\", \"g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-und0(100) == [0]py-str100\", \"g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-und0(0) == []\",)bksl-nlb2 = (\"validerpy-undvaleur(g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undal\u00c3\u00a9atoire(3, 1, 6), 1, 6) == True\", \\bksl-nl \"validerpy-undvaleur(g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undal\u00c3\u00a9atoire(3, 1, 1), 1, 1) == True\", \\bksl-nl \"validerpy-undvaleur(g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undal\u00c3\u00a9atoire(100, 1, 100), 1, 100) == True\",)bksl-nlbksl-nlbenchmark = [b1, b2 ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import randombksl-nlbksl-nldef g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-und0(nombrepy-und\u00c3\u00a9l\u00c3\u00a9ments):bksl-nl tableaupy-unddepy-und0 = []bksl-nl return bksl-nlbksl-nldef g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undal\u00c3\u00a9atoire(nombrepy-und\u00c3\u00a9l\u00c3\u00a9ments, a, b):bksl-nl tableaupy-undal\u00c3\u00a9atoire = [i for i in range(nombrepy-und\u00c3\u00a9l\u00c3\u00a9ments)]bksl-nl returnbksl-nlbksl-nlTpy-undz\u00c3\u00a9ro = g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-und0(3)bksl-nlprint(Tpy-undz\u00c3\u00a9ro)bksl-nlTpy-undal\u00c3\u00a9a = g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undal\u00c3\u00a9atoire(5, 1, 6)bksl-nlprint(Tpy-undal\u00c3\u00a9a)bksl-nl import randombksl-nlbksl-nldef g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-und0(nombrepy-und\u00c3\u00a9l\u00c3\u00a9ments):bksl-nl tableaupy-unddepy-und0 = nombrepy-und\u00c3\u00a9l\u00c3\u00a9ments py-str [0]bksl-nl return tableaupy-unddepy-und0bksl-nlbksl-nldef g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undal\u00c3\u00a9atoire(nombrepy-und\u00c3\u00a9l\u00c3\u00a9ments, a, b):bksl-nl tableaupy-undal\u00c3\u00a9atoire = [random.randint(a,b) for i in range(nombrepy-und\u00c3\u00a9l\u00c3\u00a9ments)]bksl-nl return tableaupy-undal\u00c3\u00a9atoirebksl-nlbksl-nlTpy-undz\u00c3\u00a9ro = g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-und0(3)bksl-nlprint(Tpy-undz\u00c3\u00a9ro)bksl-nlTpy-undal\u00c3\u00a9a = g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undal\u00c3\u00a9atoire(5, 1, 6)bksl-nlprint(Tpy-undal\u00c3\u00a9a)bksl-nl A Z Exercice 3 \u272a \u2693\ufe0e Compl\u00e9ter la fonction v\u00e9rifier_appartenance qui prend en param\u00e8tres : un tableau d'entiers T ; un entier x . Cette fonction renvoie True si la valeur appartient au tableau et False sinon. Lancer def validerpy-undvaleur(T, a, b):bksl-nl return all(map(lambda x: a < =x < =b, T))bksl-nlbksl-nlb1 = (\"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1,3,6], 6) == 1\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([8,8,8], 8) == 3\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1, 8, 1, 8], 8) == 2\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1,3,99], 100) == 0\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nl def v\u00c3\u00a9rifierpy-undappartenance(T, x):bksl-nl if x in T:bksl-nl return Truebksl-nl else:bksl-nl return Falsebksl-nlbksl-nl# oubksl-nlbksl-nldef v\u00c3\u00a9rifierpy-undappartenance(T, x):bksl-nl return x in Tbksl-nl A Z Exercice 4 \u272a \u2693\ufe0e \u00c9crire une fonction compter_r\u00e9p\u00e9tition qui prend en param\u00e8tres : un tableau d'entiers T ; un entier \u00e9l\u00e9ment . Cette fonction compte le nombre de fois o\u00f9 l'\u00e9l\u00e9ment \u00e9l\u00e9ment figure dans le tableau T . Aide On aura sans doute besoin d'un accumulateur comptant le nombre de r\u00e9p\u00e9titions... Lancer def validerpy-undvaleur(T, a, b):bksl-nl return all(map(lambda x: a < =x < =b, T))bksl-nlbksl-nlb1 = (\"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1,3,6], 6) == 1\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([8,8,8], 8) == 3\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1, 8, 1, 8], 8) == 2\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1,3,99], 100) == 0\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nl def compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition(T, \u00c3\u00a9l\u00c3\u00a9ment):bksl-nl compteur = 0bksl-nl for entier in T:bksl-nl if entier == \u00c3\u00a9l\u00c3\u00a9ment:bksl-nl compteur = compteur + 1bksl-nl # une fois le parcours complet du bksl-nl # tableau, on renvoie le compteurbksl-nl return compteurbksl-nl A Z Exercice 5 \u272a \u2693\ufe0e \u00c9crire une fonction spiraler qui prend en param\u00e8tres : un tableau d'entiers T . Cette fonction dessine une spirale carr\u00e9e (angle \u00e0 90\u00b0) dont la longueur est donn\u00e9e par les valeurs du tableau T. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlbksl-nldef spiraler(T):bksl-nl return Nonebksl-nlbksl-nlT = [ipy-str5 for i in range(40)]bksl-nlspiraler(T)bksl-nl import turtlebksl-nlbksl-nldef spiraler(T):bksl-nl for longueur in T:bksl-nl turtle.forward(longueur)bksl-nl turtle.right(90)bksl-nl return Nonebksl-nlbksl-nlT = [ipy-str5 for i in range(40)]bksl-nlspiraler(T)bksl-nl A Z Aide On utilisera turtle . forward ( L ) pour avancer d'une longueur L et turtle . right ( A ) pour tourner \u00e0 droite d'un angle A. Exercice 6 \u272a\u272a \u2693\ufe0e \u00c9crire la fonction trouver_indice qui prend en param\u00e8tres : un tableau d'entiers T ; un entier x . Cette fonction renvoie : l'indice i de la position du premier entier du tableau \u00e9gal \u00e0 x ; None sinon. Lancer b1 = (\"trouverpy-undindice([1,3,6], 1) == 0\", \"trouverpy-undindice([i for i in range(100), 99) == 99\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nlbksl-nlT = [2, 4, 5, 7, 12, 7, 5]bksl-nlindice = trouverpy-undindice(T, 5)bksl-nlprint(indice)bksl-nl def trouverpy-undindice(T, x):bksl-nl for indice in range(len(T)):bksl-nl # si x est trouv\u00c3\u00a9 dans le tableaubksl-nl if T[indice] == x: bksl-nl # on renvoie l'indicebksl-nl return indicebksl-nl # on a fini de parcourir T etbksl-nl # x n'est pas trouv\u00c3\u00a9bksl-nl return Nonebksl-nlbksl-nlT = [2, 4, 5, 7, 12, 7, 5]bksl-nlindice = trouverpy-undindice(T, 5)bksl-nlprint(indice)bksl-nl A Z Point cours ! \u2693\ufe0e Cours Il est \u00e9galement possible de modifier les valeurs d'un tableaux en acc\u00e9dant \u00e0 ses \u00e9l\u00e9ments par indice . Ainsi : T = [ 1 , 2 , 3 ] for i in range ( len ( T )): T [ i ] = T [ i ] * 2 print ( T ) permet de multiplier par 2 tous les \u00e9l\u00e9ments du tableau T . Essayez cet exemple dans le terminal ci-dessous : >>> Exercice 7 \u272a \u2693\ufe0e En vous aidant des commentaires, \u00e9crire la fonction ajouter_lettre qui prend en param\u00e8tres : un tableau de lettres T de taille len ( T ) ; une lettre lettre . Cette fonction renvoie un tableau de lettres T de taille len ( T ) + 1 . Par exemple : ajouter_lettre ([ 'c' , 'a' , 't' ] , 's' ) renvoie [ 'c' , 'a' , 't' , 's' ] Lancer b1 = (\"ajouterpy-undlettre(['a','b'], 'c') == ['a','b','c']\", \"ajouterpy-undlettre([], 'a') == ['a']\", \"ajouterpy-undlettre(['a']py-str3, 'b') == ['a', 'a', 'a', 'b']\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def ajouterpy-undlettre(T, lettre):bksl-nl taille = len(T)bksl-nl # cr\u00c3\u00a9er un nouveau tableau de taille len(T) + 1bksl-nl # rempli de 0bksl-nlbksl-nl # remplir ce tableau gr\u00c3\u00a2ce \u00c3 un parcours de Tbksl-nl # sur les indicesbksl-nlbksl-nl # rajouter la lettre \u00c3 la derni\u00c3\u00a8re position bksl-nl # dans le nouveau tableau (len(T))bksl-nlbksl-nl # renvoyer le nouveaupy-undtableaubksl-nl passbksl-nlbksl-nlT1 = ['c', 'a', 't']bksl-nllettre = 's'bksl-nlT2 = ajouterpy-undlettre(T1, lettre)bksl-nlprint(T2)bksl-nl def ajouterpy-undlettre(T, lettre):bksl-nl taille = len(T)bksl-nl nouveaupy-undtableau = [0] py-str (taille+1)bksl-nl bksl-nl for i in range(taille):bksl-nl nouveaupy-undtableau[i] = T[i]bksl-nl nouveaupy-undtableau[len(T)] = lettrebksl-nl bksl-nl return nouveaupy-undtableaubksl-nlbksl-nlT1 = ['c', 'a', 't']bksl-nllettre = 's'bksl-nlT2 = ajouterpy-undlettre(T1, lettre)bksl-nlprint(T2)bksl-nl A Z Exercice 8 \u272a \u2693\ufe0e Compl\u00e9ter la fonction concat\u00e9ner qui prend en param\u00e8tres : un tableau de nombres entiers T1 de taille len ( T1 ) ; un tableau de nombres entiers T2 de taille len ( T2 ) ; Cette fonction renvoie un tableau d'entiers T de taille len ( T1 ) + len ( T2 ) . Par exemple : concat\u00e9ner ([ 8 , 6 , 4 ] , [ 1 , 2 ]) renvoie [ 8 , 6 , 4 , 1 , 2 ] Lancer b1 = (\"concat\u00c3\u00a9ner([1,3,6], [6]) == [1,3,6,6]\", \"concat\u00c3\u00a9ner([6], [6,1,4]) == [6,6,1,4]\", \"concat\u00c3\u00a9ner([], [6]) == [6]\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def concat\u00c3\u00a9ner(T1, T2):bksl-nl passbksl-nlbksl-nltableau1 = [3, 4, 5]bksl-nltableau2 = [6, 7]bksl-nltableaupy-undcomplet = concat\u00c3\u00a9ner(tableau1, tableau2)bksl-nlprint(tableaupy-undcomplet)bksl-nl def concat\u00c3\u00a9ner(T1, T2):bksl-nl taille1 = len(T1)bksl-nl taille2 = len(T2)bksl-nl bksl-nl nouveaupy-undtableau = [0] py-str (taille1 + taille2)bksl-nl bksl-nl for i in range(taille1):bksl-nl nouveaupy-undtableau[i] = T1[i]bksl-nl for i in range(taille2):bksl-nl # On ne veut pas r\u00c3\u00a9\u00c3\u00a9crire sur les indices 0, 1 ,2...bksl-nl nouveaupy-undtableau[i + taille1] = T2[i]bksl-nl bksl-nl return nouveaupy-undtableaubksl-nlbksl-nltableau1 = [3, 4, 5]bksl-nltableau2 = [6, 7]bksl-nltableaupy-undcomplet = concat\u00c3\u00a9ner(tableau1, tableau2)bksl-nlprint(tableaupy-undcomplet)bksl-nl A Z Exercice 9 \u272a \u2693\ufe0e \u00c9crire la fonction prefixe qui prend en param\u00e8tres : un tableau de nombres entiers T1 de taille len ( T1 ) ; un tableau de nombres entiers T2 de taille len ( T2 ) ; Cette fonction renvoie True si le tableau T2 commence par tous les \u00e9l\u00e9ments du tableau T1 dans le m\u00eame ordre et False sinon. Lancer b1 = (\"prefixe([5], [5, 3, 1, 8, 8]) == True\", \\bksl-nl \"prefixe([3], [1, 8, 8]) == False\", \\bksl-nl \"prefixe([8,8,8], [8]) == False\", \\bksl-nl \"prefixe([], [5, 3, 1, 8, 8]) == True\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def prefixe(T1, T2):bksl-nl taillepy-undT1 = len(T1)bksl-nl taillepy-undT2 = len(T2)bksl-nl passbksl-nlbksl-nlT1 = [5, 6, 3, 1]bksl-nlT2 = [5, 6, 3, 1, 8, 8]bksl-nlprint(prefixe(T1, T2))bksl-nlprint(prefixe(T2, T1))bksl-nl def prefixe(T1, T2):bksl-nl taillepy-undT1 = len(T1)bksl-nl taillepy-undT2 = len(T2)bksl-nl # cas o\u00c3\u00b9 T2 est plus petit que T1bksl-nl # T1 ne peut pas \u00c3\u00aatre un pr\u00c3\u00a9fixe...bksl-nl if taillepy-undT2 < taillepy-undT1:bksl-nl return Falsebksl-nlbksl-nl for indice in range(taillepy-undT1):bksl-nl if T1[indice] != T2[indice]:bksl-nl return Falsebksl-nl else:bksl-nl print(\"Jusque-l\u00c3 , tout va bien...\")bksl-nl # on a parcouru tout T1 et tous les \u00c3\u00a9l\u00c3\u00a9ments bksl-nl # sont les m\u00c3\u00aamesbksl-nl return Truebksl-nlbksl-nlT1 = [5, 6, 3, 1]bksl-nlT2 = [5, 6, 3, 1, 8, 8]bksl-nlprint(prefixe(T1, T2))bksl-nlprint(prefixe(T2, T1))bksl-nlbksl-nlbksl-nl A Z Exercice 10 \u272a\u272a \u2693\ufe0e \u00c9crire la fonction suffixe qui prend en param\u00e8tres : un tableau de nombres entiers T1 de taille len ( T1 ) ; un tableau de nombres entiers T2 de taille len ( T2 ) ; Cette fonction renvoie True si le tableau T2 termine par tous les \u00e9l\u00e9ments du tableau T1 dans le m\u00eame ordre et False sinon. Lancer b1 = (\"suffixe([8, 5], [1, 8, 5]) == True\", \\bksl-nl \"suffixe([3], [1, 8, 8]) == False\",\\bksl-nl \"suffixe([8,8,8], [8]) == False\",\\bksl-nl \"suffixe([], [5, 3, 1, 8]) == True\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def suffixe(T1, T2):bksl-nl taillepy-undT1 = len(T1)bksl-nl taillepy-undT2 = len(T2)bksl-nl bksl-nlbksl-nlT1 = [1, 8, 8]bksl-nlT2 = [5, 6, 3, 1, 8, 8]bksl-nlprint(suffixe(T1, T2))bksl-nlprint(suffixe(T2, T1))bksl-nlbksl-nlbksl-nl def suffixe(T1, T2):bksl-nl taillepy-undT1 = len(T1)bksl-nl taillepy-undT2 = len(T2)bksl-nl # cas o\u00c3\u00b9 T2 est plus petit que T1bksl-nl # T1 ne peut pas \u00c3\u00aatre un pr\u00c3\u00a9fixe...bksl-nl if taillepy-undT2 < taillepy-undT1:bksl-nl return Falsebksl-nlbksl-nl for indice in range(taillepy-undT1):bksl-nl if T1[taillepy-undT1 - indice - 1] != T2[taillepy-undT2 - indice - 1]:bksl-nl return Falsebksl-nl else:bksl-nl print(\"Jusque-l\u00c3 , tout va bien...\")bksl-nl # on a parcouru tout T1 dans l'ordre inversebksl-nl # et tous les \u00c3\u00a9l\u00c3\u00a9ments sont les m\u00c3\u00aamesbksl-nl return Truebksl-nlbksl-nlT1 = [1, 8, 8]bksl-nlT2 = [5, 6, 3, 1, 8, 8]bksl-nlprint(suffixe(T1, T2))bksl-nlprint(suffixe(T2, T1))bksl-nl A Z Aide Pour lire un tableau dans le sens inverse, il faut trouver une formule \u00e0 appliquer sur les indices du tableau. Par exemple, un tableau de taille 4 va se parcourir ainsi sur l'indice i par ordre croissant : i 0 1 2 3 ??? 3 2 1 0 Quelle sera la formule \u00e0 \u00e9crire \u00e0 la place des ??? pour obtenir 3 quand i vaut 0; 2 quand i vaut 1 etc. Exercice 11 \u272a\u272a \u2693\ufe0e \u00c9crire la fonction d\u00e9terminer_minimum qui prend en param\u00e8tres : un entier taille_T1 ; un entier taille_T2 ; Cette fonction renvoie le maximum des deux tailles. \u00c9crire la fonction distance_hamming qui prend en param\u00e8tres : un tableau de cha\u00eene de caract\u00e8res T1 de taille len ( T1 ) ; un tableau de cha\u00eene de caract\u00e8res T2 de taille len ( T2 ) ; Cette fonction renvoie le nombre de lettres qui diff\u00e8re d'un tableau \u00e0 l'autre. Si les tableaux sont de taille diff\u00e9rente, les caract\u00e8res en trop seront compt\u00e9s comme des diff\u00e9rences : on utilisera la fonction d\u00e9terminer_minimum pour comparer la taille des tableaux. Par exemple : distance_hamming ([ 't' , 'o' , 't' , 'o' ] , [ 't' , 'a' , 't' , 'a' ]) renvoie [ 8 , 6 , 4 , 1 , 2 ] Lancer b1 = (\"d\u00c3\u00a9terminerpy-undminimum(8, 2) == 2\", \"d\u00c3\u00a9terminerpy-undminimum(1, 8) == 1\", \"d\u00c3\u00a9terminerpy-undminimum(-1, -2) == -2\")bksl-nlb2 = (\"distancepy-undhamming(['c', 'h', 'a', 't'], ['c', 'h', 'a', 't']) == 0\", \\bksl-nl \"distancepy-undhamming(['c', 'h', 'i', 'e', 'n'], ['c', 'h', 'i', 'o', 't']) == 2\", \\bksl-nl \"distancepy-undhamming(['c', 'h', 'a', 't'], ['c', 'h', 'a', 't', 'o', 'n']) == 2\",bksl-nl \"distancepy-undhamming(['v', 'i', 'd', 'e'], []) == 4\")bksl-nlbksl-nlbenchmark = [b1, b2 ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def d\u00c3\u00a9terminerpy-undminimum(taillepy-undT1, taillepy-undT2):bksl-nl passbksl-nlbksl-nldef distancepy-undhamming(T1, T2):bksl-nl passbksl-nlbksl-nlT1 = ['a', 'c', 'b', 'a']bksl-nlT2 = ['a', 'b', 'b', 'a', 'c', 'd', 'd']bksl-nlbksl-nlprint(distancepy-undhamming(T1, T2)) # doit renvoyer 4bksl-nl def d\u00c3\u00a9terminerpy-undminimum(taillepy-undT1, taillepy-undT2):bksl-nl if taillepy-undT2 > taillepy-undT1: return taillepy-undT1bksl-nl else: return taillepy-undT2bksl-nlbksl-nldef distancepy-undhamming(T1, T2):bksl-nl taillepy-undT1 = len(T1)bksl-nl taillepy-undT2 = len(T2)bksl-nl taillepy-undminimum = d\u00c3\u00a9terminerpy-undminimum(taillepy-undT1, taillepy-undT2)bksl-nlbksl-nl diff\u00c3\u00a9rence = 0bksl-nl for indice in range(taillepy-undminimum):bksl-nl if T1[indice] != T2[indice]:bksl-nl diff\u00c3\u00a9rence = diff\u00c3\u00a9rence + 1bksl-nlbksl-nl if taillepy-undT1 > taillepy-undminimum:bksl-nl manquant = taillepy-undT1 - taillepy-undminimumbksl-nl else:bksl-nl manquant = taillepy-undT2 - taillepy-undminimumbksl-nlbksl-nl diff\u00c3\u00a9rence = diff\u00c3\u00a9rence + manquantbksl-nl return diff\u00c3\u00a9rencebksl-nlbksl-nlT1 = ['a', 'c', 'b', 'a']bksl-nlT2 = ['a', 'b', 'b', 'a', 'c', 'd', 'd']bksl-nlbksl-nlprint(distancepy-undhamming(T1, T2))bksl-nl A Z Exercice 12 \u272a\u272a\u272a \u2693\ufe0e Comme nous le verrons par la suite, les algorithmes de tri de tableaux sont un cas fondamental en th\u00e9orie informatique. Ils permettent d'aborder la notion d'efficacit\u00e9 au travers de la complexit\u00e9 (~ le co\u00fbt) d'un algorithme. Nous proposons ici d'impl\u00e9menter une m\u00e9thode de tri tr\u00e8s simple. Prenons le tableau suivant : [ 5 , 3 , 2 , 7 ] Premier passage dans la boucle externe \u00c9tape i = 0 : pla\u00e7ons le plus petit \u00e9l\u00e9ment \u00e0 l' indice 0 du tableau. Passage j = 0 5 3 2 7 5 == 5 \u2192 On ne fait rien. Passage j = 1 5 3 2 7 3 <= 5 \u2192 On \u00e9change T [ 1 ] avec T [ 0 ] Passage j = 2 3 5 2 7 2 <= 3 \u2192 On \u00e9change T [ 2 ] avec T [ 0 ] Passage j = 3 2 5 3 7 7 >= 2 \u2192 On ne fait rien. i = 0 contient l'\u00e9l\u00e9ment le plus petit. Deuxi\u00e8me passage dans la boucle externe \u00c9tape i = 1 : pla\u00e7ons le second plus petit \u00e9l\u00e9ment \u00e0 l' indice 1 du tableau. Passage j = 0 2 5 3 7 2 <= 5 \u2192 On ne fait rien. Passage j = 1 2 5 3 7 5 == 5 \u2192 On ne fait rien Passage j = 2 2 5 3 7 3 <= 5 \u2192 On \u00e9change T [ 2 ] avec T [ 1 ] Passage j = 3 2 3 5 7 7 >= 3 \u2192 On ne fait rien. i = 1 contient le deuxi\u00e8me \u00e9l\u00e9ment le plus petit. Les deux premiers \u00e9l\u00e9ments du tableau sont tri\u00e9s dans l'ordre croissant. L'algorithme comporte donc deux boucles imbriqu\u00e9es l'une dans l'autre. \u00c0 chaque fois qu'on trouve un nouvel entier plus petit qu' l'entier situ\u00e9 \u00e0 la position i , on l'inverse avec celui situ\u00e9 \u00e0 la position j . \u00c9crire une fonction trier qui prend pour param\u00e8tre un tableau T et r\u00e9alise le tri de ce tableau selon l'algorithme ci-dessus. La fonction renvoie un tableau tri\u00e9 dans l'ordre croissant. Lancer def validerpy-undvaleur(T, a, b):bksl-nl return all(map(lambda x: a < =x < =b, T))bksl-nlbksl-nlb1 = (\"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1,3,6], 6) == 1\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([8,8,8], 8) == 3\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1, 8, 1, 8], 8) == 2\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1,3,99], 100) == 0\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def trier(T):bksl-nl for i in range(len(T)):bksl-nl for j in range(len(T)):bksl-nl if T[i] < T[j]:bksl-nl T[i], T[j] = T[j], T[i]bksl-nl return Tbksl-nlbksl-nlT = [5, 3, 9, 1, 8, 3, -1, 9, 1]bksl-nlprint(T)bksl-nlT = trier(T)bksl-nlprint(T)bksl-nl def trier(T):bksl-nl for i in range(len(T)):bksl-nl for j in range(len(T)):bksl-nl if T[i] < T[j]:bksl-nl T[i], T[j] = T[j], T[i]bksl-nl return Tbksl-nlbksl-nlT = [5, 3, 9, 1, 8, 3, -1, 9, 1]bksl-nlprint(T)bksl-nlT = trier(T)bksl-nlprint(T)bksl-nl A Z","title":"TP 8"},{"location":"tp8/#tp-8-exercices-sur-les-tableaux-et-les-fonctions","text":"","title":"TP 8 : Exercices sur les tableaux et les fonctions"},{"location":"tp8/#exercice-1","text":"\u00c9crire une fonction mesurer qui prend en param\u00e8tre : un tableau de taille quelconque. Cette fonction renvoie la taille du tableau. Lancer b1 = (\"mesurer([1,2,5]) == 3\", \"mesurer([10]py-str100) == 100\", \"mesurer([]) == 0\",)bksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nl def mesurer(tableau):bksl-nl taille = len(tableau)bksl-nl return taillebksl-nlbksl-nl# oubksl-nlbksl-nldef mesurer(tableau):bksl-nl return len(tableau)bksl-nl A Z","title":"Exercice 1 \u272a"},{"location":"tp8/#exercice-2","text":"Compl\u00e9ter la fonction g\u00e9n\u00e9rer_tableau_0 qui prend en param\u00e8tre : un entier nombre_\u00e9l\u00e9ments . Cette fonction renvoie un tableau de taille nombre_\u00e9l\u00e9ments contenant uniquement des 0. Modifier la fonction g\u00e9n\u00e9rer_tableau_al\u00e9atoire qui prend en param\u00e8tres : un entier nombre_\u00e9l\u00e9ments ; deux entiers a et b ; Cette fonction renvoie un tableau de taille nombre_\u00e9l\u00e9ments contenant des nombres entiers al\u00e9atoires entre a et b . Rappel : pour g\u00e9n\u00e9rer des nombres al\u00e9atoires entre a et b , on utilisera random . randint ( a , b ) . Lancer def validerpy-undvaleur(T, a, b):bksl-nl return all(map(lambda x: a < =x < =b, T))bksl-nlbksl-nlb1 = (\"g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-und0(3) == [0]py-str3\", \"g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-und0(100) == [0]py-str100\", \"g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-und0(0) == []\",)bksl-nlb2 = (\"validerpy-undvaleur(g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undal\u00c3\u00a9atoire(3, 1, 6), 1, 6) == True\", \\bksl-nl \"validerpy-undvaleur(g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undal\u00c3\u00a9atoire(3, 1, 1), 1, 1) == True\", \\bksl-nl \"validerpy-undvaleur(g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undal\u00c3\u00a9atoire(100, 1, 100), 1, 100) == True\",)bksl-nlbksl-nlbenchmark = [b1, b2 ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import randombksl-nlbksl-nldef g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-und0(nombrepy-und\u00c3\u00a9l\u00c3\u00a9ments):bksl-nl tableaupy-unddepy-und0 = []bksl-nl return bksl-nlbksl-nldef g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undal\u00c3\u00a9atoire(nombrepy-und\u00c3\u00a9l\u00c3\u00a9ments, a, b):bksl-nl tableaupy-undal\u00c3\u00a9atoire = [i for i in range(nombrepy-und\u00c3\u00a9l\u00c3\u00a9ments)]bksl-nl returnbksl-nlbksl-nlTpy-undz\u00c3\u00a9ro = g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-und0(3)bksl-nlprint(Tpy-undz\u00c3\u00a9ro)bksl-nlTpy-undal\u00c3\u00a9a = g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undal\u00c3\u00a9atoire(5, 1, 6)bksl-nlprint(Tpy-undal\u00c3\u00a9a)bksl-nl import randombksl-nlbksl-nldef g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-und0(nombrepy-und\u00c3\u00a9l\u00c3\u00a9ments):bksl-nl tableaupy-unddepy-und0 = nombrepy-und\u00c3\u00a9l\u00c3\u00a9ments py-str [0]bksl-nl return tableaupy-unddepy-und0bksl-nlbksl-nldef g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undal\u00c3\u00a9atoire(nombrepy-und\u00c3\u00a9l\u00c3\u00a9ments, a, b):bksl-nl tableaupy-undal\u00c3\u00a9atoire = [random.randint(a,b) for i in range(nombrepy-und\u00c3\u00a9l\u00c3\u00a9ments)]bksl-nl return tableaupy-undal\u00c3\u00a9atoirebksl-nlbksl-nlTpy-undz\u00c3\u00a9ro = g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-und0(3)bksl-nlprint(Tpy-undz\u00c3\u00a9ro)bksl-nlTpy-undal\u00c3\u00a9a = g\u00c3\u00a9n\u00c3\u00a9rerpy-undtableaupy-undal\u00c3\u00a9atoire(5, 1, 6)bksl-nlprint(Tpy-undal\u00c3\u00a9a)bksl-nl A Z","title":"Exercice 2 \u272a"},{"location":"tp8/#exercice-3","text":"Compl\u00e9ter la fonction v\u00e9rifier_appartenance qui prend en param\u00e8tres : un tableau d'entiers T ; un entier x . Cette fonction renvoie True si la valeur appartient au tableau et False sinon. Lancer def validerpy-undvaleur(T, a, b):bksl-nl return all(map(lambda x: a < =x < =b, T))bksl-nlbksl-nlb1 = (\"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1,3,6], 6) == 1\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([8,8,8], 8) == 3\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1, 8, 1, 8], 8) == 2\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1,3,99], 100) == 0\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nl def v\u00c3\u00a9rifierpy-undappartenance(T, x):bksl-nl if x in T:bksl-nl return Truebksl-nl else:bksl-nl return Falsebksl-nlbksl-nl# oubksl-nlbksl-nldef v\u00c3\u00a9rifierpy-undappartenance(T, x):bksl-nl return x in Tbksl-nl A Z","title":"Exercice 3 \u272a"},{"location":"tp8/#exercice-4","text":"\u00c9crire une fonction compter_r\u00e9p\u00e9tition qui prend en param\u00e8tres : un tableau d'entiers T ; un entier \u00e9l\u00e9ment . Cette fonction compte le nombre de fois o\u00f9 l'\u00e9l\u00e9ment \u00e9l\u00e9ment figure dans le tableau T . Aide On aura sans doute besoin d'un accumulateur comptant le nombre de r\u00e9p\u00e9titions... Lancer def validerpy-undvaleur(T, a, b):bksl-nl return all(map(lambda x: a < =x < =b, T))bksl-nlbksl-nlb1 = (\"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1,3,6], 6) == 1\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([8,8,8], 8) == 3\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1, 8, 1, 8], 8) == 2\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1,3,99], 100) == 0\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nl def compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition(T, \u00c3\u00a9l\u00c3\u00a9ment):bksl-nl compteur = 0bksl-nl for entier in T:bksl-nl if entier == \u00c3\u00a9l\u00c3\u00a9ment:bksl-nl compteur = compteur + 1bksl-nl # une fois le parcours complet du bksl-nl # tableau, on renvoie le compteurbksl-nl return compteurbksl-nl A Z","title":"Exercice 4 \u272a"},{"location":"tp8/#exercice-5","text":"\u00c9crire une fonction spiraler qui prend en param\u00e8tres : un tableau d'entiers T . Cette fonction dessine une spirale carr\u00e9e (angle \u00e0 90\u00b0) dont la longueur est donn\u00e9e par les valeurs du tableau T. Lancer benchmark = []bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder import turtlebksl-nlbksl-nldef spiraler(T):bksl-nl return Nonebksl-nlbksl-nlT = [ipy-str5 for i in range(40)]bksl-nlspiraler(T)bksl-nl import turtlebksl-nlbksl-nldef spiraler(T):bksl-nl for longueur in T:bksl-nl turtle.forward(longueur)bksl-nl turtle.right(90)bksl-nl return Nonebksl-nlbksl-nlT = [ipy-str5 for i in range(40)]bksl-nlspiraler(T)bksl-nl A Z Aide On utilisera turtle . forward ( L ) pour avancer d'une longueur L et turtle . right ( A ) pour tourner \u00e0 droite d'un angle A.","title":"Exercice 5 \u272a"},{"location":"tp8/#exercice-6","text":"\u00c9crire la fonction trouver_indice qui prend en param\u00e8tres : un tableau d'entiers T ; un entier x . Cette fonction renvoie : l'indice i de la position du premier entier du tableau \u00e9gal \u00e0 x ; None sinon. Lancer b1 = (\"trouverpy-undindice([1,3,6], 1) == 0\", \"trouverpy-undindice([i for i in range(100), 99) == 99\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder bksl-nlbksl-nlT = [2, 4, 5, 7, 12, 7, 5]bksl-nlindice = trouverpy-undindice(T, 5)bksl-nlprint(indice)bksl-nl def trouverpy-undindice(T, x):bksl-nl for indice in range(len(T)):bksl-nl # si x est trouv\u00c3\u00a9 dans le tableaubksl-nl if T[indice] == x: bksl-nl # on renvoie l'indicebksl-nl return indicebksl-nl # on a fini de parcourir T etbksl-nl # x n'est pas trouv\u00c3\u00a9bksl-nl return Nonebksl-nlbksl-nlT = [2, 4, 5, 7, 12, 7, 5]bksl-nlindice = trouverpy-undindice(T, 5)bksl-nlprint(indice)bksl-nl A Z","title":"Exercice 6 \u272a\u272a"},{"location":"tp8/#point-cours","text":"Cours Il est \u00e9galement possible de modifier les valeurs d'un tableaux en acc\u00e9dant \u00e0 ses \u00e9l\u00e9ments par indice . Ainsi : T = [ 1 , 2 , 3 ] for i in range ( len ( T )): T [ i ] = T [ i ] * 2 print ( T ) permet de multiplier par 2 tous les \u00e9l\u00e9ments du tableau T . Essayez cet exemple dans le terminal ci-dessous : >>>","title":"Point cours !"},{"location":"tp8/#exercice-7","text":"En vous aidant des commentaires, \u00e9crire la fonction ajouter_lettre qui prend en param\u00e8tres : un tableau de lettres T de taille len ( T ) ; une lettre lettre . Cette fonction renvoie un tableau de lettres T de taille len ( T ) + 1 . Par exemple : ajouter_lettre ([ 'c' , 'a' , 't' ] , 's' ) renvoie [ 'c' , 'a' , 't' , 's' ] Lancer b1 = (\"ajouterpy-undlettre(['a','b'], 'c') == ['a','b','c']\", \"ajouterpy-undlettre([], 'a') == ['a']\", \"ajouterpy-undlettre(['a']py-str3, 'b') == ['a', 'a', 'a', 'b']\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def ajouterpy-undlettre(T, lettre):bksl-nl taille = len(T)bksl-nl # cr\u00c3\u00a9er un nouveau tableau de taille len(T) + 1bksl-nl # rempli de 0bksl-nlbksl-nl # remplir ce tableau gr\u00c3\u00a2ce \u00c3 un parcours de Tbksl-nl # sur les indicesbksl-nlbksl-nl # rajouter la lettre \u00c3 la derni\u00c3\u00a8re position bksl-nl # dans le nouveau tableau (len(T))bksl-nlbksl-nl # renvoyer le nouveaupy-undtableaubksl-nl passbksl-nlbksl-nlT1 = ['c', 'a', 't']bksl-nllettre = 's'bksl-nlT2 = ajouterpy-undlettre(T1, lettre)bksl-nlprint(T2)bksl-nl def ajouterpy-undlettre(T, lettre):bksl-nl taille = len(T)bksl-nl nouveaupy-undtableau = [0] py-str (taille+1)bksl-nl bksl-nl for i in range(taille):bksl-nl nouveaupy-undtableau[i] = T[i]bksl-nl nouveaupy-undtableau[len(T)] = lettrebksl-nl bksl-nl return nouveaupy-undtableaubksl-nlbksl-nlT1 = ['c', 'a', 't']bksl-nllettre = 's'bksl-nlT2 = ajouterpy-undlettre(T1, lettre)bksl-nlprint(T2)bksl-nl A Z","title":"Exercice 7 \u272a"},{"location":"tp8/#exercice-8","text":"Compl\u00e9ter la fonction concat\u00e9ner qui prend en param\u00e8tres : un tableau de nombres entiers T1 de taille len ( T1 ) ; un tableau de nombres entiers T2 de taille len ( T2 ) ; Cette fonction renvoie un tableau d'entiers T de taille len ( T1 ) + len ( T2 ) . Par exemple : concat\u00e9ner ([ 8 , 6 , 4 ] , [ 1 , 2 ]) renvoie [ 8 , 6 , 4 , 1 , 2 ] Lancer b1 = (\"concat\u00c3\u00a9ner([1,3,6], [6]) == [1,3,6,6]\", \"concat\u00c3\u00a9ner([6], [6,1,4]) == [6,6,1,4]\", \"concat\u00c3\u00a9ner([], [6]) == [6]\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def concat\u00c3\u00a9ner(T1, T2):bksl-nl passbksl-nlbksl-nltableau1 = [3, 4, 5]bksl-nltableau2 = [6, 7]bksl-nltableaupy-undcomplet = concat\u00c3\u00a9ner(tableau1, tableau2)bksl-nlprint(tableaupy-undcomplet)bksl-nl def concat\u00c3\u00a9ner(T1, T2):bksl-nl taille1 = len(T1)bksl-nl taille2 = len(T2)bksl-nl bksl-nl nouveaupy-undtableau = [0] py-str (taille1 + taille2)bksl-nl bksl-nl for i in range(taille1):bksl-nl nouveaupy-undtableau[i] = T1[i]bksl-nl for i in range(taille2):bksl-nl # On ne veut pas r\u00c3\u00a9\u00c3\u00a9crire sur les indices 0, 1 ,2...bksl-nl nouveaupy-undtableau[i + taille1] = T2[i]bksl-nl bksl-nl return nouveaupy-undtableaubksl-nlbksl-nltableau1 = [3, 4, 5]bksl-nltableau2 = [6, 7]bksl-nltableaupy-undcomplet = concat\u00c3\u00a9ner(tableau1, tableau2)bksl-nlprint(tableaupy-undcomplet)bksl-nl A Z","title":"Exercice 8 \u272a"},{"location":"tp8/#exercice-9","text":"\u00c9crire la fonction prefixe qui prend en param\u00e8tres : un tableau de nombres entiers T1 de taille len ( T1 ) ; un tableau de nombres entiers T2 de taille len ( T2 ) ; Cette fonction renvoie True si le tableau T2 commence par tous les \u00e9l\u00e9ments du tableau T1 dans le m\u00eame ordre et False sinon. Lancer b1 = (\"prefixe([5], [5, 3, 1, 8, 8]) == True\", \\bksl-nl \"prefixe([3], [1, 8, 8]) == False\", \\bksl-nl \"prefixe([8,8,8], [8]) == False\", \\bksl-nl \"prefixe([], [5, 3, 1, 8, 8]) == True\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def prefixe(T1, T2):bksl-nl taillepy-undT1 = len(T1)bksl-nl taillepy-undT2 = len(T2)bksl-nl passbksl-nlbksl-nlT1 = [5, 6, 3, 1]bksl-nlT2 = [5, 6, 3, 1, 8, 8]bksl-nlprint(prefixe(T1, T2))bksl-nlprint(prefixe(T2, T1))bksl-nl def prefixe(T1, T2):bksl-nl taillepy-undT1 = len(T1)bksl-nl taillepy-undT2 = len(T2)bksl-nl # cas o\u00c3\u00b9 T2 est plus petit que T1bksl-nl # T1 ne peut pas \u00c3\u00aatre un pr\u00c3\u00a9fixe...bksl-nl if taillepy-undT2 < taillepy-undT1:bksl-nl return Falsebksl-nlbksl-nl for indice in range(taillepy-undT1):bksl-nl if T1[indice] != T2[indice]:bksl-nl return Falsebksl-nl else:bksl-nl print(\"Jusque-l\u00c3 , tout va bien...\")bksl-nl # on a parcouru tout T1 et tous les \u00c3\u00a9l\u00c3\u00a9ments bksl-nl # sont les m\u00c3\u00aamesbksl-nl return Truebksl-nlbksl-nlT1 = [5, 6, 3, 1]bksl-nlT2 = [5, 6, 3, 1, 8, 8]bksl-nlprint(prefixe(T1, T2))bksl-nlprint(prefixe(T2, T1))bksl-nlbksl-nlbksl-nl A Z","title":"Exercice 9 \u272a"},{"location":"tp8/#exercice-10","text":"\u00c9crire la fonction suffixe qui prend en param\u00e8tres : un tableau de nombres entiers T1 de taille len ( T1 ) ; un tableau de nombres entiers T2 de taille len ( T2 ) ; Cette fonction renvoie True si le tableau T2 termine par tous les \u00e9l\u00e9ments du tableau T1 dans le m\u00eame ordre et False sinon. Lancer b1 = (\"suffixe([8, 5], [1, 8, 5]) == True\", \\bksl-nl \"suffixe([3], [1, 8, 8]) == False\",\\bksl-nl \"suffixe([8,8,8], [8]) == False\",\\bksl-nl \"suffixe([], [5, 3, 1, 8]) == True\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def suffixe(T1, T2):bksl-nl taillepy-undT1 = len(T1)bksl-nl taillepy-undT2 = len(T2)bksl-nl bksl-nlbksl-nlT1 = [1, 8, 8]bksl-nlT2 = [5, 6, 3, 1, 8, 8]bksl-nlprint(suffixe(T1, T2))bksl-nlprint(suffixe(T2, T1))bksl-nlbksl-nlbksl-nl def suffixe(T1, T2):bksl-nl taillepy-undT1 = len(T1)bksl-nl taillepy-undT2 = len(T2)bksl-nl # cas o\u00c3\u00b9 T2 est plus petit que T1bksl-nl # T1 ne peut pas \u00c3\u00aatre un pr\u00c3\u00a9fixe...bksl-nl if taillepy-undT2 < taillepy-undT1:bksl-nl return Falsebksl-nlbksl-nl for indice in range(taillepy-undT1):bksl-nl if T1[taillepy-undT1 - indice - 1] != T2[taillepy-undT2 - indice - 1]:bksl-nl return Falsebksl-nl else:bksl-nl print(\"Jusque-l\u00c3 , tout va bien...\")bksl-nl # on a parcouru tout T1 dans l'ordre inversebksl-nl # et tous les \u00c3\u00a9l\u00c3\u00a9ments sont les m\u00c3\u00aamesbksl-nl return Truebksl-nlbksl-nlT1 = [1, 8, 8]bksl-nlT2 = [5, 6, 3, 1, 8, 8]bksl-nlprint(suffixe(T1, T2))bksl-nlprint(suffixe(T2, T1))bksl-nl A Z Aide Pour lire un tableau dans le sens inverse, il faut trouver une formule \u00e0 appliquer sur les indices du tableau. Par exemple, un tableau de taille 4 va se parcourir ainsi sur l'indice i par ordre croissant : i 0 1 2 3 ??? 3 2 1 0 Quelle sera la formule \u00e0 \u00e9crire \u00e0 la place des ??? pour obtenir 3 quand i vaut 0; 2 quand i vaut 1 etc.","title":"Exercice 10 \u272a\u272a"},{"location":"tp8/#exercice-11","text":"\u00c9crire la fonction d\u00e9terminer_minimum qui prend en param\u00e8tres : un entier taille_T1 ; un entier taille_T2 ; Cette fonction renvoie le maximum des deux tailles. \u00c9crire la fonction distance_hamming qui prend en param\u00e8tres : un tableau de cha\u00eene de caract\u00e8res T1 de taille len ( T1 ) ; un tableau de cha\u00eene de caract\u00e8res T2 de taille len ( T2 ) ; Cette fonction renvoie le nombre de lettres qui diff\u00e8re d'un tableau \u00e0 l'autre. Si les tableaux sont de taille diff\u00e9rente, les caract\u00e8res en trop seront compt\u00e9s comme des diff\u00e9rences : on utilisera la fonction d\u00e9terminer_minimum pour comparer la taille des tableaux. Par exemple : distance_hamming ([ 't' , 'o' , 't' , 'o' ] , [ 't' , 'a' , 't' , 'a' ]) renvoie [ 8 , 6 , 4 , 1 , 2 ] Lancer b1 = (\"d\u00c3\u00a9terminerpy-undminimum(8, 2) == 2\", \"d\u00c3\u00a9terminerpy-undminimum(1, 8) == 1\", \"d\u00c3\u00a9terminerpy-undminimum(-1, -2) == -2\")bksl-nlb2 = (\"distancepy-undhamming(['c', 'h', 'a', 't'], ['c', 'h', 'a', 't']) == 0\", \\bksl-nl \"distancepy-undhamming(['c', 'h', 'i', 'e', 'n'], ['c', 'h', 'i', 'o', 't']) == 2\", \\bksl-nl \"distancepy-undhamming(['c', 'h', 'a', 't'], ['c', 'h', 'a', 't', 'o', 'n']) == 2\",bksl-nl \"distancepy-undhamming(['v', 'i', 'd', 'e'], []) == 4\")bksl-nlbksl-nlbenchmark = [b1, b2 ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def d\u00c3\u00a9terminerpy-undminimum(taillepy-undT1, taillepy-undT2):bksl-nl passbksl-nlbksl-nldef distancepy-undhamming(T1, T2):bksl-nl passbksl-nlbksl-nlT1 = ['a', 'c', 'b', 'a']bksl-nlT2 = ['a', 'b', 'b', 'a', 'c', 'd', 'd']bksl-nlbksl-nlprint(distancepy-undhamming(T1, T2)) # doit renvoyer 4bksl-nl def d\u00c3\u00a9terminerpy-undminimum(taillepy-undT1, taillepy-undT2):bksl-nl if taillepy-undT2 > taillepy-undT1: return taillepy-undT1bksl-nl else: return taillepy-undT2bksl-nlbksl-nldef distancepy-undhamming(T1, T2):bksl-nl taillepy-undT1 = len(T1)bksl-nl taillepy-undT2 = len(T2)bksl-nl taillepy-undminimum = d\u00c3\u00a9terminerpy-undminimum(taillepy-undT1, taillepy-undT2)bksl-nlbksl-nl diff\u00c3\u00a9rence = 0bksl-nl for indice in range(taillepy-undminimum):bksl-nl if T1[indice] != T2[indice]:bksl-nl diff\u00c3\u00a9rence = diff\u00c3\u00a9rence + 1bksl-nlbksl-nl if taillepy-undT1 > taillepy-undminimum:bksl-nl manquant = taillepy-undT1 - taillepy-undminimumbksl-nl else:bksl-nl manquant = taillepy-undT2 - taillepy-undminimumbksl-nlbksl-nl diff\u00c3\u00a9rence = diff\u00c3\u00a9rence + manquantbksl-nl return diff\u00c3\u00a9rencebksl-nlbksl-nlT1 = ['a', 'c', 'b', 'a']bksl-nlT2 = ['a', 'b', 'b', 'a', 'c', 'd', 'd']bksl-nlbksl-nlprint(distancepy-undhamming(T1, T2))bksl-nl A Z","title":"Exercice 11 \u272a\u272a"},{"location":"tp8/#exercice-12","text":"Comme nous le verrons par la suite, les algorithmes de tri de tableaux sont un cas fondamental en th\u00e9orie informatique. Ils permettent d'aborder la notion d'efficacit\u00e9 au travers de la complexit\u00e9 (~ le co\u00fbt) d'un algorithme. Nous proposons ici d'impl\u00e9menter une m\u00e9thode de tri tr\u00e8s simple. Prenons le tableau suivant : [ 5 , 3 , 2 , 7 ] Premier passage dans la boucle externe \u00c9tape i = 0 : pla\u00e7ons le plus petit \u00e9l\u00e9ment \u00e0 l' indice 0 du tableau. Passage j = 0 5 3 2 7 5 == 5 \u2192 On ne fait rien. Passage j = 1 5 3 2 7 3 <= 5 \u2192 On \u00e9change T [ 1 ] avec T [ 0 ] Passage j = 2 3 5 2 7 2 <= 3 \u2192 On \u00e9change T [ 2 ] avec T [ 0 ] Passage j = 3 2 5 3 7 7 >= 2 \u2192 On ne fait rien. i = 0 contient l'\u00e9l\u00e9ment le plus petit. Deuxi\u00e8me passage dans la boucle externe \u00c9tape i = 1 : pla\u00e7ons le second plus petit \u00e9l\u00e9ment \u00e0 l' indice 1 du tableau. Passage j = 0 2 5 3 7 2 <= 5 \u2192 On ne fait rien. Passage j = 1 2 5 3 7 5 == 5 \u2192 On ne fait rien Passage j = 2 2 5 3 7 3 <= 5 \u2192 On \u00e9change T [ 2 ] avec T [ 1 ] Passage j = 3 2 3 5 7 7 >= 3 \u2192 On ne fait rien. i = 1 contient le deuxi\u00e8me \u00e9l\u00e9ment le plus petit. Les deux premiers \u00e9l\u00e9ments du tableau sont tri\u00e9s dans l'ordre croissant. L'algorithme comporte donc deux boucles imbriqu\u00e9es l'une dans l'autre. \u00c0 chaque fois qu'on trouve un nouvel entier plus petit qu' l'entier situ\u00e9 \u00e0 la position i , on l'inverse avec celui situ\u00e9 \u00e0 la position j . \u00c9crire une fonction trier qui prend pour param\u00e8tre un tableau T et r\u00e9alise le tri de ce tableau selon l'algorithme ci-dessus. La fonction renvoie un tableau tri\u00e9 dans l'ordre croissant. Lancer def validerpy-undvaleur(T, a, b):bksl-nl return all(map(lambda x: a < =x < =b, T))bksl-nlbksl-nlb1 = (\"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1,3,6], 6) == 1\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([8,8,8], 8) == 3\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1, 8, 1, 8], 8) == 2\", \"compterpy-undr\u00c3\u00a9p\u00c3\u00a9tition([1,3,99], 100) == 0\")bksl-nlbksl-nlbenchmark = [b1, ]bksl-nl Valider 5/5 T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder def trier(T):bksl-nl for i in range(len(T)):bksl-nl for j in range(len(T)):bksl-nl if T[i] < T[j]:bksl-nl T[i], T[j] = T[j], T[i]bksl-nl return Tbksl-nlbksl-nlT = [5, 3, 9, 1, 8, 3, -1, 9, 1]bksl-nlprint(T)bksl-nlT = trier(T)bksl-nlprint(T)bksl-nl def trier(T):bksl-nl for i in range(len(T)):bksl-nl for j in range(len(T)):bksl-nl if T[i] < T[j]:bksl-nl T[i], T[j] = T[j], T[i]bksl-nl return Tbksl-nlbksl-nlT = [5, 3, 9, 1, 8, 3, -1, 9, 1]bksl-nlprint(T)bksl-nlT = trier(T)bksl-nlprint(T)bksl-nl A Z","title":"Exercice 12 \u272a\u272a\u272a"},{"location":"special/hack1/","text":"Le clavier \u2693\ufe0e Cela peut sembler b\u00eate mais utiliser un clavier s'apprend... Pourquoi et comment devenir un ninja du clavier ? \u2693\ufe0e Pourquoi le clavier ? De nos jours, on utilise un peu la souris et de plus en plus les interfaces. Alors pourquoi le clavier ? La r\u00e9ponse tient en un mot : efficacit\u00e9 . Petite d\u00e9monstration avec Starcraft : Comment devenir un ninja du clavier ? La recette est simple et se d\u00e9compose en deux \u00e9tapes : il faut donner du sens aux raccourcis que vous utiliser ; il faut pratiquer, pratiquer, pratiquer \u00c0 force de pratique, vous n'allez plus penser aux raccourcis mais aux actions que vous souhaitez faire. Vos mains feront le reste automatiquement. Cours Quelques r\u00e8gles essentielles : dans de nombreux cas, Shift permet de faire l'inverse d'un raccourci d\u00e9j\u00e0 existant (onglet \u00e0 gauche au lieu d'onglet \u00e0 droite par exemple) ; limitez l'usage de la souris au maximum ; utilisez les fl\u00e8ches Up Down Right Left pour vous d\u00e9placer \u00e0 un endroit proche du caret | sur un document. Navigateur et syst\u00e8me d'exploitation \u2693\ufe0e Voici le tableau des raccourcis class\u00e9 par difficult\u00e9 d'utilisation. En fonction du syst\u00e8me d'exploitation, ceux-ci peuvent ne pas fonctionner comme attendu... Raccourci Action Mn\u00e9motechnique Difficult\u00e9 Alt \uff0b Tab Change de programme vers la droite Si Alt reste appuy\u00e9, les programmes disponibles apparaissent et peuvent \u00eatre s\u00e9lectionn\u00e9s avec plusieurs appuis sur Tab . Au repos, votre pouce et votre annulaire gauche touchent ces touches! Shift \uff0b Alt \uff0b Tab Change de programme vers la gauche Si Alt reste appuy\u00e9, les programmes disponibles apparaissent et peuvent \u00eatre s\u00e9lectionn\u00e9s avec plusieurs appuis sur Tab . Au repos, votre auriculaire, votre pouce et votre annulaire gauche touchent ces touches! Bureautique \u2693\ufe0e Voici le tableau des raccourcis class\u00e9 par difficult\u00e9 d'utilisation. Tous ces raccourcis devraient \u00eatre connus et maitris\u00e9s ! Raccourci Action Mn\u00e9motechnique Difficult\u00e9 Ctrl \uff0b X Couper la s\u00e9lection. X \u2192 ressemble \u00e0 des ciseaux Ctrl \uff0b C Copie la s\u00e9lection. C \u2192 copy Ctrl \uff0b V Colle la s\u00e9lection. \u00e0 c\u00f4t\u00e9 de C Ctrl \uff0b A Retourne en d\u00e9but de ligne. a est la premi\u00e8re lettre de l'alphabet Ctrl \uff0b E Va \u00e0 la fin de la ligne. E \u2192 end Alt \uff0b Left Se d\u00e9place d'un mot vers la gauche. Laissez Alt appuy\u00e9 et cliquer sur les fl\u00e8ches pour vous d\u00e9placer librement. Left \u2192 la gauche. Alt \u2192 fais un truc Shift \uff0b Left S\u00e9lectionne le caract\u00e8re \u00e0 gauche du caret. Laissez Shift appuy\u00e9 et cliquer sur les fl\u00e8ches pour vous s\u00e9lectionner librement. Left \u2192 la gauche. Shift s\u00e9lectionne. Shift \uff0b Up S\u00e9lectionne la ligne au-dessus du caret. Up va vers le haut. Shift s\u00e9lectionne. Shift \uff0b Alt \uff0b Left Se d\u00e9place d'un mot \u00e0 gauche du caret et le s\u00e9lectionne. Laissez Shift appuy\u00e9 et cliquer sur Alt \uff0b fl\u00e8che pour s\u00e9lectionner librement mot par mot ou ligne par ligne. Shift s\u00e9lectionne. Alt \uff0b Left se d\u00e9place d'un mot \u00e0 gauche. Remarque Vous pouvez toujours inverser gauche/droite et haut/bas en \u00e9change Left par Right et Up par Down .","title":"Le clavier"},{"location":"special/hack1/#le-clavier","text":"Cela peut sembler b\u00eate mais utiliser un clavier s'apprend...","title":"Le clavier"},{"location":"special/hack1/#pourquoi-et-comment-devenir-un-ninja-du-clavier","text":"Pourquoi le clavier ? De nos jours, on utilise un peu la souris et de plus en plus les interfaces. Alors pourquoi le clavier ? La r\u00e9ponse tient en un mot : efficacit\u00e9 . Petite d\u00e9monstration avec Starcraft : Comment devenir un ninja du clavier ? La recette est simple et se d\u00e9compose en deux \u00e9tapes : il faut donner du sens aux raccourcis que vous utiliser ; il faut pratiquer, pratiquer, pratiquer \u00c0 force de pratique, vous n'allez plus penser aux raccourcis mais aux actions que vous souhaitez faire. Vos mains feront le reste automatiquement. Cours Quelques r\u00e8gles essentielles : dans de nombreux cas, Shift permet de faire l'inverse d'un raccourci d\u00e9j\u00e0 existant (onglet \u00e0 gauche au lieu d'onglet \u00e0 droite par exemple) ; limitez l'usage de la souris au maximum ; utilisez les fl\u00e8ches Up Down Right Left pour vous d\u00e9placer \u00e0 un endroit proche du caret | sur un document.","title":"Pourquoi et comment devenir un ninja du clavier ?"},{"location":"special/hack1/#navigateur-et-systeme-dexploitation","text":"Voici le tableau des raccourcis class\u00e9 par difficult\u00e9 d'utilisation. En fonction du syst\u00e8me d'exploitation, ceux-ci peuvent ne pas fonctionner comme attendu... Raccourci Action Mn\u00e9motechnique Difficult\u00e9 Alt \uff0b Tab Change de programme vers la droite Si Alt reste appuy\u00e9, les programmes disponibles apparaissent et peuvent \u00eatre s\u00e9lectionn\u00e9s avec plusieurs appuis sur Tab . Au repos, votre pouce et votre annulaire gauche touchent ces touches! Shift \uff0b Alt \uff0b Tab Change de programme vers la gauche Si Alt reste appuy\u00e9, les programmes disponibles apparaissent et peuvent \u00eatre s\u00e9lectionn\u00e9s avec plusieurs appuis sur Tab . Au repos, votre auriculaire, votre pouce et votre annulaire gauche touchent ces touches!","title":"Navigateur et syst\u00e8me d'exploitation"},{"location":"special/hack1/#bureautique","text":"Voici le tableau des raccourcis class\u00e9 par difficult\u00e9 d'utilisation. Tous ces raccourcis devraient \u00eatre connus et maitris\u00e9s ! Raccourci Action Mn\u00e9motechnique Difficult\u00e9 Ctrl \uff0b X Couper la s\u00e9lection. X \u2192 ressemble \u00e0 des ciseaux Ctrl \uff0b C Copie la s\u00e9lection. C \u2192 copy Ctrl \uff0b V Colle la s\u00e9lection. \u00e0 c\u00f4t\u00e9 de C Ctrl \uff0b A Retourne en d\u00e9but de ligne. a est la premi\u00e8re lettre de l'alphabet Ctrl \uff0b E Va \u00e0 la fin de la ligne. E \u2192 end Alt \uff0b Left Se d\u00e9place d'un mot vers la gauche. Laissez Alt appuy\u00e9 et cliquer sur les fl\u00e8ches pour vous d\u00e9placer librement. Left \u2192 la gauche. Alt \u2192 fais un truc Shift \uff0b Left S\u00e9lectionne le caract\u00e8re \u00e0 gauche du caret. Laissez Shift appuy\u00e9 et cliquer sur les fl\u00e8ches pour vous s\u00e9lectionner librement. Left \u2192 la gauche. Shift s\u00e9lectionne. Shift \uff0b Up S\u00e9lectionne la ligne au-dessus du caret. Up va vers le haut. Shift s\u00e9lectionne. Shift \uff0b Alt \uff0b Left Se d\u00e9place d'un mot \u00e0 gauche du caret et le s\u00e9lectionne. Laissez Shift appuy\u00e9 et cliquer sur Alt \uff0b fl\u00e8che pour s\u00e9lectionner librement mot par mot ou ligne par ligne. Shift s\u00e9lectionne. Alt \uff0b Left se d\u00e9place d'un mot \u00e0 gauche. Remarque Vous pouvez toujours inverser gauche/droite et haut/bas en \u00e9change Left par Right et Up par Down .","title":"Bureautique"},{"location":"special/projet2/","text":"Projet : Une plante fractale \u2693\ufe0e But Le but de ce projet d'une dur\u00e9e de deux heures est d'obtenir le dessin d'une plante fractale comme celui ci-dessous. Pour cela, nous utiliserons le formalisme dit de Lindenmayer (dit L-syst\u00e8me ). Important Le travail est d\u00e9compos\u00e9 en plusieurs exercices corrig\u00e9s. Au fur et \u00e0 mesure de votre avanc\u00e9e, v\u00e9rifier votre travail gr\u00e2ce au petit gendarme (\u00e0 droite de la fl\u00e8che de t\u00e9l\u00e9versement) ; copier vos fonctions sur Thonny ; faites la partie Turtle sur Thonny. Pr\u00e9sentation du projet \u2693\ufe0e Pour cr\u00e9er des fractales avec un syst\u00e8me de Lindenmayer, on part d'un tableau contenant un ensemble de lettre. appel\u00e9e axiome. Pour une plante fractale, l'axiome est \"X\". \u00c0 partir de cet axiome et en appliquant de r\u00e8gles de transformation , on construit un tableau de lettres de plus en plus grand. Pour une plante fractale, les r\u00e8gles sont : \"X\" devient \"F+[[X]-X]-F[-FX]+X\" \"F\" devient \"FF\" n'importe quelle autre caract\u00e8re est inchang\u00e9e. \u00c0 titre d'exemple, si on prend pour axiome [ 'F' , 'X' , 'A' ] , le code devient : \u00e9tape 1: [ 'F' , 'X' , 'A' ] \u00e9tape 2: [ 'F' , 'F' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , 'A' ] \u00e9tape 3: [ 'F' , 'F' , 'F' , 'F' , 'F' , 'F' , '+' , '[' , '[' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , ']' , '-' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , ']' , '-' , 'F' , 'F' , '[' , '-' , 'F' , 'F' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , ']' , '+' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , 'A' ] Ce tableau va permettre de donner des instructions Turtle permettant de dessiner la plante fractale. Ainsi : si on lit un \"+\", on tourne \u00e0 droite de 25\u00b0 ; si on lit un \"-\", on tourne \u00e0 gauche de 25\u00b0 ; si on lit un \"F\", on avance de 10 pixels ; si on lit un \"[\", on enregistre dans un tableau la position et l'angle actuel de la tortue ; si on lit un \"]\", on r\u00e9cup\u00e8re \u00e0 partir du tableau la position et l'angle de la tortue pr\u00e9c\u00e9demment enregistr\u00e9. Partie 1 : cr\u00e9ation du tableau \u2693\ufe0e Exercice 1 En vous aidant des commentaires, \u00e9crire la fonction ajouter_lettre qui prend en param\u00e8tres : un tableau de lettres T de taille len ( T ) ; une lettre lettre . Cette fonction renvoie un tableau de lettres T de taille len ( T ) + 1 . Par exemple : ajouter_lettre ([ 'X' , 'X' , 'X' ] , '+' ) renvoie [ 'X' , 'X' , 'X' , '+' ] Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder Exercice 2 Maintenant que nous pouvons ajouter une lettre \u00e0 un tableau, nous devons cr\u00e9er une fonction permettant d'en ajouter plusieurs. \u00c9crire une fonction s'appelant ajouter_expression qui prend en param\u00e8tres : un tableau de lettres T de taille len ( T ) ; une expression expression compos\u00e9e de plusieurs lettres. Cette fonction parcourt et ajoute tous les caract\u00e8res contenus au sein d'une expression dans un tableau. Elle renvoie un tableau de lettres T de taille len ( T ) + len ( expression ) . Par exemple : ajouter_expression ([ 'X' , 'X' , 'X' ] , '+XF' ) renvoie [ 'X' , 'X' , 'X' , '+' , 'X' , 'F' ] Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder Exercice 3 Maintenant que nous savons ajouter une expression \u00e0 un tableau, nous devons cr\u00e9er une fonction permettant de passer d'une \u00e9tape \u00e0 la suivante. Pour cela, il faut cr\u00e9er un nouveau tableau \u00e0 partir du tableau existant. On va par exemple : \u00e0 partir du tableau de l'\u00e9tape 1, cr\u00e9er le tableau de l'\u00e9tape 2 ; \u00e0 partir du tableau de l'\u00e9tape 2, cr\u00e9er le tableau de l'\u00e9tape 3. \u00c9crire une fonction s'appelant g\u00e9n\u00e9rer_nouveau_tableau qui prend en param\u00e8tre : un tableau de lettres T de taille len ( T ) . Cette fonction renvoie le nouveau tableau de lettres. La strat\u00e9gie est la suivante : cette fonction part d'un nouveau tableau nouveau_tableau vide ; elle parcourt un par un tous les \u00e9l\u00e9ments du tableau : si l'\u00e9l\u00e9ment est un 'X' , on ajoute l'expression \"F+[[X]-X]-F[-FX]+X\" \u00e0 nouveau_tableau ; si l'\u00e9l\u00e9ment est un 'F' , on ajoute l'expression \"FF\" \u00e0 nouveau_tableau ; si l'\u00e9l\u00e9ment est un autre caract\u00e8re, on ajoute cette lettre \u00e0 nouveau_tableau . Par exemple : g\u00e9n\u00e9rer_nouveau_tableau ([ 'X' ]) renvoie [ 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' ] Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder Exercice 4 Finalement, il faut g\u00e9n\u00e9rer la plante \u00e0 un certain degr\u00e9 de finesse. Cela signifie que l'on cherche, \u00e0 partir de l'axiome \u00e0 cr\u00e9er la plante de l'\u00e9tape 4, 5 ou 6. La finesse correspond au num\u00e9ro de l'\u00e9tape. \u00c9crire une fonction s'appelant g\u00e9n\u00e9rer_plante qui prend en param\u00e8tre : un tableau de lettres axiome ; un degr\u00e9 de finesse finesse . Cette fonction renvoie la plante sous forme d'un tableau de lettres \u00e0 un certain degr\u00e9 de finesse. Par exemple : g\u00e9n\u00e9rer_plante ([ 'X' ] , 2 ) renvoie [ 'F' , 'F' , '+' , '[' , '[' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , ']' , '-' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , ']' , '-' , 'F' , 'F' , '[' , '-' , 'F' , 'F' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , ']' , '+' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' ] Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder Cours \u2693\ufe0e Cours En Python, il est possible de g\u00e9rer les tableaux de mani\u00e8re dynamique, en ajoutant et en retirant des \u00e9l\u00e9ments au tableau courant. Les instructions pour r\u00e9aliser ces op\u00e9rations sont : tableau . append ( \u00e9l\u00e9ment ) ajoute un \u00e9l\u00e9ment \u00e0 la fin d'un tableau ; tableau . pop ( 0 ) retire le premier \u00e9l\u00e9ment d'un tableau et renvoie sa valeur ; tableau . pop ( - 1 ) retire le dernier \u00e9l\u00e9ment d'un tableau et renvoie sa valeur. Exemple Essayez-lez ! Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder Partie 2 : Turtle \u2693\ufe0e Cette seconde partie se d\u00e9roule uniquement sur Thonny. Exercice 5 Nous allons maintenant dessiner la plante fractale ! Pour se faire, nous devons int\u00e9grer les lettres pr\u00e9sentes dans notre tableau. Copier le code ci-dessous dans Thonny ; Compl\u00e9ter la fonction dessiner_plante qui prend pour param\u00e8tres : un tableau de lettres tableau g\u00e9n\u00e9rer gr\u00e2ce \u00e0 la fonction g\u00e9n\u00e9rer_plante ; une longueur longueur correspondant \u00e0 la longueur d'un trait. Pour compl\u00e9ter cette fonction, allez voir l'interpr\u00e9tation des lettres en Tortue sur le lien wikip\u00e9dia . On prendra la distance unitaire \u00e9gale \u00e0 10 et l'angle \u00e9gal \u00e0 25\u00b0. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder Aide Pour obtenir : la position actuelle de la tortue, on fait turtle . pos () ; la direction actuelle de la tortue, on fait turtle . heading () . Pour donner : une position \u00e0 la tortue, on fait turtle . setpos ( position_\u00e0_donner ) ; une direction \u00e0 la tortue, on fait turtle . seth ( direction_\u00e0_donner ) . On pensera \u00e0 lever le stylo avec turtle . penup () avant de replacer la tortue \u00e0 son ancien emplacement, puis \u00e0 le baisser avec turtle . pendown () . Dessiner des plantes fractales et amusez-vous !","title":"Projet : Une plante fractale"},{"location":"special/projet2/#projet-une-plante-fractale","text":"But Le but de ce projet d'une dur\u00e9e de deux heures est d'obtenir le dessin d'une plante fractale comme celui ci-dessous. Pour cela, nous utiliserons le formalisme dit de Lindenmayer (dit L-syst\u00e8me ). Important Le travail est d\u00e9compos\u00e9 en plusieurs exercices corrig\u00e9s. Au fur et \u00e0 mesure de votre avanc\u00e9e, v\u00e9rifier votre travail gr\u00e2ce au petit gendarme (\u00e0 droite de la fl\u00e8che de t\u00e9l\u00e9versement) ; copier vos fonctions sur Thonny ; faites la partie Turtle sur Thonny.","title":"Projet : Une plante fractale"},{"location":"special/projet2/#presentation-du-projet","text":"Pour cr\u00e9er des fractales avec un syst\u00e8me de Lindenmayer, on part d'un tableau contenant un ensemble de lettre. appel\u00e9e axiome. Pour une plante fractale, l'axiome est \"X\". \u00c0 partir de cet axiome et en appliquant de r\u00e8gles de transformation , on construit un tableau de lettres de plus en plus grand. Pour une plante fractale, les r\u00e8gles sont : \"X\" devient \"F+[[X]-X]-F[-FX]+X\" \"F\" devient \"FF\" n'importe quelle autre caract\u00e8re est inchang\u00e9e. \u00c0 titre d'exemple, si on prend pour axiome [ 'F' , 'X' , 'A' ] , le code devient : \u00e9tape 1: [ 'F' , 'X' , 'A' ] \u00e9tape 2: [ 'F' , 'F' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , 'A' ] \u00e9tape 3: [ 'F' , 'F' , 'F' , 'F' , 'F' , 'F' , '+' , '[' , '[' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , ']' , '-' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , ']' , '-' , 'F' , 'F' , '[' , '-' , 'F' , 'F' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , ']' , '+' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , 'A' ] Ce tableau va permettre de donner des instructions Turtle permettant de dessiner la plante fractale. Ainsi : si on lit un \"+\", on tourne \u00e0 droite de 25\u00b0 ; si on lit un \"-\", on tourne \u00e0 gauche de 25\u00b0 ; si on lit un \"F\", on avance de 10 pixels ; si on lit un \"[\", on enregistre dans un tableau la position et l'angle actuel de la tortue ; si on lit un \"]\", on r\u00e9cup\u00e8re \u00e0 partir du tableau la position et l'angle de la tortue pr\u00e9c\u00e9demment enregistr\u00e9.","title":"Pr\u00e9sentation du projet"},{"location":"special/projet2/#partie-1-creation-du-tableau","text":"Exercice 1 En vous aidant des commentaires, \u00e9crire la fonction ajouter_lettre qui prend en param\u00e8tres : un tableau de lettres T de taille len ( T ) ; une lettre lettre . Cette fonction renvoie un tableau de lettres T de taille len ( T ) + 1 . Par exemple : ajouter_lettre ([ 'X' , 'X' , 'X' ] , '+' ) renvoie [ 'X' , 'X' , 'X' , '+' ] Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder Exercice 2 Maintenant que nous pouvons ajouter une lettre \u00e0 un tableau, nous devons cr\u00e9er une fonction permettant d'en ajouter plusieurs. \u00c9crire une fonction s'appelant ajouter_expression qui prend en param\u00e8tres : un tableau de lettres T de taille len ( T ) ; une expression expression compos\u00e9e de plusieurs lettres. Cette fonction parcourt et ajoute tous les caract\u00e8res contenus au sein d'une expression dans un tableau. Elle renvoie un tableau de lettres T de taille len ( T ) + len ( expression ) . Par exemple : ajouter_expression ([ 'X' , 'X' , 'X' ] , '+XF' ) renvoie [ 'X' , 'X' , 'X' , '+' , 'X' , 'F' ] Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder Exercice 3 Maintenant que nous savons ajouter une expression \u00e0 un tableau, nous devons cr\u00e9er une fonction permettant de passer d'une \u00e9tape \u00e0 la suivante. Pour cela, il faut cr\u00e9er un nouveau tableau \u00e0 partir du tableau existant. On va par exemple : \u00e0 partir du tableau de l'\u00e9tape 1, cr\u00e9er le tableau de l'\u00e9tape 2 ; \u00e0 partir du tableau de l'\u00e9tape 2, cr\u00e9er le tableau de l'\u00e9tape 3. \u00c9crire une fonction s'appelant g\u00e9n\u00e9rer_nouveau_tableau qui prend en param\u00e8tre : un tableau de lettres T de taille len ( T ) . Cette fonction renvoie le nouveau tableau de lettres. La strat\u00e9gie est la suivante : cette fonction part d'un nouveau tableau nouveau_tableau vide ; elle parcourt un par un tous les \u00e9l\u00e9ments du tableau : si l'\u00e9l\u00e9ment est un 'X' , on ajoute l'expression \"F+[[X]-X]-F[-FX]+X\" \u00e0 nouveau_tableau ; si l'\u00e9l\u00e9ment est un 'F' , on ajoute l'expression \"FF\" \u00e0 nouveau_tableau ; si l'\u00e9l\u00e9ment est un autre caract\u00e8re, on ajoute cette lettre \u00e0 nouveau_tableau . Par exemple : g\u00e9n\u00e9rer_nouveau_tableau ([ 'X' ]) renvoie [ 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' ] Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder Exercice 4 Finalement, il faut g\u00e9n\u00e9rer la plante \u00e0 un certain degr\u00e9 de finesse. Cela signifie que l'on cherche, \u00e0 partir de l'axiome \u00e0 cr\u00e9er la plante de l'\u00e9tape 4, 5 ou 6. La finesse correspond au num\u00e9ro de l'\u00e9tape. \u00c9crire une fonction s'appelant g\u00e9n\u00e9rer_plante qui prend en param\u00e8tre : un tableau de lettres axiome ; un degr\u00e9 de finesse finesse . Cette fonction renvoie la plante sous forme d'un tableau de lettres \u00e0 un certain degr\u00e9 de finesse. Par exemple : g\u00e9n\u00e9rer_plante ([ 'X' ] , 2 ) renvoie [ 'F' , 'F' , '+' , '[' , '[' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , ']' , '-' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , ']' , '-' , 'F' , 'F' , '[' , '-' , 'F' , 'F' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' , ']' , '+' , 'F' , '+' , '[' , '[' , 'X' , ']' , '-' , 'X' , ']' , '-' , 'F' , '[' , '-' , 'F' , 'X' , ']' , '+' , 'X' ] Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder","title":"Partie 1 : cr\u00e9ation du tableau"},{"location":"special/projet2/#cours","text":"Cours En Python, il est possible de g\u00e9rer les tableaux de mani\u00e8re dynamique, en ajoutant et en retirant des \u00e9l\u00e9ments au tableau courant. Les instructions pour r\u00e9aliser ces op\u00e9rations sont : tableau . append ( \u00e9l\u00e9ment ) ajoute un \u00e9l\u00e9ment \u00e0 la fin d'un tableau ; tableau . pop ( 0 ) retire le premier \u00e9l\u00e9ment d'un tableau et renvoie sa valeur ; tableau . pop ( - 1 ) retire le dernier \u00e9l\u00e9ment d'un tableau et renvoie sa valeur. Exemple Essayez-lez ! Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder","title":"Cours"},{"location":"special/projet2/#partie-2-turtle","text":"Cette seconde partie se d\u00e9roule uniquement sur Thonny. Exercice 5 Nous allons maintenant dessiner la plante fractale ! Pour se faire, nous devons int\u00e9grer les lettres pr\u00e9sentes dans notre tableau. Copier le code ci-dessous dans Thonny ; Compl\u00e9ter la fonction dessiner_plante qui prend pour param\u00e8tres : un tableau de lettres tableau g\u00e9n\u00e9rer gr\u00e2ce \u00e0 la fonction g\u00e9n\u00e9rer_plante ; une longueur longueur correspondant \u00e0 la longueur d'un trait. Pour compl\u00e9ter cette fonction, allez voir l'interpr\u00e9tation des lettres en Tortue sur le lien wikip\u00e9dia . On prendra la distance unitaire \u00e9gale \u00e0 10 et l'angle \u00e9gal \u00e0 25\u00b0. Lancer T\u00e9l\u00e9charger T\u00e9l\u00e9verser Connecter \u00e0 Numworks T\u00e9l\u00e9verser \u00e0 Numworks Recharger Sauvegarder Aide Pour obtenir : la position actuelle de la tortue, on fait turtle . pos () ; la direction actuelle de la tortue, on fait turtle . heading () . Pour donner : une position \u00e0 la tortue, on fait turtle . setpos ( position_\u00e0_donner ) ; une direction \u00e0 la tortue, on fait turtle . seth ( direction_\u00e0_donner ) . On pensera \u00e0 lever le stylo avec turtle . penup () avant de replacer la tortue \u00e0 son ancien emplacement, puis \u00e0 le baisser avec turtle . pendown () . Dessiner des plantes fractales et amusez-vous !","title":"Partie 2 : Turtle"},{"location":"xtra/end_REM/","text":"Z","title":"end REM"},{"location":"xtra/start_REM/","text":"A","title":"start REM"}]}